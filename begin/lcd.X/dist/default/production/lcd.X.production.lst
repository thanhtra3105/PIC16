

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat Jun 08 16:03:22 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21     0000                     
    22                           ; Generated 12/10/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56     0000                     	;# 
    57     0001                     	;# 
    58     0002                     	;# 
    59     0003                     	;# 
    60     0004                     	;# 
    61     0005                     	;# 
    62     0006                     	;# 
    63     0007                     	;# 
    64     0008                     	;# 
    65     0009                     	;# 
    66     000A                     	;# 
    67     000B                     	;# 
    68     000C                     	;# 
    69     000D                     	;# 
    70     000E                     	;# 
    71     000E                     	;# 
    72     000F                     	;# 
    73     0010                     	;# 
    74     0011                     	;# 
    75     0012                     	;# 
    76     0013                     	;# 
    77     0014                     	;# 
    78     0015                     	;# 
    79     0015                     	;# 
    80     0016                     	;# 
    81     0017                     	;# 
    82     0018                     	;# 
    83     0019                     	;# 
    84     001A                     	;# 
    85     001B                     	;# 
    86     001B                     	;# 
    87     001C                     	;# 
    88     001D                     	;# 
    89     001E                     	;# 
    90     001F                     	;# 
    91     0081                     	;# 
    92     0085                     	;# 
    93     0086                     	;# 
    94     0087                     	;# 
    95     0088                     	;# 
    96     0089                     	;# 
    97     008C                     	;# 
    98     008D                     	;# 
    99     008E                     	;# 
   100     0091                     	;# 
   101     0092                     	;# 
   102     0093                     	;# 
   103     0094                     	;# 
   104     0098                     	;# 
   105     0099                     	;# 
   106     009C                     	;# 
   107     009D                     	;# 
   108     009E                     	;# 
   109     009F                     	;# 
   110     010C                     	;# 
   111     010D                     	;# 
   112     010E                     	;# 
   113     010F                     	;# 
   114     018C                     	;# 
   115     018D                     	;# 
   116     0000                     	;# 
   117     0001                     	;# 
   118     0002                     	;# 
   119     0003                     	;# 
   120     0004                     	;# 
   121     0005                     	;# 
   122     0006                     	;# 
   123     0007                     	;# 
   124     0008                     	;# 
   125     0009                     	;# 
   126     000A                     	;# 
   127     000B                     	;# 
   128     000C                     	;# 
   129     000D                     	;# 
   130     000E                     	;# 
   131     000E                     	;# 
   132     000F                     	;# 
   133     0010                     	;# 
   134     0011                     	;# 
   135     0012                     	;# 
   136     0013                     	;# 
   137     0014                     	;# 
   138     0015                     	;# 
   139     0015                     	;# 
   140     0016                     	;# 
   141     0017                     	;# 
   142     0018                     	;# 
   143     0019                     	;# 
   144     001A                     	;# 
   145     001B                     	;# 
   146     001B                     	;# 
   147     001C                     	;# 
   148     001D                     	;# 
   149     001E                     	;# 
   150     001F                     	;# 
   151     0081                     	;# 
   152     0085                     	;# 
   153     0086                     	;# 
   154     0087                     	;# 
   155     0088                     	;# 
   156     0089                     	;# 
   157     008C                     	;# 
   158     008D                     	;# 
   159     008E                     	;# 
   160     0091                     	;# 
   161     0092                     	;# 
   162     0093                     	;# 
   163     0094                     	;# 
   164     0098                     	;# 
   165     0099                     	;# 
   166     009C                     	;# 
   167     009D                     	;# 
   168     009E                     	;# 
   169     009F                     	;# 
   170     010C                     	;# 
   171     010D                     	;# 
   172     010E                     	;# 
   173     010F                     	;# 
   174     018C                     	;# 
   175     018D                     	;# 
   176                           
   177                           	psect	idataCOMMON
   178     0622                     __pidataCOMMON:
   179                           
   180                           ;initializer for __XTAL_FREQ
   181     0622  3440               	retlw	64
   182     0623  3442               	retlw	66
   183     0005                     _PORTAbits	set	5
   184     0006                     _PORTBbits	set	6
   185     0005                     _PORTA	set	5
   186     0008                     _PORTD	set	8
   187     0007                     _PORTCbits	set	7
   188     0085                     _TRISAbits	set	133
   189     0086                     _TRISBbits	set	134
   190     0088                     _TRISD	set	136
   191     0087                     _TRISC	set	135
   192     0085                     _TRISA	set	133
   193                           
   194                           	psect	strings
   195     0003                     __pstrings:
   196     0003                     stringtab:
   197     0003                     __stringtab:
   198     0003                     stringcode:	
   199                           ;	String table - string pointers are 1 byte each
   200                           
   201     0003                     stringdir:
   202     0003  3000               	movlw	high stringdir
   203     0004  008A               	movwf	10
   204     0005  0804               	movf	4,w
   205     0006  0A84               	incf	4,f
   206     0007  0782               	addwf	2,f
   207     0008                     __stringbase:
   208     0008  3400               	retlw	0
   209     0009                     __end_of__stringtab:
   210     0009                     STR_1:
   211     0009  3463               	retlw	99	;'c'
   212     000A  346F               	retlw	111	;'o'
   213     000B  3475               	retlw	117	;'u'
   214     000C  346E               	retlw	110	;'n'
   215     000D  3474               	retlw	116	;'t'
   216     000E  343D               	retlw	61	;'='
   217     000F  3400               	retlw	0
   218                           
   219                           	psect	cinit
   220     07F0                     start_initialization:	
   221                           ; #config settings
   222                           
   223     07F0                     __initialization:
   224                           
   225                           ; Initialize objects allocated to COMMON
   226     07F0  120A  118A  2622  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   227     07F5  00FC               	movwf	__pdataCOMMON& (0+127)
   228     07F6  120A  118A  2623  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   229     07FB  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   230     07FC                     end_of_initialization:	
   231                           ;End of C runtime variable initialization code
   232                           
   233     07FC                     __end_of__initialization:
   234     07FC  0183               	clrf	3
   235     07FD  120A  118A  2F15   	ljmp	_main	;jump to C main() function
   236                           
   237                           	psect	dataCOMMON
   238     007C                     __pdataCOMMON:
   239     007C                     __XTAL_FREQ:
   240     007C                     	ds	2
   241                           
   242                           	psect	cstackCOMMON
   243     0070                     __pcstackCOMMON:
   244     0070                     ?_lcd_command:
   245     0070                     ??_lcd_command:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?_lcd_data:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ??_lcd_data:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ?_lcd_init:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ?_lcd_string:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     ?_main:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ?___lwdiv:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     ?___lwmod:	
   267                           ; 2 bytes @ 0x0
   268                           
   269     0070                     lcd_command@cmd:	
   270                           ; 2 bytes @ 0x0
   271                           
   272     0070                     lcd_data@Data:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ___lwdiv@divisor:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ___lwmod@divisor:	
   279                           ; 2 bytes @ 0x0
   280                           
   281                           
   282                           ; 2 bytes @ 0x0
   283     0070                     	ds	1
   284     0071                     ??_lcd_init:
   285     0071                     ??_lcd_string:	
   286                           ; 1 bytes @ 0x1
   287                           
   288     0071                     ?_lcd_setCursor:	
   289                           ; 1 bytes @ 0x1
   290                           
   291     0071                     lcd_string@string_data:	
   292                           ; 1 bytes @ 0x1
   293                           
   294     0071                     lcd_setCursor@y:	
   295                           ; 1 bytes @ 0x1
   296                           
   297                           
   298                           ; 1 bytes @ 0x1
   299     0071                     	ds	1
   300     0072                     ??_lcd_setCursor:
   301     0072                     lcd_setCursor@x:	
   302                           ; 1 bytes @ 0x2
   303                           
   304     0072                     lcd_string@i:	
   305                           ; 1 bytes @ 0x2
   306                           
   307     0072                     ___lwdiv@dividend:	
   308                           ; 2 bytes @ 0x2
   309                           
   310     0072                     ___lwmod@dividend:	
   311                           ; 2 bytes @ 0x2
   312                           
   313                           
   314                           ; 2 bytes @ 0x2
   315     0072                     	ds	2
   316     0074                     ??___lwdiv:
   317     0074                     ??___lwmod:	
   318                           ; 1 bytes @ 0x4
   319                           
   320     0074                     ___lwmod@counter:	
   321                           ; 1 bytes @ 0x4
   322                           
   323     0074                     ___lwdiv@quotient:	
   324                           ; 1 bytes @ 0x4
   325                           
   326                           
   327                           ; 2 bytes @ 0x4
   328     0074                     	ds	2
   329     0076                     ___lwdiv@counter:
   330                           
   331                           ; 1 bytes @ 0x6
   332     0076                     	ds	1
   333     0077                     ?_lcd_number:
   334     0077                     lcd_number@num:	
   335                           ; 1 bytes @ 0x7
   336                           
   337                           
   338                           ; 2 bytes @ 0x7
   339     0077                     	ds	2
   340     0079                     ??_lcd_number:
   341                           
   342                           ; 1 bytes @ 0x9
   343     0079                     	ds	1
   344     007A                     ??_main:
   345     007A                     main@count:	
   346                           ; 1 bytes @ 0xA
   347                           
   348                           
   349                           ; 2 bytes @ 0xA
   350     007A                     	ds	2
   351                           
   352                           	psect	cstackBANK0
   353     0020                     __pcstackBANK0:
   354     0020                     lcd_number@a:
   355                           
   356                           ; 32 bytes @ 0x0
   357     0020                     	ds	32
   358     0040                     lcd_number@temp:
   359                           
   360                           ; 2 bytes @ 0x20
   361     0040                     	ds	2
   362     0042                     lcd_number@count:
   363                           
   364                           ; 2 bytes @ 0x22
   365     0042                     	ds	2
   366                           
   367                           	psect	maintext
   368     0715                     __pmaintext:	
   369 ;;
   370 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   371 ;;
   372 ;; *************** function _main *****************
   373 ;; Defined at:
   374 ;;		line 21 in file "newmain.c"
   375 ;; Parameters:    Size  Location     Type
   376 ;;		None
   377 ;; Auto vars:     Size  Location     Type
   378 ;;  count           2   10[COMMON] int 
   379 ;; Return value:  Size  Location     Type
   380 ;;                  1    wreg      void 
   381 ;; Registers used:
   382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : B00/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   388 ;;      Params:         0       0       0       0       0
   389 ;;      Locals:         2       0       0       0       0
   390 ;;      Temps:          0       0       0       0       0
   391 ;;      Totals:         2       0       0       0       0
   392 ;;Total ram usage:        2 bytes
   393 ;; Hardware stack levels required when called: 2
   394 ;; This function calls:
   395 ;;		_lcd_init
   396 ;;		_lcd_number
   397 ;;		_lcd_setCursor
   398 ;;		_lcd_string
   399 ;; This function is called by:
   400 ;;		Startup code after reset
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404     0715                     _main:	
   405                           ;psect for function _main
   406                           
   407     0715                     l1245:	
   408                           ;incstack = 0
   409                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   410                           
   411                           
   412                           ;newmain.c: 22:     TRISA = 0;
   413     0715  1683               	bsf	3,5	;RP0=1, select bank1
   414     0716  1303               	bcf	3,6	;RP1=0, select bank1
   415     0717  0185               	clrf	5	;volatile
   416                           
   417                           ;newmain.c: 23:     TRISC = 0;
   418     0718  0187               	clrf	7	;volatile
   419                           
   420                           ;newmain.c: 24:     TRISD = 0;
   421     0719  0188               	clrf	8	;volatile
   422                           
   423                           ;newmain.c: 25:     PORTD = 0;
   424     071A  1283               	bcf	3,5	;RP0=0, select bank0
   425     071B  1303               	bcf	3,6	;RP1=0, select bank0
   426     071C  0188               	clrf	8	;volatile
   427     071D                     l1247:
   428                           
   429                           ;newmain.c: 27:     TRISBbits.TRISB0 = 1;
   430     071D  1683               	bsf	3,5	;RP0=1, select bank1
   431     071E  1303               	bcf	3,6	;RP1=0, select bank1
   432     071F  1406               	bsf	6,0	;volatile
   433     0720                     l1249:
   434                           
   435                           ;newmain.c: 28:     TRISAbits.TRISA1 = 0;
   436     0720  1085               	bcf	5,1	;volatile
   437                           
   438                           ;newmain.c: 29:     PORTA = 0;
   439     0721  1283               	bcf	3,5	;RP0=0, select bank0
   440     0722  1303               	bcf	3,6	;RP1=0, select bank0
   441     0723  0185               	clrf	5	;volatile
   442                           
   443                           ;newmain.c: 30:     int count = 0;
   444     0724  01FA               	clrf	main@count
   445     0725  01FB               	clrf	main@count+1
   446     0726                     l1251:
   447                           
   448                           ;newmain.c: 31:     lcd_init();
   449     0726  120A  118A  263C  120A  118A  	fcall	_lcd_init
   450     072B                     l1253:
   451                           
   452                           ;newmain.c: 32:     lcd_setCursor(0, 0);
   453     072B  01F1               	clrf	lcd_setCursor@y
   454     072C  3000               	movlw	0
   455     072D  120A  118A  264F  120A  118A  	fcall	_lcd_setCursor
   456     0732                     l1255:
   457                           
   458                           ;newmain.c: 33:     lcd_string("count=");
   459     0732  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   460     0733  120A  118A  2670  120A  118A  	fcall	_lcd_string
   461     0738                     l1257:
   462                           
   463                           ;newmain.c: 34:     lcd_setCursor(6, 0);
   464     0738  01F1               	clrf	lcd_setCursor@y
   465     0739  3006               	movlw	6
   466     073A  120A  118A  264F  120A  118A  	fcall	_lcd_setCursor
   467     073F                     l1259:
   468                           
   469                           ;newmain.c: 35:     lcd_number(count);
   470     073F  3000               	movlw	0
   471     0740  00F7               	movwf	lcd_number@num
   472     0741  00F8               	movwf	lcd_number@num+1
   473     0742  120A  118A  2774  120A  118A  	fcall	_lcd_number
   474     0747                     l1261:
   475                           
   476                           ;newmain.c: 38:         if (PORTBbits.RB0 == 0) {
   477     0747  1283               	bcf	3,5	;RP0=0, select bank0
   478     0748  1303               	bcf	3,6	;RP1=0, select bank0
   479     0749  1806               	btfsc	6,0	;volatile
   480     074A  2F4C               	goto	u1371
   481     074B  2F4D               	goto	u1370
   482     074C                     u1371:
   483     074C  2F47               	goto	l1261
   484     074D                     u1370:
   485     074D                     l1263:
   486                           
   487                           ;newmain.c: 39:             count++;
   488     074D  3001               	movlw	1
   489     074E  07FA               	addwf	main@count,f
   490     074F  1803               	skipnc
   491     0750  0AFB               	incf	main@count+1,f
   492     0751  3000               	movlw	0
   493     0752  07FB               	addwf	main@count+1,f
   494     0753                     l1265:
   495                           
   496                           ;newmain.c: 41:             lcd_setCursor(6, 0);
   497     0753  01F1               	clrf	lcd_setCursor@y
   498     0754  3006               	movlw	6
   499     0755  120A  118A  264F  120A  118A  	fcall	_lcd_setCursor
   500     075A                     l1267:
   501                           
   502                           ;newmain.c: 42:             lcd_number(count);
   503     075A  087B               	movf	main@count+1,w
   504     075B  00F8               	movwf	lcd_number@num+1
   505     075C  087A               	movf	main@count,w
   506     075D  00F7               	movwf	lcd_number@num
   507     075E  120A  118A  2774  120A  118A  	fcall	_lcd_number
   508     0763                     l64:	
   509                           ;newmain.c: 43:             while(PORTBbits.RB0 == 0);
   510                           
   511     0763  1283               	bcf	3,5	;RP0=0, select bank0
   512     0764  1303               	bcf	3,6	;RP1=0, select bank0
   513     0765  1C06               	btfss	6,0	;volatile
   514     0766  2F68               	goto	u1381
   515     0767  2F69               	goto	u1380
   516     0768                     u1381:
   517     0768  2F63               	goto	l64
   518     0769                     u1380:
   519     0769                     l66:
   520                           
   521                           ;newmain.c: 44:             if(count %2 ==0)
   522     0769  187A               	btfsc	main@count,0
   523     076A  2F6C               	goto	u1391
   524     076B  2F6D               	goto	u1390
   525     076C                     u1391:
   526     076C  2F6F               	goto	l67
   527     076D                     u1390:
   528     076D                     l1269:
   529                           
   530                           ;newmain.c: 45:             {;newmain.c: 46:                 PORTAbits.RA1 = 1;
   531     076D  1485               	bsf	5,1	;volatile
   532                           
   533                           ;newmain.c: 47:             }
   534     076E  2F47               	goto	l1261
   535     076F                     l67:	
   536                           ;newmain.c: 48:             else
   537                           
   538                           
   539                           ;newmain.c: 49:                 PORTAbits.RA1 = 0;
   540     076F  1085               	bcf	5,1	;volatile
   541     0770  2F47               	goto	l1261
   542     0771  120A  118A  2800   	ljmp	start
   543     0774                     __end_of_main:
   544                           
   545                           	psect	text1
   546     0670                     __ptext1:	
   547 ;; *************** function _lcd_string *****************
   548 ;; Defined at:
   549 ;;		line 41 in file "./lcd_8bit.h"
   550 ;; Parameters:    Size  Location     Type
   551 ;;  string_data     1    wreg     PTR unsigned char 
   552 ;;		 -> STR_1(7), 
   553 ;; Auto vars:     Size  Location     Type
   554 ;;  string_data     1    1[COMMON] PTR unsigned char 
   555 ;;		 -> STR_1(7), 
   556 ;;  i               2    2[COMMON] int 
   557 ;; Return value:  Size  Location     Type
   558 ;;                  1    wreg      void 
   559 ;; Registers used:
   560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   566 ;;      Params:         0       0       0       0       0
   567 ;;      Locals:         3       0       0       0       0
   568 ;;      Temps:          0       0       0       0       0
   569 ;;      Totals:         3       0       0       0       0
   570 ;;Total ram usage:        3 bytes
   571 ;; Hardware stack levels used: 1
   572 ;; Hardware stack levels required when called: 1
   573 ;; This function calls:
   574 ;;		_lcd_data
   575 ;; This function is called by:
   576 ;;		_main
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580     0670                     _lcd_string:	
   581                           ;psect for function _lcd_string
   582                           
   583                           
   584                           ;incstack = 0
   585                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   586                           ;lcd_string@string_data stored from wreg
   587     0670  00F1               	movwf	lcd_string@string_data
   588     0671                     l1203:
   589                           
   590                           ;./lcd_8bit.h: 42:     int i = 0;
   591     0671  01F2               	clrf	lcd_string@i
   592     0672  01F3               	clrf	lcd_string@i+1
   593                           
   594                           ;./lcd_8bit.h: 43:     for (i = 0; string_data[i] != 0; i++) {
   595     0673  01F2               	clrf	lcd_string@i
   596     0674  01F3               	clrf	lcd_string@i+1
   597     0675  2E89               	goto	l1209
   598     0676                     l1205:
   599                           
   600                           ;./lcd_8bit.h: 44:         lcd_data(string_data[i]);
   601     0676  0872               	movf	lcd_string@i,w
   602     0677  0771               	addwf	lcd_string@string_data,w
   603     0678  0084               	movwf	4
   604     0679  120A  118A  2003  120A  118A  	fcall	stringdir
   605     067E  120A  118A  2630  120A  118A  	fcall	_lcd_data
   606     0683                     l1207:
   607                           
   608                           ;./lcd_8bit.h: 45:     }
   609     0683  3001               	movlw	1
   610     0684  07F2               	addwf	lcd_string@i,f
   611     0685  1803               	skipnc
   612     0686  0AF3               	incf	lcd_string@i+1,f
   613     0687  3000               	movlw	0
   614     0688  07F3               	addwf	lcd_string@i+1,f
   615     0689                     l1209:
   616     0689  0872               	movf	lcd_string@i,w
   617     068A  0771               	addwf	lcd_string@string_data,w
   618     068B  0084               	movwf	4
   619     068C  120A  118A  2003  120A  118A  	fcall	stringdir
   620     0691  3A00               	xorlw	0
   621     0692  1D03               	skipz
   622     0693  2E95               	goto	u1301
   623     0694  2E96               	goto	u1300
   624     0695                     u1301:
   625     0695  2E76               	goto	l1205
   626     0696                     u1300:
   627     0696                     l39:
   628     0696  0008               	return
   629     0697                     __end_of_lcd_string:
   630                           
   631                           	psect	text2
   632     064F                     __ptext2:	
   633 ;; *************** function _lcd_setCursor *****************
   634 ;; Defined at:
   635 ;;		line 71 in file "./lcd_8bit.h"
   636 ;; Parameters:    Size  Location     Type
   637 ;;  x               1    wreg     unsigned char 
   638 ;;  y               1    1[COMMON] unsigned char 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;  x               1    2[COMMON] unsigned char 
   641 ;; Return value:  Size  Location     Type
   642 ;;                  1    wreg      void 
   643 ;; Registers used:
   644 ;;		wreg, status,2, status,0, pclath, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   650 ;;      Params:         1       0       0       0       0
   651 ;;      Locals:         1       0       0       0       0
   652 ;;      Temps:          0       0       0       0       0
   653 ;;      Totals:         2       0       0       0       0
   654 ;;Total ram usage:        2 bytes
   655 ;; Hardware stack levels used: 1
   656 ;; Hardware stack levels required when called: 1
   657 ;; This function calls:
   658 ;;		_lcd_command
   659 ;; This function is called by:
   660 ;;		_main
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664     064F                     _lcd_setCursor:	
   665                           ;psect for function _lcd_setCursor
   666                           
   667                           
   668                           ;incstack = 0
   669                           ; Regs used in _lcd_setCursor: [wreg+status,2+status,0+pclath+cstack]
   670                           ;lcd_setCursor@x stored from wreg
   671     064F  00F2               	movwf	lcd_setCursor@x
   672     0650                     l1235:
   673                           
   674                           ;./lcd_8bit.h: 71: void lcd_setCursor(unsigned char x, unsigned char y);./lcd_8bit.h: 72
      +                          : {;./lcd_8bit.h: 73:     if (x >= 0 && x < 16) {
   675     0650  3010               	movlw	16
   676     0651  0272               	subwf	lcd_setCursor@x,w
   677     0652  1803               	skipnc
   678     0653  2E55               	goto	u1341
   679     0654  2E56               	goto	u1340
   680     0655                     u1341:
   681     0655  2E6F               	goto	l57
   682     0656                     u1340:
   683     0656                     l1237:
   684                           
   685                           ;./lcd_8bit.h: 74:         if (y == 0)
   686     0656  0871               	movf	lcd_setCursor@y,w
   687     0657  1D03               	btfss	3,2
   688     0658  2E5A               	goto	u1351
   689     0659  2E5B               	goto	u1350
   690     065A                     u1351:
   691     065A  2E63               	goto	l1241
   692     065B                     u1350:
   693     065B                     l1239:
   694                           
   695                           ;./lcd_8bit.h: 75:         {;./lcd_8bit.h: 76:             lcd_command(0x80 + x);
   696     065B  0872               	movf	lcd_setCursor@x,w
   697     065C  3E80               	addlw	128
   698     065D  120A  118A  2624  120A  118A  	fcall	_lcd_command
   699                           
   700                           ;./lcd_8bit.h: 78:         } else if (y == 1)
   701     0662  2E6F               	goto	l57
   702     0663                     l1241:
   703     0663  0371               	decf	lcd_setCursor@y,w
   704     0664  1D03               	btfss	3,2
   705     0665  2E67               	goto	u1361
   706     0666  2E68               	goto	u1360
   707     0667                     u1361:
   708     0667  2E6F               	goto	l57
   709     0668                     u1360:
   710     0668                     l1243:
   711                           
   712                           ;./lcd_8bit.h: 79:         {;./lcd_8bit.h: 80:             lcd_command(0xC0 + x);
   713     0668  0872               	movf	lcd_setCursor@x,w
   714     0669  3EC0               	addlw	192
   715     066A  120A  118A  2624  120A  118A  	fcall	_lcd_command
   716     066F                     l57:
   717     066F  0008               	return
   718     0670                     __end_of_lcd_setCursor:
   719                           
   720                           	psect	text3
   721     0774                     __ptext3:	
   722 ;; *************** function _lcd_number *****************
   723 ;; Defined at:
   724 ;;		line 48 in file "./lcd_8bit.h"
   725 ;; Parameters:    Size  Location     Type
   726 ;;  num             2    7[COMMON] unsigned int 
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  a              32    0[BANK0 ] int [16]
   729 ;;  count           2   34[BANK0 ] int 
   730 ;;  temp            2   32[BANK0 ] unsigned int 
   731 ;; Return value:  Size  Location     Type
   732 ;;                  1    wreg      void 
   733 ;; Registers used:
   734 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   740 ;;      Params:         2       0       0       0       0
   741 ;;      Locals:         0      36       0       0       0
   742 ;;      Temps:          1       0       0       0       0
   743 ;;      Totals:         3      36       0       0       0
   744 ;;Total ram usage:       39 bytes
   745 ;; Hardware stack levels used: 1
   746 ;; Hardware stack levels required when called: 1
   747 ;; This function calls:
   748 ;;		___lwdiv
   749 ;;		___lwmod
   750 ;;		_lcd_data
   751 ;; This function is called by:
   752 ;;		_main
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756     0774                     _lcd_number:	
   757                           ;psect for function _lcd_number
   758                           
   759     0774                     l1211:	
   760                           ;incstack = 0
   761                           ; Regs used in _lcd_number: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   762                           
   763                           
   764                           ;./lcd_8bit.h: 49:     if (num < 10)
   765     0774  3000               	movlw	0
   766     0775  0278               	subwf	lcd_number@num+1,w
   767     0776  300A               	movlw	10
   768     0777  1903               	skipnz
   769     0778  0277               	subwf	lcd_number@num,w
   770     0779  1803               	skipnc
   771     077A  2F7C               	goto	u1311
   772     077B  2F7D               	goto	u1310
   773     077C                     u1311:
   774     077C  2F85               	goto	l1215
   775     077D                     u1310:
   776     077D                     l1213:
   777                           
   778                           ;./lcd_8bit.h: 50:     {;./lcd_8bit.h: 51:         lcd_data(num+48);
   779     077D  0877               	movf	lcd_number@num,w
   780     077E  3E30               	addlw	48
   781     077F  120A  118A  2630  120A  118A  	fcall	_lcd_data
   782                           
   783                           ;./lcd_8bit.h: 52:     }
   784     0784  2FEF               	goto	l50
   785     0785                     l1215:
   786                           
   787                           ;./lcd_8bit.h: 54:         unsigned int temp;;./lcd_8bit.h: 55:         int a[16];;./lcd
      +                          _8bit.h: 56:         int count = 0;
   788     0785  1283               	bcf	3,5	;RP0=0, select bank0
   789     0786  1303               	bcf	3,6	;RP1=0, select bank0
   790     0787  01C2               	clrf	lcd_number@count
   791     0788  01C3               	clrf	lcd_number@count+1
   792                           
   793                           ;./lcd_8bit.h: 57:         while (num >= 10) {
   794     0789  2FC1               	goto	l1225
   795     078A                     l1217:
   796                           
   797                           ;./lcd_8bit.h: 58:             temp = num % 10;
   798     078A  300A               	movlw	10
   799     078B  00F0               	movwf	___lwmod@divisor
   800     078C  3000               	movlw	0
   801     078D  00F1               	movwf	___lwmod@divisor+1
   802     078E  0878               	movf	lcd_number@num+1,w
   803     078F  00F3               	movwf	___lwmod@dividend+1
   804     0790  0877               	movf	lcd_number@num,w
   805     0791  00F2               	movwf	___lwmod@dividend
   806     0792  120A  118A  2697  120A  118A  	fcall	___lwmod
   807     0797  0871               	movf	?___lwmod+1,w
   808     0798  1283               	bcf	3,5	;RP0=0, select bank0
   809     0799  1303               	bcf	3,6	;RP1=0, select bank0
   810     079A  00C1               	movwf	lcd_number@temp+1
   811     079B  0870               	movf	?___lwmod,w
   812     079C  00C0               	movwf	lcd_number@temp
   813     079D                     l1219:
   814                           
   815                           ;./lcd_8bit.h: 59:             a[count] = temp;
   816     079D  0842               	movf	lcd_number@count,w
   817     079E  00F9               	movwf	??_lcd_number
   818     079F  0779               	addwf	??_lcd_number,w
   819     07A0  3E20               	addlw	(low (lcd_number@a| 0))& (0+255)
   820     07A1  0084               	movwf	4
   821     07A2  0840               	movf	lcd_number@temp,w
   822     07A3  1383               	bcf	3,7	;select IRP bank0
   823     07A4  0080               	movwf	0
   824     07A5  0A84               	incf	4,f
   825     07A6  0841               	movf	lcd_number@temp+1,w
   826     07A7  0080               	movwf	0
   827     07A8                     l1221:
   828                           
   829                           ;./lcd_8bit.h: 60:             num /= 10;
   830     07A8  300A               	movlw	10
   831     07A9  00F0               	movwf	___lwdiv@divisor
   832     07AA  3000               	movlw	0
   833     07AB  00F1               	movwf	___lwdiv@divisor+1
   834     07AC  0878               	movf	lcd_number@num+1,w
   835     07AD  00F3               	movwf	___lwdiv@dividend+1
   836     07AE  0877               	movf	lcd_number@num,w
   837     07AF  00F2               	movwf	___lwdiv@dividend
   838     07B0  120A  118A  26D1  120A  118A  	fcall	___lwdiv
   839     07B5  0871               	movf	?___lwdiv+1,w
   840     07B6  00F8               	movwf	lcd_number@num+1
   841     07B7  0870               	movf	?___lwdiv,w
   842     07B8  00F7               	movwf	lcd_number@num
   843     07B9                     l1223:
   844                           
   845                           ;./lcd_8bit.h: 61:             count++;
   846     07B9  3001               	movlw	1
   847     07BA  1283               	bcf	3,5	;RP0=0, select bank0
   848     07BB  1303               	bcf	3,6	;RP1=0, select bank0
   849     07BC  07C2               	addwf	lcd_number@count,f
   850     07BD  1803               	skipnc
   851     07BE  0AC3               	incf	lcd_number@count+1,f
   852     07BF  3000               	movlw	0
   853     07C0  07C3               	addwf	lcd_number@count+1,f
   854     07C1                     l1225:
   855                           
   856                           ;./lcd_8bit.h: 57:         while (num >= 10) {
   857     07C1  3000               	movlw	0
   858     07C2  0278               	subwf	lcd_number@num+1,w
   859     07C3  300A               	movlw	10
   860     07C4  1903               	skipnz
   861     07C5  0277               	subwf	lcd_number@num,w
   862     07C6  1803               	skipnc
   863     07C7  2FC9               	goto	u1321
   864     07C8  2FCA               	goto	u1320
   865     07C9                     u1321:
   866     07C9  2F8A               	goto	l1217
   867     07CA                     u1320:
   868     07CA                     l1227:
   869                           
   870                           ;./lcd_8bit.h: 63:         a[count] = num;
   871     07CA  0842               	movf	lcd_number@count,w
   872     07CB  00F9               	movwf	??_lcd_number
   873     07CC  0779               	addwf	??_lcd_number,w
   874     07CD  3E20               	addlw	(low (lcd_number@a| 0))& (0+255)
   875     07CE  0084               	movwf	4
   876     07CF  0877               	movf	lcd_number@num,w
   877     07D0  1383               	bcf	3,7	;select IRP bank0
   878     07D1  0080               	movwf	0
   879     07D2  0A84               	incf	4,f
   880     07D3  0878               	movf	lcd_number@num+1,w
   881     07D4  0080               	movwf	0
   882                           
   883                           ;./lcd_8bit.h: 64:         while (count >= 0) {
   884     07D5  2FEB               	goto	l1233
   885     07D6                     l1229:
   886                           
   887                           ;./lcd_8bit.h: 65:             lcd_data(a[count] + 48);
   888     07D6  0842               	movf	lcd_number@count,w
   889     07D7  00F9               	movwf	??_lcd_number
   890     07D8  0779               	addwf	??_lcd_number,w
   891     07D9  3E20               	addlw	(low (lcd_number@a| 0))& (0+255)
   892     07DA  0084               	movwf	4
   893     07DB  1383               	bcf	3,7	;select IRP bank0
   894     07DC  0800               	movf	0,w
   895     07DD  3E30               	addlw	48
   896     07DE  120A  118A  2630  120A  118A  	fcall	_lcd_data
   897     07E3                     l1231:
   898                           
   899                           ;./lcd_8bit.h: 66:             count--;
   900     07E3  30FF               	movlw	255
   901     07E4  1283               	bcf	3,5	;RP0=0, select bank0
   902     07E5  1303               	bcf	3,6	;RP1=0, select bank0
   903     07E6  07C2               	addwf	lcd_number@count,f
   904     07E7  1803               	skipnc
   905     07E8  0AC3               	incf	lcd_number@count+1,f
   906     07E9  30FF               	movlw	255
   907     07EA  07C3               	addwf	lcd_number@count+1,f
   908     07EB                     l1233:
   909                           
   910                           ;./lcd_8bit.h: 64:         while (count >= 0) {
   911     07EB  1FC3               	btfss	lcd_number@count+1,7
   912     07EC  2FEE               	goto	u1331
   913     07ED  2FEF               	goto	u1330
   914     07EE                     u1331:
   915     07EE  2FD6               	goto	l1229
   916     07EF                     u1330:
   917     07EF                     l50:
   918     07EF  0008               	return
   919     07F0                     __end_of_lcd_number:
   920                           
   921                           	psect	text4
   922     0630                     __ptext4:	
   923 ;; *************** function _lcd_data *****************
   924 ;; Defined at:
   925 ;;		line 25 in file "./lcd_8bit.h"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  Data            1    wreg     unsigned char 
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  Data            1    0[COMMON] unsigned char 
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   939 ;;      Params:         0       0       0       0       0
   940 ;;      Locals:         1       0       0       0       0
   941 ;;      Temps:          0       0       0       0       0
   942 ;;      Totals:         1       0       0       0       0
   943 ;;Total ram usage:        1 bytes
   944 ;; Hardware stack levels used: 1
   945 ;; This function calls:
   946 ;;		Nothing
   947 ;; This function is called by:
   948 ;;		_lcd_string
   949 ;;		_lcd_number
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953     0630                     _lcd_data:	
   954                           ;psect for function _lcd_data
   955                           
   956                           
   957                           ;incstack = 0
   958                           ; Regs used in _lcd_data: [wreg]
   959                           ;lcd_data@Data stored from wreg
   960     0630  00F0               	movwf	lcd_data@Data
   961     0631                     l1145:
   962                           
   963                           ;./lcd_8bit.h: 26:     PORTCbits.RC0 = 1;
   964     0631  1283               	bcf	3,5	;RP0=0, select bank0
   965     0632  1303               	bcf	3,6	;RP1=0, select bank0
   966     0633  1407               	bsf	7,0	;volatile
   967                           
   968                           ;./lcd_8bit.h: 27:     PORTCbits.RC1 = 0;
   969     0634  1087               	bcf	7,1	;volatile
   970                           
   971                           ;./lcd_8bit.h: 28:     PORTCbits.RC2 = 1;
   972     0635  1507               	bsf	7,2	;volatile
   973     0636                     l1147:
   974                           
   975                           ;./lcd_8bit.h: 29:     PORTD = Data;
   976     0636  0870               	movf	lcd_data@Data,w
   977     0637  0088               	movwf	8	;volatile
   978     0638                     l1149:
   979                           
   980                           ;./lcd_8bit.h: 30:     PORTCbits.RC2 = 0;
   981     0638  1107               	bcf	7,2	;volatile
   982     0639                     l1151:
   983                           
   984                           ;./lcd_8bit.h: 31:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000.0)));
   985     0639  2E3A               	nop2	;2 cycle nop
   986     063A  2E3B               	nop2	;2 cycle nop
   987     063B                     l30:
   988     063B  0008               	return
   989     063C                     __end_of_lcd_data:
   990                           
   991                           	psect	text5
   992     0697                     __ptext5:	
   993 ;; *************** function ___lwmod *****************
   994 ;; Defined at:
   995 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\lwmod.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  divisor         2    0[COMMON] unsigned int 
   998 ;;  dividend        2    2[COMMON] unsigned int 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  counter         1    4[COMMON] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  2    0[COMMON] unsigned int 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0, btemp+1
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         4       0       0       0       0
  1011 ;;      Locals:         1       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0
  1013 ;;      Totals:         5       0       0       0       0
  1014 ;;Total ram usage:        5 bytes
  1015 ;; Hardware stack levels used: 1
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_lcd_number
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023     0697                     ___lwmod:	
  1024                           ;psect for function ___lwmod
  1025                           
  1026     0697                     l1179:	
  1027                           ;incstack = 0
  1028                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1029                           
  1030     0697  0870               	movf	___lwmod@divisor,w
  1031     0698  0471               	iorwf	___lwmod@divisor+1,w
  1032     0699  1903               	btfsc	3,2
  1033     069A  2E9C               	goto	u1241
  1034     069B  2E9D               	goto	u1240
  1035     069C                     u1241:
  1036     069C  2ECC               	goto	l1197
  1037     069D                     u1240:
  1038     069D                     l1181:
  1039     069D  01F4               	clrf	___lwmod@counter
  1040     069E  0AF4               	incf	___lwmod@counter,f
  1041     069F  2EAB               	goto	l1187
  1042     06A0                     l1183:
  1043     06A0  3001               	movlw	1
  1044     06A1                     u1255:
  1045     06A1  1003               	clrc
  1046     06A2  0DF0               	rlf	___lwmod@divisor,f
  1047     06A3  0DF1               	rlf	___lwmod@divisor+1,f
  1048     06A4  3EFF               	addlw	-1
  1049     06A5  1D03               	skipz
  1050     06A6  2EA1               	goto	u1255
  1051     06A7                     l1185:
  1052     06A7  3001               	movlw	1
  1053     06A8  00FF               	movwf	btemp+1
  1054     06A9  087F               	movf	btemp+1,w
  1055     06AA  07F4               	addwf	___lwmod@counter,f
  1056     06AB                     l1187:
  1057     06AB  1FF1               	btfss	___lwmod@divisor+1,7
  1058     06AC  2EAE               	goto	u1261
  1059     06AD  2EAF               	goto	u1260
  1060     06AE                     u1261:
  1061     06AE  2EA0               	goto	l1183
  1062     06AF                     u1260:
  1063     06AF                     l1189:
  1064     06AF  0871               	movf	___lwmod@divisor+1,w
  1065     06B0  0273               	subwf	___lwmod@dividend+1,w
  1066     06B1  1D03               	skipz
  1067     06B2  2EB5               	goto	u1275
  1068     06B3  0870               	movf	___lwmod@divisor,w
  1069     06B4  0272               	subwf	___lwmod@dividend,w
  1070     06B5                     u1275:
  1071     06B5  1C03               	skipc
  1072     06B6  2EB8               	goto	u1271
  1073     06B7  2EB9               	goto	u1270
  1074     06B8                     u1271:
  1075     06B8  2EBF               	goto	l1193
  1076     06B9                     u1270:
  1077     06B9                     l1191:
  1078     06B9  0870               	movf	___lwmod@divisor,w
  1079     06BA  02F2               	subwf	___lwmod@dividend,f
  1080     06BB  0871               	movf	___lwmod@divisor+1,w
  1081     06BC  1C03               	skipc
  1082     06BD  03F3               	decf	___lwmod@dividend+1,f
  1083     06BE  02F3               	subwf	___lwmod@dividend+1,f
  1084     06BF                     l1193:
  1085     06BF  3001               	movlw	1
  1086     06C0                     u1285:
  1087     06C0  1003               	clrc
  1088     06C1  0CF1               	rrf	___lwmod@divisor+1,f
  1089     06C2  0CF0               	rrf	___lwmod@divisor,f
  1090     06C3  3EFF               	addlw	-1
  1091     06C4  1D03               	skipz
  1092     06C5  2EC0               	goto	u1285
  1093     06C6                     l1195:
  1094     06C6  3001               	movlw	1
  1095     06C7  02F4               	subwf	___lwmod@counter,f
  1096     06C8  1D03               	btfss	3,2
  1097     06C9  2ECB               	goto	u1291
  1098     06CA  2ECC               	goto	u1290
  1099     06CB                     u1291:
  1100     06CB  2EAF               	goto	l1189
  1101     06CC                     u1290:
  1102     06CC                     l1197:
  1103     06CC  0873               	movf	___lwmod@dividend+1,w
  1104     06CD  00F1               	movwf	?___lwmod+1
  1105     06CE  0872               	movf	___lwmod@dividend,w
  1106     06CF  00F0               	movwf	?___lwmod
  1107     06D0                     l447:
  1108     06D0  0008               	return
  1109     06D1                     __end_of___lwmod:
  1110                           
  1111                           	psect	text6
  1112     06D1                     __ptext6:	
  1113 ;; *************** function ___lwdiv *****************
  1114 ;; Defined at:
  1115 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\lwdiv.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;  divisor         2    0[COMMON] unsigned int 
  1118 ;;  dividend        2    2[COMMON] unsigned int 
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  quotient        2    4[COMMON] unsigned int 
  1121 ;;  counter         1    6[COMMON] unsigned char 
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  2    0[COMMON] unsigned int 
  1124 ;; Registers used:
  1125 ;;		wreg, status,2, status,0, btemp+1
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1131 ;;      Params:         4       0       0       0       0
  1132 ;;      Locals:         3       0       0       0       0
  1133 ;;      Temps:          0       0       0       0       0
  1134 ;;      Totals:         7       0       0       0       0
  1135 ;;Total ram usage:        7 bytes
  1136 ;; Hardware stack levels used: 1
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_lcd_number
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144     06D1                     ___lwdiv:	
  1145                           ;psect for function ___lwdiv
  1146                           
  1147     06D1                     l1153:	
  1148                           ;incstack = 0
  1149                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1150                           
  1151     06D1  01F4               	clrf	___lwdiv@quotient
  1152     06D2  01F5               	clrf	___lwdiv@quotient+1
  1153     06D3                     l1155:
  1154     06D3  0870               	movf	___lwdiv@divisor,w
  1155     06D4  0471               	iorwf	___lwdiv@divisor+1,w
  1156     06D5  1903               	btfsc	3,2
  1157     06D6  2ED8               	goto	u1171
  1158     06D7  2ED9               	goto	u1170
  1159     06D8                     u1171:
  1160     06D8  2F10               	goto	l1175
  1161     06D9                     u1170:
  1162     06D9                     l1157:
  1163     06D9  01F6               	clrf	___lwdiv@counter
  1164     06DA  0AF6               	incf	___lwdiv@counter,f
  1165     06DB  2EE7               	goto	l1163
  1166     06DC                     l1159:
  1167     06DC  3001               	movlw	1
  1168     06DD                     u1185:
  1169     06DD  1003               	clrc
  1170     06DE  0DF0               	rlf	___lwdiv@divisor,f
  1171     06DF  0DF1               	rlf	___lwdiv@divisor+1,f
  1172     06E0  3EFF               	addlw	-1
  1173     06E1  1D03               	skipz
  1174     06E2  2EDD               	goto	u1185
  1175     06E3                     l1161:
  1176     06E3  3001               	movlw	1
  1177     06E4  00FF               	movwf	btemp+1
  1178     06E5  087F               	movf	btemp+1,w
  1179     06E6  07F6               	addwf	___lwdiv@counter,f
  1180     06E7                     l1163:
  1181     06E7  1FF1               	btfss	___lwdiv@divisor+1,7
  1182     06E8  2EEA               	goto	u1191
  1183     06E9  2EEB               	goto	u1190
  1184     06EA                     u1191:
  1185     06EA  2EDC               	goto	l1159
  1186     06EB                     u1190:
  1187     06EB                     l1165:
  1188     06EB  3001               	movlw	1
  1189     06EC                     u1205:
  1190     06EC  1003               	clrc
  1191     06ED  0DF4               	rlf	___lwdiv@quotient,f
  1192     06EE  0DF5               	rlf	___lwdiv@quotient+1,f
  1193     06EF  3EFF               	addlw	-1
  1194     06F0  1D03               	skipz
  1195     06F1  2EEC               	goto	u1205
  1196     06F2  0871               	movf	___lwdiv@divisor+1,w
  1197     06F3  0273               	subwf	___lwdiv@dividend+1,w
  1198     06F4  1D03               	skipz
  1199     06F5  2EF8               	goto	u1215
  1200     06F6  0870               	movf	___lwdiv@divisor,w
  1201     06F7  0272               	subwf	___lwdiv@dividend,w
  1202     06F8                     u1215:
  1203     06F8  1C03               	skipc
  1204     06F9  2EFB               	goto	u1211
  1205     06FA  2EFC               	goto	u1210
  1206     06FB                     u1211:
  1207     06FB  2F03               	goto	l1171
  1208     06FC                     u1210:
  1209     06FC                     l1167:
  1210     06FC  0870               	movf	___lwdiv@divisor,w
  1211     06FD  02F2               	subwf	___lwdiv@dividend,f
  1212     06FE  0871               	movf	___lwdiv@divisor+1,w
  1213     06FF  1C03               	skipc
  1214     0700  03F3               	decf	___lwdiv@dividend+1,f
  1215     0701  02F3               	subwf	___lwdiv@dividend+1,f
  1216     0702                     l1169:
  1217     0702  1474               	bsf	___lwdiv@quotient,0
  1218     0703                     l1171:
  1219     0703  3001               	movlw	1
  1220     0704                     u1225:
  1221     0704  1003               	clrc
  1222     0705  0CF1               	rrf	___lwdiv@divisor+1,f
  1223     0706  0CF0               	rrf	___lwdiv@divisor,f
  1224     0707  3EFF               	addlw	-1
  1225     0708  1D03               	skipz
  1226     0709  2F04               	goto	u1225
  1227     070A                     l1173:
  1228     070A  3001               	movlw	1
  1229     070B  02F6               	subwf	___lwdiv@counter,f
  1230     070C  1D03               	btfss	3,2
  1231     070D  2F0F               	goto	u1231
  1232     070E  2F10               	goto	u1230
  1233     070F                     u1231:
  1234     070F  2EEB               	goto	l1165
  1235     0710                     u1230:
  1236     0710                     l1175:
  1237     0710  0875               	movf	___lwdiv@quotient+1,w
  1238     0711  00F1               	movwf	?___lwdiv+1
  1239     0712  0874               	movf	___lwdiv@quotient,w
  1240     0713  00F0               	movwf	?___lwdiv
  1241     0714                     l437:
  1242     0714  0008               	return
  1243     0715                     __end_of___lwdiv:
  1244                           
  1245                           	psect	text7
  1246     063C                     __ptext7:	
  1247 ;; *************** function _lcd_init *****************
  1248 ;; Defined at:
  1249 ;;		line 34 in file "./lcd_8bit.h"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;		None
  1252 ;; Auto vars:     Size  Location     Type
  1253 ;;		None
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  1    wreg      void 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2, status,0, pclath, cstack
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1263 ;;      Params:         0       0       0       0       0
  1264 ;;      Locals:         0       0       0       0       0
  1265 ;;      Temps:          0       0       0       0       0
  1266 ;;      Totals:         0       0       0       0       0
  1267 ;;Total ram usage:        0 bytes
  1268 ;; Hardware stack levels used: 1
  1269 ;; Hardware stack levels required when called: 1
  1270 ;; This function calls:
  1271 ;;		_lcd_command
  1272 ;; This function is called by:
  1273 ;;		_main
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277     063C                     _lcd_init:	
  1278                           ;psect for function _lcd_init
  1279                           
  1280     063C                     l1201:	
  1281                           ;incstack = 0
  1282                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1283                           
  1284                           
  1285                           ;./lcd_8bit.h: 35:     lcd_command(0x0C);
  1286     063C  300C               	movlw	12
  1287     063D  120A  118A  2624  120A  118A  	fcall	_lcd_command
  1288                           
  1289                           ;./lcd_8bit.h: 36:     lcd_command(0x38);
  1290     0642  3038               	movlw	56
  1291     0643  120A  118A  2624  120A  118A  	fcall	_lcd_command
  1292                           
  1293                           ;./lcd_8bit.h: 37:     lcd_command(0x80);
  1294     0648  3080               	movlw	128
  1295     0649  120A  118A  2624  120A  118A  	fcall	_lcd_command
  1296     064E                     l33:
  1297     064E  0008               	return
  1298     064F                     __end_of_lcd_init:
  1299                           
  1300                           	psect	text8
  1301     0624                     __ptext8:	
  1302 ;; *************** function _lcd_command *****************
  1303 ;; Defined at:
  1304 ;;		line 16 in file "./lcd_8bit.h"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  cmd             1    wreg     unsigned char 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  cmd             1    0[COMMON] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1318 ;;      Params:         0       0       0       0       0
  1319 ;;      Locals:         1       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0
  1321 ;;      Totals:         1       0       0       0       0
  1322 ;;Total ram usage:        1 bytes
  1323 ;; Hardware stack levels used: 1
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_lcd_init
  1328 ;;		_lcd_setCursor
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332     0624                     _lcd_command:	
  1333                           ;psect for function _lcd_command
  1334                           
  1335                           
  1336                           ;incstack = 0
  1337                           ; Regs used in _lcd_command: [wreg]
  1338                           ;lcd_command@cmd stored from wreg
  1339     0624  00F0               	movwf	lcd_command@cmd
  1340     0625                     l1137:
  1341                           
  1342                           ;./lcd_8bit.h: 17:     PORTCbits.RC0 = 0x00;
  1343     0625  1283               	bcf	3,5	;RP0=0, select bank0
  1344     0626  1303               	bcf	3,6	;RP1=0, select bank0
  1345     0627  1007               	bcf	7,0	;volatile
  1346                           
  1347                           ;./lcd_8bit.h: 18:     PORTCbits.RC1 = 0x00;
  1348     0628  1087               	bcf	7,1	;volatile
  1349                           
  1350                           ;./lcd_8bit.h: 19:     PORTCbits.RC2 = 0x01;
  1351     0629  1507               	bsf	7,2	;volatile
  1352     062A                     l1139:
  1353                           
  1354                           ;./lcd_8bit.h: 20:     PORTD = cmd;
  1355     062A  0870               	movf	lcd_command@cmd,w
  1356     062B  0088               	movwf	8	;volatile
  1357     062C                     l1141:
  1358                           
  1359                           ;./lcd_8bit.h: 21:     PORTCbits.RC2 = 0;
  1360     062C  1107               	bcf	7,2	;volatile
  1361     062D                     l1143:
  1362                           
  1363                           ;./lcd_8bit.h: 22:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000.0)));
  1364     062D  2E2E               	nop2	;2 cycle nop
  1365     062E  2E2F               	nop2	;2 cycle nop
  1366     062F                     l27:
  1367     062F  0008               	return
  1368     0630                     __end_of_lcd_command:
  1369     007E                     btemp	set	126	;btemp
  1370     007E                     wtemp0	set	126
  1371                           
  1372                           	psect	config
  1373                           
  1374                           ;Config register CONFIG @ 0x2007
  1375                           ;	Oscillator Selection bits
  1376                           ;	FOSC = HS, HS oscillator
  1377                           ;	Watchdog Timer Enable bit
  1378                           ;	WDTE = OFF, WDT disabled
  1379                           ;	Power-up Timer Enable bit
  1380                           ;	PWRTE = OFF, PWRT disabled
  1381                           ;	Brown-out Reset Enable bit
  1382                           ;	BOREN = OFF, BOR disabled
  1383                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1384                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1385                           ;	Data EEPROM Memory Code Protection bit
  1386                           ;	CPD = OFF, Data EEPROM code protection off
  1387                           ;	Flash Program Memory Write Enable bits
  1388                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1389                           ;	In-Circuit Debugger Mode bit
  1390                           ;	DEBUG = 0x1, unprogrammed default
  1391                           ;	Flash Program Memory Code Protection bit
  1392                           ;	CP = OFF, Code protection off
  1393     2007                     	org	8199
  1394     2007  3F3A               	dw	16186

Data Sizes:
    Strings     7
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     36      36
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@string_data	PTR unsigned char  size(1) Largest target is 7
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_lcd_number
    _lcd_string->_lcd_data
    _lcd_setCursor->_lcd_command
    _lcd_number->___lwdiv
    _lcd_init->_lcd_command

Critical Paths under _main in BANK0

    _main->_lcd_number

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1713
                                             10 COMMON     2     2      0
                           _lcd_init
                         _lcd_number
                      _lcd_setCursor
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           3     3      0     146
                                              1 COMMON     3     3      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (1) _lcd_setCursor                                        2     1      1     360
                                              1 COMMON     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_number                                          39    37      2    1117
                                              7 COMMON     3     1      2
                                              0 BANK0     36    36      0
                            ___lwdiv
                            ___lwmod
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      22
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_init
     _lcd_command
   _lcd_number
     ___lwdiv
     ___lwmod
     _lcd_data
   _lcd_setCursor
     _lcd_command
   _lcd_string
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      24       5       45.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      32      12        0.0%
ABS                  0      0      32       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat Jun 08 16:03:22 2024

           lcd_data@Data 0070                        pc 0002           ?_lcd_setCursor 0071  
                     l30 063B                       l33 064E                       l50 07EF  
                     l27 062F                       l39 0696                       l64 0763  
                     l57 066F                       l66 0769                       l67 076F  
                     fsr 0004                      l437 0714                      l447 06D0  
                    fsr0 0004                      indf 0000                     l1201 063C  
                   l1211 0774                     l1203 0671                     l1141 062C  
                   l1221 07A8                     l1213 077D                     l1205 0676  
                   l1143 062D                     l1151 0639                     l1231 07E3  
                   l1223 07B9                     l1215 0785                     l1207 0683  
                   l1137 0625                     l1161 06E3                     l1153 06D1  
                   l1145 0631                     l1233 07EB                     l1217 078A  
                   l1225 07C1                     l1241 0663                     l1209 0689  
                   l1139 062A                     l1171 0703                     l1163 06E7  
                   l1155 06D3                     l1147 0636                     l1227 07CA  
                   l1219 079D                     l1243 0668                     l1235 0650  
                   l1251 0726                     l1173 070A                     l1165 06EB  
                   l1157 06D9                     l1181 069D                     l1149 0638  
                   l1229 07D6                     l1237 0656                     l1261 0747  
                   l1253 072B                     l1245 0715                     l1167 06FC  
                   l1159 06DC                     l1175 0710                     l1191 06B9  
                   l1183 06A0                     l1239 065B                     l1263 074D  
                   l1255 0732                     l1247 071D                     l1169 0702  
                   l1193 06BF                     l1185 06A7                     l1265 0753  
                   l1257 0738                     l1249 0720                     l1195 06C6  
                   l1187 06AB                     l1179 0697                     l1267 075A  
                   l1259 073F                     l1189 06AF                     l1197 06CC  
                   l1269 076D                     STR_1 0009                     u1210 06FC  
                   u1211 06FB                     u1300 0696                     u1205 06EC  
                   u1301 0695                     u1230 0710                     u1310 077D  
                   u1231 070F                     u1215 06F8                     u1311 077C  
                   u1240 069D                     u1320 07CA                     u1225 0704  
                   u1241 069C                     u1321 07C9                     u1170 06D9  
                   u1330 07EF                     u1171 06D8                     u1331 07EE  
                   u1260 06AF                     u1340 0656                     u1261 06AE  
                   u1341 0655                     u1190 06EB                     u1270 06B9  
                   u1350 065B                     u1191 06EA                     u1271 06B8  
                   u1255 06A1                     u1351 065A                     u1360 0668  
                   u1185 06DD                     u1361 0667                     u1290 06CC  
                   u1370 074D                     u1291 06CB                     u1275 06B5  
                   u1371 074C                     u1380 0769                     u1285 06C0  
                   u1381 0768                     u1390 076D                     u1391 076C  
            lcd_number@a 0020                     _main 0715                     btemp 007E  
                   start 0000              lcd_string@i 0072                    ?_main 0070  
        __end_of___lwdiv 0715          __end_of___lwmod 06D1                    _PORTA 0005  
                  _PORTD 0008                    _TRISA 0085                    _TRISC 0087  
                  _TRISD 0088                    pclath 000A               __XTAL_FREQ 007C  
                  status 0003                    wtemp0 007E          __initialization 07F0  
        ??_lcd_setCursor 0072             __end_of_main 0774                   ??_main 007A  
         lcd_command@cmd 0070            lcd_number@num 0077         __end_of_lcd_data 063C  
       __end_of_lcd_init 064F                ??___lwdiv 0074                ??___lwmod 0074  
           __pdataCOMMON 007C  __end_of__initialization 07FC           __pcstackCOMMON 0070  
         lcd_setCursor@x 0072           lcd_setCursor@y 0071               __pmaintext 0715  
             _lcd_number 0774                ?_lcd_data 0070               _lcd_string 0670  
              ?_lcd_init 0070               __stringtab 0003           lcd_number@temp 0040  
                ___lwdiv 06D1                  ___lwmod 0697                  __ptext1 0670  
                __ptext2 064F                  __ptext3 0774                  __ptext4 0630  
                __ptext5 0697                  __ptext6 06D1                  __ptext7 063C  
                __ptext8 0624               ??_lcd_data 0070               ??_lcd_init 0071  
   end_of_initialization 07FC    lcd_string@string_data 0071    __end_of_lcd_setCursor 0670  
              _PORTAbits 0005                _PORTBbits 0006                _PORTCbits 0007  
              _TRISAbits 0085                _TRISBbits 0086              ?_lcd_number 0077  
            ?_lcd_string 0070            ??_lcd_command 0070            __pidataCOMMON 0622  
    start_initialization 07F0      __end_of_lcd_command 0630                ___latbits 0002  
          __pcstackBANK0 0020         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
               ?___lwmod 0070                __pstrings 0003         ___lwdiv@quotient 0074  
            _lcd_command 0624              __stringbase 0008          lcd_number@count 0042  
              main@count 007A             ??_lcd_number 0079             ??_lcd_string 0071  
     __end_of_lcd_number 07F0       __end_of_lcd_string 0697       __end_of__stringtab 0009  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0076                 _lcd_data 0630  
               _lcd_init 063C         ___lwmod@dividend 0072                stringcode 0003  
          _lcd_setCursor 064F          ___lwmod@divisor 0070          ___lwmod@counter 0074  
               stringdir 0003                 stringtab 0003             ?_lcd_command 0070  
