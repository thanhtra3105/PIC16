

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Apr 30 14:49:53 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21     0000                     
    22                           ; Generated 12/10/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56     0000                     	;# 
    57     0001                     	;# 
    58     0002                     	;# 
    59     0003                     	;# 
    60     0004                     	;# 
    61     0005                     	;# 
    62     0006                     	;# 
    63     0007                     	;# 
    64     0008                     	;# 
    65     0009                     	;# 
    66     000A                     	;# 
    67     000B                     	;# 
    68     000C                     	;# 
    69     000D                     	;# 
    70     000E                     	;# 
    71     000E                     	;# 
    72     000F                     	;# 
    73     0010                     	;# 
    74     0011                     	;# 
    75     0012                     	;# 
    76     0013                     	;# 
    77     0014                     	;# 
    78     0015                     	;# 
    79     0015                     	;# 
    80     0016                     	;# 
    81     0017                     	;# 
    82     0018                     	;# 
    83     0019                     	;# 
    84     001A                     	;# 
    85     001B                     	;# 
    86     001B                     	;# 
    87     001C                     	;# 
    88     001D                     	;# 
    89     001E                     	;# 
    90     001F                     	;# 
    91     0081                     	;# 
    92     0085                     	;# 
    93     0086                     	;# 
    94     0087                     	;# 
    95     0088                     	;# 
    96     0089                     	;# 
    97     008C                     	;# 
    98     008D                     	;# 
    99     008E                     	;# 
   100     0091                     	;# 
   101     0092                     	;# 
   102     0093                     	;# 
   103     0094                     	;# 
   104     0098                     	;# 
   105     0099                     	;# 
   106     009C                     	;# 
   107     009D                     	;# 
   108     009E                     	;# 
   109     009F                     	;# 
   110     010C                     	;# 
   111     010D                     	;# 
   112     010E                     	;# 
   113     010F                     	;# 
   114     018C                     	;# 
   115     018D                     	;# 
   116     0000                     	;# 
   117     0001                     	;# 
   118     0002                     	;# 
   119     0003                     	;# 
   120     0004                     	;# 
   121     0005                     	;# 
   122     0006                     	;# 
   123     0007                     	;# 
   124     0008                     	;# 
   125     0009                     	;# 
   126     000A                     	;# 
   127     000B                     	;# 
   128     000C                     	;# 
   129     000D                     	;# 
   130     000E                     	;# 
   131     000E                     	;# 
   132     000F                     	;# 
   133     0010                     	;# 
   134     0011                     	;# 
   135     0012                     	;# 
   136     0013                     	;# 
   137     0014                     	;# 
   138     0015                     	;# 
   139     0015                     	;# 
   140     0016                     	;# 
   141     0017                     	;# 
   142     0018                     	;# 
   143     0019                     	;# 
   144     001A                     	;# 
   145     001B                     	;# 
   146     001B                     	;# 
   147     001C                     	;# 
   148     001D                     	;# 
   149     001E                     	;# 
   150     001F                     	;# 
   151     0081                     	;# 
   152     0085                     	;# 
   153     0086                     	;# 
   154     0087                     	;# 
   155     0088                     	;# 
   156     0089                     	;# 
   157     008C                     	;# 
   158     008D                     	;# 
   159     008E                     	;# 
   160     0091                     	;# 
   161     0092                     	;# 
   162     0093                     	;# 
   163     0094                     	;# 
   164     0098                     	;# 
   165     0099                     	;# 
   166     009C                     	;# 
   167     009D                     	;# 
   168     009E                     	;# 
   169     009F                     	;# 
   170     010C                     	;# 
   171     010D                     	;# 
   172     010E                     	;# 
   173     010F                     	;# 
   174     018C                     	;# 
   175     018D                     	;# 
   176                           
   177                           	psect	idataCOMMON
   178     061C                     __pidataCOMMON:
   179                           
   180                           ;initializer for __XTAL_FREQ
   181     061C  3440               	retlw	64
   182     061D  3442               	retlw	66
   183     0005                     _PORTAbits	set	5
   184     0006                     _PORTBbits	set	6
   185     0005                     _PORTA	set	5
   186     0008                     _PORTD	set	8
   187     0007                     _PORTCbits	set	7
   188     0085                     _TRISAbits	set	133
   189     0086                     _TRISBbits	set	134
   190     0088                     _TRISD	set	136
   191     0087                     _TRISC	set	135
   192     0085                     _TRISA	set	133
   193                           
   194                           	psect	strings
   195     0003                     __pstrings:
   196     0003                     stringtab:
   197     0003                     __stringtab:
   198     0003                     stringcode:	
   199                           ;	String table - string pointers are 1 byte each
   200                           
   201     0003                     stringdir:
   202     0003  3000               	movlw	high stringdir
   203     0004  008A               	movwf	10
   204     0005  0804               	movf	4,w
   205     0006  0A84               	incf	4,f
   206     0007  0782               	addwf	2,f
   207     0008                     __stringbase:
   208     0008  3400               	retlw	0
   209     0009                     __end_of__stringtab:
   210     0009                     STR_1:
   211     0009  3463               	retlw	99	;'c'
   212     000A  346F               	retlw	111	;'o'
   213     000B  3475               	retlw	117	;'u'
   214     000C  346E               	retlw	110	;'n'
   215     000D  3474               	retlw	116	;'t'
   216     000E  343D               	retlw	61	;'='
   217     000F  3400               	retlw	0
   218                           
   219                           	psect	cinit
   220     07F0                     start_initialization:	
   221                           ; #config settings
   222                           
   223     07F0                     __initialization:
   224                           
   225                           ; Initialize objects allocated to COMMON
   226     07F0  120A  118A  261C  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   227     07F5  00FC               	movwf	__pdataCOMMON& (0+127)
   228     07F6  120A  118A  261D  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   229     07FB  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   230     07FC                     end_of_initialization:	
   231                           ;End of C runtime variable initialization code
   232                           
   233     07FC                     __end_of__initialization:
   234     07FC  0183               	clrf	3
   235     07FD  120A  118A  2F0F   	ljmp	_main	;jump to C main() function
   236                           
   237                           	psect	dataCOMMON
   238     007C                     __pdataCOMMON:
   239     007C                     __XTAL_FREQ:
   240     007C                     	ds	2
   241                           
   242                           	psect	cstackCOMMON
   243     0070                     __pcstackCOMMON:
   244     0070                     ?_lcd_command:
   245     0070                     ??_lcd_command:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?_lcd_data:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ??_lcd_data:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ?_lcd_init:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ?_lcd_string:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     ?_main:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ?___lwdiv:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     ?___lwmod:	
   267                           ; 2 bytes @ 0x0
   268                           
   269     0070                     lcd_command@cmd:	
   270                           ; 2 bytes @ 0x0
   271                           
   272     0070                     lcd_data@Data:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ___lwdiv@divisor:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ___lwmod@divisor:	
   279                           ; 2 bytes @ 0x0
   280                           
   281                           
   282                           ; 2 bytes @ 0x0
   283     0070                     	ds	1
   284     0071                     ??_lcd_init:
   285     0071                     ??_lcd_string:	
   286                           ; 1 bytes @ 0x1
   287                           
   288     0071                     ?_setCursor:	
   289                           ; 1 bytes @ 0x1
   290                           
   291     0071                     lcd_string@string_data:	
   292                           ; 1 bytes @ 0x1
   293                           
   294     0071                     setCursor@y:	
   295                           ; 1 bytes @ 0x1
   296                           
   297                           
   298                           ; 1 bytes @ 0x1
   299     0071                     	ds	1
   300     0072                     ??_setCursor:
   301     0072                     setCursor@x:	
   302                           ; 1 bytes @ 0x2
   303                           
   304     0072                     lcd_string@i:	
   305                           ; 1 bytes @ 0x2
   306                           
   307     0072                     ___lwdiv@dividend:	
   308                           ; 2 bytes @ 0x2
   309                           
   310     0072                     ___lwmod@dividend:	
   311                           ; 2 bytes @ 0x2
   312                           
   313                           
   314                           ; 2 bytes @ 0x2
   315     0072                     	ds	2
   316     0074                     ??___lwdiv:
   317     0074                     ??___lwmod:	
   318                           ; 1 bytes @ 0x4
   319                           
   320     0074                     ___lwmod@counter:	
   321                           ; 1 bytes @ 0x4
   322                           
   323     0074                     ___lwdiv@quotient:	
   324                           ; 1 bytes @ 0x4
   325                           
   326                           
   327                           ; 2 bytes @ 0x4
   328     0074                     	ds	2
   329     0076                     ___lwdiv@counter:
   330                           
   331                           ; 1 bytes @ 0x6
   332     0076                     	ds	1
   333     0077                     ?_lcd_number:
   334     0077                     lcd_number@num:	
   335                           ; 1 bytes @ 0x7
   336                           
   337                           
   338                           ; 2 bytes @ 0x7
   339     0077                     	ds	2
   340     0079                     ??_lcd_number:
   341                           
   342                           ; 1 bytes @ 0x9
   343     0079                     	ds	1
   344     007A                     ??_main:
   345     007A                     main@count:	
   346                           ; 1 bytes @ 0xA
   347                           
   348                           
   349                           ; 2 bytes @ 0xA
   350     007A                     	ds	2
   351                           
   352                           	psect	cstackBANK0
   353     0020                     __pcstackBANK0:
   354     0020                     lcd_number@a:
   355                           
   356                           ; 32 bytes @ 0x0
   357     0020                     	ds	32
   358     0040                     lcd_number@temp:
   359                           
   360                           ; 2 bytes @ 0x20
   361     0040                     	ds	2
   362     0042                     lcd_number@count:
   363                           
   364                           ; 2 bytes @ 0x22
   365     0042                     	ds	2
   366                           
   367                           	psect	maintext
   368     070F                     __pmaintext:	
   369 ;;
   370 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   371 ;;
   372 ;; *************** function _main *****************
   373 ;; Defined at:
   374 ;;		line 21 in file "newmain.c"
   375 ;; Parameters:    Size  Location     Type
   376 ;;		None
   377 ;; Auto vars:     Size  Location     Type
   378 ;;  count           2   10[COMMON] int 
   379 ;; Return value:  Size  Location     Type
   380 ;;                  1    wreg      void 
   381 ;; Registers used:
   382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : B00/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   388 ;;      Params:         0       0       0       0       0
   389 ;;      Locals:         2       0       0       0       0
   390 ;;      Temps:          0       0       0       0       0
   391 ;;      Totals:         2       0       0       0       0
   392 ;;Total ram usage:        2 bytes
   393 ;; Hardware stack levels required when called: 2
   394 ;; This function calls:
   395 ;;		_lcd_init
   396 ;;		_lcd_number
   397 ;;		_lcd_string
   398 ;;		_setCursor
   399 ;; This function is called by:
   400 ;;		Startup code after reset
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404     070F                     _main:	
   405                           ;psect for function _main
   406                           
   407     070F                     l1243:	
   408                           ;incstack = 0
   409                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   410                           
   411                           
   412                           ;newmain.c: 22:     TRISA = 0;
   413     070F  1683               	bsf	3,5	;RP0=1, select bank1
   414     0710  1303               	bcf	3,6	;RP1=0, select bank1
   415     0711  0185               	clrf	5	;volatile
   416                           
   417                           ;newmain.c: 23:     TRISC = 0;
   418     0712  0187               	clrf	7	;volatile
   419                           
   420                           ;newmain.c: 24:     TRISD = 0;
   421     0713  0188               	clrf	8	;volatile
   422                           
   423                           ;newmain.c: 25:     PORTD = 0;
   424     0714  1283               	bcf	3,5	;RP0=0, select bank0
   425     0715  1303               	bcf	3,6	;RP1=0, select bank0
   426     0716  0188               	clrf	8	;volatile
   427     0717                     l1245:
   428                           
   429                           ;newmain.c: 27:     TRISBbits.TRISB0 = 1;
   430     0717  1683               	bsf	3,5	;RP0=1, select bank1
   431     0718  1303               	bcf	3,6	;RP1=0, select bank1
   432     0719  1406               	bsf	6,0	;volatile
   433     071A                     l1247:
   434                           
   435                           ;newmain.c: 28:     TRISAbits.TRISA1 = 0;
   436     071A  1085               	bcf	5,1	;volatile
   437                           
   438                           ;newmain.c: 29:     PORTA = 0;
   439     071B  1283               	bcf	3,5	;RP0=0, select bank0
   440     071C  1303               	bcf	3,6	;RP1=0, select bank0
   441     071D  0185               	clrf	5	;volatile
   442                           
   443                           ;newmain.c: 30:     int count = 0;
   444     071E  01FA               	clrf	main@count
   445     071F  01FB               	clrf	main@count+1
   446     0720                     l1249:
   447                           
   448                           ;newmain.c: 31:     lcd_init();
   449     0720  120A  118A  2636  120A  118A  	fcall	_lcd_init
   450     0725                     l1251:
   451                           
   452                           ;newmain.c: 32:     setCursor(0, 0);
   453     0725  01F1               	clrf	setCursor@y
   454     0726  3000               	movlw	0
   455     0727  120A  118A  2649  120A  118A  	fcall	_setCursor
   456     072C                     l1253:
   457                           
   458                           ;newmain.c: 33:     lcd_string("count=");
   459     072C  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   460     072D  120A  118A  266A  120A  118A  	fcall	_lcd_string
   461     0732                     l1255:
   462                           
   463                           ;newmain.c: 34:     setCursor(6, 0);
   464     0732  01F1               	clrf	setCursor@y
   465     0733  3006               	movlw	6
   466     0734  120A  118A  2649  120A  118A  	fcall	_setCursor
   467     0739                     l1257:
   468                           
   469                           ;newmain.c: 35:     lcd_number(count);
   470     0739  3000               	movlw	0
   471     073A  00F7               	movwf	lcd_number@num
   472     073B  00F8               	movwf	lcd_number@num+1
   473     073C  120A  118A  2774  120A  118A  	fcall	_lcd_number
   474     0741                     l1259:
   475                           
   476                           ;newmain.c: 38:         if (PORTBbits.RB0 == 0) {
   477     0741  1283               	bcf	3,5	;RP0=0, select bank0
   478     0742  1303               	bcf	3,6	;RP1=0, select bank0
   479     0743  1806               	btfsc	6,0	;volatile
   480     0744  2F46               	goto	u1381
   481     0745  2F47               	goto	u1380
   482     0746                     u1381:
   483     0746  2F41               	goto	l1259
   484     0747                     u1380:
   485     0747                     l1261:
   486                           
   487                           ;newmain.c: 39:             count++;
   488     0747  3001               	movlw	1
   489     0748  07FA               	addwf	main@count,f
   490     0749  1803               	skipnc
   491     074A  0AFB               	incf	main@count+1,f
   492     074B  3000               	movlw	0
   493     074C  07FB               	addwf	main@count+1,f
   494     074D                     l1263:
   495                           
   496                           ;newmain.c: 41:             setCursor(6, 0);
   497     074D  01F1               	clrf	setCursor@y
   498     074E  3006               	movlw	6
   499     074F  120A  118A  2649  120A  118A  	fcall	_setCursor
   500     0754                     l1265:
   501                           
   502                           ;newmain.c: 42:             lcd_number(count);
   503     0754  087B               	movf	main@count+1,w
   504     0755  00F8               	movwf	lcd_number@num+1
   505     0756  087A               	movf	main@count,w
   506     0757  00F7               	movwf	lcd_number@num
   507     0758  120A  118A  2774  120A  118A  	fcall	_lcd_number
   508     075D                     l1267:
   509                           
   510                           ;newmain.c: 43:             PORTAbits.RA1 = ~PORTAbits.RA1;
   511     075D  1003               	clrc
   512     075E  1283               	bcf	3,5	;RP0=0, select bank0
   513     075F  1303               	bcf	3,6	;RP1=0, select bank0
   514     0760  1C85               	btfss	5,1	;volatile
   515     0761  1403               	setc
   516     0762  1803               	btfsc	3,0
   517     0763  2F65               	goto	u1391
   518     0764  2F69               	goto	u1390
   519     0765                     u1391:
   520     0765  1283               	bcf	3,5	;RP0=0, select bank0
   521     0766  1303               	bcf	3,6	;RP1=0, select bank0
   522     0767  1485               	bsf	5,1	;volatile
   523     0768  2F6C               	goto	u1404
   524     0769                     u1390:
   525     0769  1283               	bcf	3,5	;RP0=0, select bank0
   526     076A  1303               	bcf	3,6	;RP1=0, select bank0
   527     076B  1085               	bcf	5,1	;volatile
   528     076C                     u1404:
   529     076C                     l64:	
   530                           ;newmain.c: 44:             while(PORTBbits.RB0 == 0);
   531                           
   532     076C  1C06               	btfss	6,0	;volatile
   533     076D  2F6F               	goto	u1411
   534     076E  2F70               	goto	u1410
   535     076F                     u1411:
   536     076F  2F6C               	goto	l64
   537     0770                     u1410:
   538     0770  2F41               	goto	l1259
   539     0771  120A  118A  2800   	ljmp	start
   540     0774                     __end_of_main:
   541                           
   542                           	psect	text1
   543     0649                     __ptext1:	
   544 ;; *************** function _setCursor *****************
   545 ;; Defined at:
   546 ;;		line 97 in file "./lcd_8bit.h"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  x               1    wreg     unsigned char 
   549 ;;  y               1    1[COMMON] unsigned char 
   550 ;; Auto vars:     Size  Location     Type
   551 ;;  x               1    2[COMMON] unsigned char 
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, status,2, status,0, pclath, cstack
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   561 ;;      Params:         1       0       0       0       0
   562 ;;      Locals:         1       0       0       0       0
   563 ;;      Temps:          0       0       0       0       0
   564 ;;      Totals:         2       0       0       0       0
   565 ;;Total ram usage:        2 bytes
   566 ;; Hardware stack levels used: 1
   567 ;; Hardware stack levels required when called: 1
   568 ;; This function calls:
   569 ;;		_lcd_command
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575     0649                     _setCursor:	
   576                           ;psect for function _setCursor
   577                           
   578                           
   579                           ;incstack = 0
   580                           ; Regs used in _setCursor: [wreg+status,2+status,0+pclath+cstack]
   581                           ;setCursor@x stored from wreg
   582     0649  00F2               	movwf	setCursor@x
   583     064A                     l1233:
   584                           
   585                           ;./lcd_8bit.h: 97: void setCursor(unsigned char x, unsigned char y);./lcd_8bit.h: 98: {;
      +                          ./lcd_8bit.h: 99:     if (x >= 0 && x < 16) {
   586     064A  3010               	movlw	16
   587     064B  0272               	subwf	setCursor@x,w
   588     064C  1803               	skipnc
   589     064D  2E4F               	goto	u1351
   590     064E  2E50               	goto	u1350
   591     064F                     u1351:
   592     064F  2E69               	goto	l57
   593     0650                     u1350:
   594     0650                     l1235:
   595                           
   596                           ;./lcd_8bit.h: 100:         if (y == 0)
   597     0650  0871               	movf	setCursor@y,w
   598     0651  1D03               	btfss	3,2
   599     0652  2E54               	goto	u1361
   600     0653  2E55               	goto	u1360
   601     0654                     u1361:
   602     0654  2E5D               	goto	l1239
   603     0655                     u1360:
   604     0655                     l1237:
   605                           
   606                           ;./lcd_8bit.h: 101:         {;./lcd_8bit.h: 102:             lcd_command(0x80 + x);
   607     0655  0872               	movf	setCursor@x,w
   608     0656  3E80               	addlw	128
   609     0657  120A  118A  261E  120A  118A  	fcall	_lcd_command
   610                           
   611                           ;./lcd_8bit.h: 104:         } else if (y == 1)
   612     065C  2E69               	goto	l57
   613     065D                     l1239:
   614     065D  0371               	decf	setCursor@y,w
   615     065E  1D03               	btfss	3,2
   616     065F  2E61               	goto	u1371
   617     0660  2E62               	goto	u1370
   618     0661                     u1371:
   619     0661  2E69               	goto	l57
   620     0662                     u1370:
   621     0662                     l1241:
   622                           
   623                           ;./lcd_8bit.h: 105:         {;./lcd_8bit.h: 106:             lcd_command(0xC0 + x);
   624     0662  0872               	movf	setCursor@x,w
   625     0663  3EC0               	addlw	192
   626     0664  120A  118A  261E  120A  118A  	fcall	_lcd_command
   627     0669                     l57:
   628     0669  0008               	return
   629     066A                     __end_of_setCursor:
   630                           
   631                           	psect	text2
   632     066A                     __ptext2:	
   633 ;; *************** function _lcd_string *****************
   634 ;; Defined at:
   635 ;;		line 67 in file "./lcd_8bit.h"
   636 ;; Parameters:    Size  Location     Type
   637 ;;  string_data     1    wreg     PTR unsigned char 
   638 ;;		 -> STR_1(7), 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;  string_data     1    1[COMMON] PTR unsigned char 
   641 ;;		 -> STR_1(7), 
   642 ;;  i               2    2[COMMON] int 
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   652 ;;      Params:         0       0       0       0       0
   653 ;;      Locals:         3       0       0       0       0
   654 ;;      Temps:          0       0       0       0       0
   655 ;;      Totals:         3       0       0       0       0
   656 ;;Total ram usage:        3 bytes
   657 ;; Hardware stack levels used: 1
   658 ;; Hardware stack levels required when called: 1
   659 ;; This function calls:
   660 ;;		_lcd_data
   661 ;; This function is called by:
   662 ;;		_main
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666     066A                     _lcd_string:	
   667                           ;psect for function _lcd_string
   668                           
   669                           
   670                           ;incstack = 0
   671                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   672                           ;lcd_string@string_data stored from wreg
   673     066A  00F1               	movwf	lcd_string@string_data
   674     066B                     l1201:
   675                           
   676                           ;./lcd_8bit.h: 68:     int i = 0;
   677     066B  01F2               	clrf	lcd_string@i
   678     066C  01F3               	clrf	lcd_string@i+1
   679                           
   680                           ;./lcd_8bit.h: 69:     for (i = 0; string_data[i] != 0; i++) {
   681     066D  01F2               	clrf	lcd_string@i
   682     066E  01F3               	clrf	lcd_string@i+1
   683     066F  2E83               	goto	l1207
   684     0670                     l1203:
   685                           
   686                           ;./lcd_8bit.h: 70:         lcd_data(string_data[i]);
   687     0670  0872               	movf	lcd_string@i,w
   688     0671  0771               	addwf	lcd_string@string_data,w
   689     0672  0084               	movwf	4
   690     0673  120A  118A  2003  120A  118A  	fcall	stringdir
   691     0678  120A  118A  262A  120A  118A  	fcall	_lcd_data
   692     067D                     l1205:
   693                           
   694                           ;./lcd_8bit.h: 71:     }
   695     067D  3001               	movlw	1
   696     067E  07F2               	addwf	lcd_string@i,f
   697     067F  1803               	skipnc
   698     0680  0AF3               	incf	lcd_string@i+1,f
   699     0681  3000               	movlw	0
   700     0682  07F3               	addwf	lcd_string@i+1,f
   701     0683                     l1207:
   702     0683  0872               	movf	lcd_string@i,w
   703     0684  0771               	addwf	lcd_string@string_data,w
   704     0685  0084               	movwf	4
   705     0686  120A  118A  2003  120A  118A  	fcall	stringdir
   706     068B  3A00               	xorlw	0
   707     068C  1D03               	skipz
   708     068D  2E8F               	goto	u1311
   709     068E  2E90               	goto	u1310
   710     068F                     u1311:
   711     068F  2E70               	goto	l1203
   712     0690                     u1310:
   713     0690                     l39:
   714     0690  0008               	return
   715     0691                     __end_of_lcd_string:
   716                           
   717                           	psect	text3
   718     0774                     __ptext3:	
   719 ;; *************** function _lcd_number *****************
   720 ;; Defined at:
   721 ;;		line 74 in file "./lcd_8bit.h"
   722 ;; Parameters:    Size  Location     Type
   723 ;;  num             2    7[COMMON] unsigned int 
   724 ;; Auto vars:     Size  Location     Type
   725 ;;  a              32    0[BANK0 ] int [16]
   726 ;;  count           2   34[BANK0 ] int 
   727 ;;  temp            2   32[BANK0 ] unsigned int 
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      void 
   730 ;; Registers used:
   731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   737 ;;      Params:         2       0       0       0       0
   738 ;;      Locals:         0      36       0       0       0
   739 ;;      Temps:          1       0       0       0       0
   740 ;;      Totals:         3      36       0       0       0
   741 ;;Total ram usage:       39 bytes
   742 ;; Hardware stack levels used: 1
   743 ;; Hardware stack levels required when called: 1
   744 ;; This function calls:
   745 ;;		___lwdiv
   746 ;;		___lwmod
   747 ;;		_lcd_data
   748 ;; This function is called by:
   749 ;;		_main
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753     0774                     _lcd_number:	
   754                           ;psect for function _lcd_number
   755                           
   756     0774                     l1209:	
   757                           ;incstack = 0
   758                           ; Regs used in _lcd_number: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   759                           
   760                           
   761                           ;./lcd_8bit.h: 75:     if (num < 10)
   762     0774  3000               	movlw	0
   763     0775  0278               	subwf	lcd_number@num+1,w
   764     0776  300A               	movlw	10
   765     0777  1903               	skipnz
   766     0778  0277               	subwf	lcd_number@num,w
   767     0779  1803               	skipnc
   768     077A  2F7C               	goto	u1321
   769     077B  2F7D               	goto	u1320
   770     077C                     u1321:
   771     077C  2F85               	goto	l1213
   772     077D                     u1320:
   773     077D                     l1211:
   774                           
   775                           ;./lcd_8bit.h: 76:     {;./lcd_8bit.h: 77:         lcd_data(num+48);
   776     077D  0877               	movf	lcd_number@num,w
   777     077E  3E30               	addlw	48
   778     077F  120A  118A  262A  120A  118A  	fcall	_lcd_data
   779                           
   780                           ;./lcd_8bit.h: 78:     }
   781     0784  2FEF               	goto	l50
   782     0785                     l1213:
   783                           
   784                           ;./lcd_8bit.h: 80:         unsigned int temp;;./lcd_8bit.h: 81:         int a[16];;./lcd
      +                          _8bit.h: 82:         int count = 0;
   785     0785  1283               	bcf	3,5	;RP0=0, select bank0
   786     0786  1303               	bcf	3,6	;RP1=0, select bank0
   787     0787  01C2               	clrf	lcd_number@count
   788     0788  01C3               	clrf	lcd_number@count+1
   789                           
   790                           ;./lcd_8bit.h: 83:         while (num >= 10) {
   791     0789  2FC1               	goto	l1223
   792     078A                     l1215:
   793                           
   794                           ;./lcd_8bit.h: 84:             temp = num % 10;
   795     078A  300A               	movlw	10
   796     078B  00F0               	movwf	___lwmod@divisor
   797     078C  3000               	movlw	0
   798     078D  00F1               	movwf	___lwmod@divisor+1
   799     078E  0878               	movf	lcd_number@num+1,w
   800     078F  00F3               	movwf	___lwmod@dividend+1
   801     0790  0877               	movf	lcd_number@num,w
   802     0791  00F2               	movwf	___lwmod@dividend
   803     0792  120A  118A  2691  120A  118A  	fcall	___lwmod
   804     0797  0871               	movf	?___lwmod+1,w
   805     0798  1283               	bcf	3,5	;RP0=0, select bank0
   806     0799  1303               	bcf	3,6	;RP1=0, select bank0
   807     079A  00C1               	movwf	lcd_number@temp+1
   808     079B  0870               	movf	?___lwmod,w
   809     079C  00C0               	movwf	lcd_number@temp
   810     079D                     l1217:
   811                           
   812                           ;./lcd_8bit.h: 85:             a[count] = temp;
   813     079D  0842               	movf	lcd_number@count,w
   814     079E  00F9               	movwf	??_lcd_number
   815     079F  0779               	addwf	??_lcd_number,w
   816     07A0  3E20               	addlw	(low (lcd_number@a| 0))& (0+255)
   817     07A1  0084               	movwf	4
   818     07A2  0840               	movf	lcd_number@temp,w
   819     07A3  1383               	bcf	3,7	;select IRP bank0
   820     07A4  0080               	movwf	0
   821     07A5  0A84               	incf	4,f
   822     07A6  0841               	movf	lcd_number@temp+1,w
   823     07A7  0080               	movwf	0
   824     07A8                     l1219:
   825                           
   826                           ;./lcd_8bit.h: 86:             num /= 10;
   827     07A8  300A               	movlw	10
   828     07A9  00F0               	movwf	___lwdiv@divisor
   829     07AA  3000               	movlw	0
   830     07AB  00F1               	movwf	___lwdiv@divisor+1
   831     07AC  0878               	movf	lcd_number@num+1,w
   832     07AD  00F3               	movwf	___lwdiv@dividend+1
   833     07AE  0877               	movf	lcd_number@num,w
   834     07AF  00F2               	movwf	___lwdiv@dividend
   835     07B0  120A  118A  26CB  120A  118A  	fcall	___lwdiv
   836     07B5  0871               	movf	?___lwdiv+1,w
   837     07B6  00F8               	movwf	lcd_number@num+1
   838     07B7  0870               	movf	?___lwdiv,w
   839     07B8  00F7               	movwf	lcd_number@num
   840     07B9                     l1221:
   841                           
   842                           ;./lcd_8bit.h: 87:             count++;
   843     07B9  3001               	movlw	1
   844     07BA  1283               	bcf	3,5	;RP0=0, select bank0
   845     07BB  1303               	bcf	3,6	;RP1=0, select bank0
   846     07BC  07C2               	addwf	lcd_number@count,f
   847     07BD  1803               	skipnc
   848     07BE  0AC3               	incf	lcd_number@count+1,f
   849     07BF  3000               	movlw	0
   850     07C0  07C3               	addwf	lcd_number@count+1,f
   851     07C1                     l1223:
   852                           
   853                           ;./lcd_8bit.h: 83:         while (num >= 10) {
   854     07C1  3000               	movlw	0
   855     07C2  0278               	subwf	lcd_number@num+1,w
   856     07C3  300A               	movlw	10
   857     07C4  1903               	skipnz
   858     07C5  0277               	subwf	lcd_number@num,w
   859     07C6  1803               	skipnc
   860     07C7  2FC9               	goto	u1331
   861     07C8  2FCA               	goto	u1330
   862     07C9                     u1331:
   863     07C9  2F8A               	goto	l1215
   864     07CA                     u1330:
   865     07CA                     l1225:
   866                           
   867                           ;./lcd_8bit.h: 89:         a[count] = num;
   868     07CA  0842               	movf	lcd_number@count,w
   869     07CB  00F9               	movwf	??_lcd_number
   870     07CC  0779               	addwf	??_lcd_number,w
   871     07CD  3E20               	addlw	(low (lcd_number@a| 0))& (0+255)
   872     07CE  0084               	movwf	4
   873     07CF  0877               	movf	lcd_number@num,w
   874     07D0  1383               	bcf	3,7	;select IRP bank0
   875     07D1  0080               	movwf	0
   876     07D2  0A84               	incf	4,f
   877     07D3  0878               	movf	lcd_number@num+1,w
   878     07D4  0080               	movwf	0
   879                           
   880                           ;./lcd_8bit.h: 90:         while (count >= 0) {
   881     07D5  2FEB               	goto	l1231
   882     07D6                     l1227:
   883                           
   884                           ;./lcd_8bit.h: 91:             lcd_data(a[count] + 48);
   885     07D6  0842               	movf	lcd_number@count,w
   886     07D7  00F9               	movwf	??_lcd_number
   887     07D8  0779               	addwf	??_lcd_number,w
   888     07D9  3E20               	addlw	(low (lcd_number@a| 0))& (0+255)
   889     07DA  0084               	movwf	4
   890     07DB  1383               	bcf	3,7	;select IRP bank0
   891     07DC  0800               	movf	0,w
   892     07DD  3E30               	addlw	48
   893     07DE  120A  118A  262A  120A  118A  	fcall	_lcd_data
   894     07E3                     l1229:
   895                           
   896                           ;./lcd_8bit.h: 92:             count--;
   897     07E3  30FF               	movlw	255
   898     07E4  1283               	bcf	3,5	;RP0=0, select bank0
   899     07E5  1303               	bcf	3,6	;RP1=0, select bank0
   900     07E6  07C2               	addwf	lcd_number@count,f
   901     07E7  1803               	skipnc
   902     07E8  0AC3               	incf	lcd_number@count+1,f
   903     07E9  30FF               	movlw	255
   904     07EA  07C3               	addwf	lcd_number@count+1,f
   905     07EB                     l1231:
   906                           
   907                           ;./lcd_8bit.h: 90:         while (count >= 0) {
   908     07EB  1FC3               	btfss	lcd_number@count+1,7
   909     07EC  2FEE               	goto	u1341
   910     07ED  2FEF               	goto	u1340
   911     07EE                     u1341:
   912     07EE  2FD6               	goto	l1227
   913     07EF                     u1340:
   914     07EF                     l50:
   915     07EF  0008               	return
   916     07F0                     __end_of_lcd_number:
   917                           
   918                           	psect	text4
   919     062A                     __ptext4:	
   920 ;; *************** function _lcd_data *****************
   921 ;; Defined at:
   922 ;;		line 51 in file "./lcd_8bit.h"
   923 ;; Parameters:    Size  Location     Type
   924 ;;  Data            1    wreg     unsigned char 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  Data            1    0[COMMON] unsigned char 
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      void 
   929 ;; Registers used:
   930 ;;		wreg
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   936 ;;      Params:         0       0       0       0       0
   937 ;;      Locals:         1       0       0       0       0
   938 ;;      Temps:          0       0       0       0       0
   939 ;;      Totals:         1       0       0       0       0
   940 ;;Total ram usage:        1 bytes
   941 ;; Hardware stack levels used: 1
   942 ;; This function calls:
   943 ;;		Nothing
   944 ;; This function is called by:
   945 ;;		_lcd_string
   946 ;;		_lcd_number
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950     062A                     _lcd_data:	
   951                           ;psect for function _lcd_data
   952                           
   953                           
   954                           ;incstack = 0
   955                           ; Regs used in _lcd_data: [wreg]
   956                           ;lcd_data@Data stored from wreg
   957     062A  00F0               	movwf	lcd_data@Data
   958     062B                     l1143:
   959                           
   960                           ;./lcd_8bit.h: 52:     PORTCbits.RC5 = 1;
   961     062B  1283               	bcf	3,5	;RP0=0, select bank0
   962     062C  1303               	bcf	3,6	;RP1=0, select bank0
   963     062D  1687               	bsf	7,5	;volatile
   964                           
   965                           ;./lcd_8bit.h: 53:     PORTCbits.RC6 = 0;
   966     062E  1307               	bcf	7,6	;volatile
   967                           
   968                           ;./lcd_8bit.h: 54:     PORTCbits.RC7 = 1;
   969     062F  1787               	bsf	7,7	;volatile
   970     0630                     l1145:
   971                           
   972                           ;./lcd_8bit.h: 55:     PORTD = Data;
   973     0630  0870               	movf	lcd_data@Data,w
   974     0631  0088               	movwf	8	;volatile
   975     0632                     l1147:
   976                           
   977                           ;./lcd_8bit.h: 56:     PORTCbits.RC7 = 0;
   978     0632  1387               	bcf	7,7	;volatile
   979     0633                     l1149:
   980                           
   981                           ;./lcd_8bit.h: 57:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000.0)));
   982     0633  2E34               	nop2	;2 cycle nop
   983     0634  2E35               	nop2	;2 cycle nop
   984     0635                     l30:
   985     0635  0008               	return
   986     0636                     __end_of_lcd_data:
   987                           
   988                           	psect	text5
   989     0691                     __ptext5:	
   990 ;; *************** function ___lwmod *****************
   991 ;; Defined at:
   992 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\lwmod.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;  divisor         2    0[COMMON] unsigned int 
   995 ;;  dividend        2    2[COMMON] unsigned int 
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  counter         1    4[COMMON] unsigned char 
   998 ;; Return value:  Size  Location     Type
   999 ;;                  2    0[COMMON] unsigned int 
  1000 ;; Registers used:
  1001 ;;		wreg, status,2, status,0, btemp+1
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1007 ;;      Params:         4       0       0       0       0
  1008 ;;      Locals:         1       0       0       0       0
  1009 ;;      Temps:          0       0       0       0       0
  1010 ;;      Totals:         5       0       0       0       0
  1011 ;;Total ram usage:        5 bytes
  1012 ;; Hardware stack levels used: 1
  1013 ;; This function calls:
  1014 ;;		Nothing
  1015 ;; This function is called by:
  1016 ;;		_lcd_number
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020     0691                     ___lwmod:	
  1021                           ;psect for function ___lwmod
  1022                           
  1023     0691                     l1177:	
  1024                           ;incstack = 0
  1025                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1026                           
  1027     0691  0870               	movf	___lwmod@divisor,w
  1028     0692  0471               	iorwf	___lwmod@divisor+1,w
  1029     0693  1903               	btfsc	3,2
  1030     0694  2E96               	goto	u1251
  1031     0695  2E97               	goto	u1250
  1032     0696                     u1251:
  1033     0696  2EC6               	goto	l1195
  1034     0697                     u1250:
  1035     0697                     l1179:
  1036     0697  01F4               	clrf	___lwmod@counter
  1037     0698  0AF4               	incf	___lwmod@counter,f
  1038     0699  2EA5               	goto	l1185
  1039     069A                     l1181:
  1040     069A  3001               	movlw	1
  1041     069B                     u1265:
  1042     069B  1003               	clrc
  1043     069C  0DF0               	rlf	___lwmod@divisor,f
  1044     069D  0DF1               	rlf	___lwmod@divisor+1,f
  1045     069E  3EFF               	addlw	-1
  1046     069F  1D03               	skipz
  1047     06A0  2E9B               	goto	u1265
  1048     06A1                     l1183:
  1049     06A1  3001               	movlw	1
  1050     06A2  00FF               	movwf	btemp+1
  1051     06A3  087F               	movf	btemp+1,w
  1052     06A4  07F4               	addwf	___lwmod@counter,f
  1053     06A5                     l1185:
  1054     06A5  1FF1               	btfss	___lwmod@divisor+1,7
  1055     06A6  2EA8               	goto	u1271
  1056     06A7  2EA9               	goto	u1270
  1057     06A8                     u1271:
  1058     06A8  2E9A               	goto	l1181
  1059     06A9                     u1270:
  1060     06A9                     l1187:
  1061     06A9  0871               	movf	___lwmod@divisor+1,w
  1062     06AA  0273               	subwf	___lwmod@dividend+1,w
  1063     06AB  1D03               	skipz
  1064     06AC  2EAF               	goto	u1285
  1065     06AD  0870               	movf	___lwmod@divisor,w
  1066     06AE  0272               	subwf	___lwmod@dividend,w
  1067     06AF                     u1285:
  1068     06AF  1C03               	skipc
  1069     06B0  2EB2               	goto	u1281
  1070     06B1  2EB3               	goto	u1280
  1071     06B2                     u1281:
  1072     06B2  2EB9               	goto	l1191
  1073     06B3                     u1280:
  1074     06B3                     l1189:
  1075     06B3  0870               	movf	___lwmod@divisor,w
  1076     06B4  02F2               	subwf	___lwmod@dividend,f
  1077     06B5  0871               	movf	___lwmod@divisor+1,w
  1078     06B6  1C03               	skipc
  1079     06B7  03F3               	decf	___lwmod@dividend+1,f
  1080     06B8  02F3               	subwf	___lwmod@dividend+1,f
  1081     06B9                     l1191:
  1082     06B9  3001               	movlw	1
  1083     06BA                     u1295:
  1084     06BA  1003               	clrc
  1085     06BB  0CF1               	rrf	___lwmod@divisor+1,f
  1086     06BC  0CF0               	rrf	___lwmod@divisor,f
  1087     06BD  3EFF               	addlw	-1
  1088     06BE  1D03               	skipz
  1089     06BF  2EBA               	goto	u1295
  1090     06C0                     l1193:
  1091     06C0  3001               	movlw	1
  1092     06C1  02F4               	subwf	___lwmod@counter,f
  1093     06C2  1D03               	btfss	3,2
  1094     06C3  2EC5               	goto	u1301
  1095     06C4  2EC6               	goto	u1300
  1096     06C5                     u1301:
  1097     06C5  2EA9               	goto	l1187
  1098     06C6                     u1300:
  1099     06C6                     l1195:
  1100     06C6  0873               	movf	___lwmod@dividend+1,w
  1101     06C7  00F1               	movwf	?___lwmod+1
  1102     06C8  0872               	movf	___lwmod@dividend,w
  1103     06C9  00F0               	movwf	?___lwmod
  1104     06CA                     l445:
  1105     06CA  0008               	return
  1106     06CB                     __end_of___lwmod:
  1107                           
  1108                           	psect	text6
  1109     06CB                     __ptext6:	
  1110 ;; *************** function ___lwdiv *****************
  1111 ;; Defined at:
  1112 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\lwdiv.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  divisor         2    0[COMMON] unsigned int 
  1115 ;;  dividend        2    2[COMMON] unsigned int 
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  quotient        2    4[COMMON] unsigned int 
  1118 ;;  counter         1    6[COMMON] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  2    0[COMMON] unsigned int 
  1121 ;; Registers used:
  1122 ;;		wreg, status,2, status,0, btemp+1
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1128 ;;      Params:         4       0       0       0       0
  1129 ;;      Locals:         3       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0
  1131 ;;      Totals:         7       0       0       0       0
  1132 ;;Total ram usage:        7 bytes
  1133 ;; Hardware stack levels used: 1
  1134 ;; This function calls:
  1135 ;;		Nothing
  1136 ;; This function is called by:
  1137 ;;		_lcd_number
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141     06CB                     ___lwdiv:	
  1142                           ;psect for function ___lwdiv
  1143                           
  1144     06CB                     l1151:	
  1145                           ;incstack = 0
  1146                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1147                           
  1148     06CB  01F4               	clrf	___lwdiv@quotient
  1149     06CC  01F5               	clrf	___lwdiv@quotient+1
  1150     06CD                     l1153:
  1151     06CD  0870               	movf	___lwdiv@divisor,w
  1152     06CE  0471               	iorwf	___lwdiv@divisor+1,w
  1153     06CF  1903               	btfsc	3,2
  1154     06D0  2ED2               	goto	u1181
  1155     06D1  2ED3               	goto	u1180
  1156     06D2                     u1181:
  1157     06D2  2F0A               	goto	l1173
  1158     06D3                     u1180:
  1159     06D3                     l1155:
  1160     06D3  01F6               	clrf	___lwdiv@counter
  1161     06D4  0AF6               	incf	___lwdiv@counter,f
  1162     06D5  2EE1               	goto	l1161
  1163     06D6                     l1157:
  1164     06D6  3001               	movlw	1
  1165     06D7                     u1195:
  1166     06D7  1003               	clrc
  1167     06D8  0DF0               	rlf	___lwdiv@divisor,f
  1168     06D9  0DF1               	rlf	___lwdiv@divisor+1,f
  1169     06DA  3EFF               	addlw	-1
  1170     06DB  1D03               	skipz
  1171     06DC  2ED7               	goto	u1195
  1172     06DD                     l1159:
  1173     06DD  3001               	movlw	1
  1174     06DE  00FF               	movwf	btemp+1
  1175     06DF  087F               	movf	btemp+1,w
  1176     06E0  07F6               	addwf	___lwdiv@counter,f
  1177     06E1                     l1161:
  1178     06E1  1FF1               	btfss	___lwdiv@divisor+1,7
  1179     06E2  2EE4               	goto	u1201
  1180     06E3  2EE5               	goto	u1200
  1181     06E4                     u1201:
  1182     06E4  2ED6               	goto	l1157
  1183     06E5                     u1200:
  1184     06E5                     l1163:
  1185     06E5  3001               	movlw	1
  1186     06E6                     u1215:
  1187     06E6  1003               	clrc
  1188     06E7  0DF4               	rlf	___lwdiv@quotient,f
  1189     06E8  0DF5               	rlf	___lwdiv@quotient+1,f
  1190     06E9  3EFF               	addlw	-1
  1191     06EA  1D03               	skipz
  1192     06EB  2EE6               	goto	u1215
  1193     06EC  0871               	movf	___lwdiv@divisor+1,w
  1194     06ED  0273               	subwf	___lwdiv@dividend+1,w
  1195     06EE  1D03               	skipz
  1196     06EF  2EF2               	goto	u1225
  1197     06F0  0870               	movf	___lwdiv@divisor,w
  1198     06F1  0272               	subwf	___lwdiv@dividend,w
  1199     06F2                     u1225:
  1200     06F2  1C03               	skipc
  1201     06F3  2EF5               	goto	u1221
  1202     06F4  2EF6               	goto	u1220
  1203     06F5                     u1221:
  1204     06F5  2EFD               	goto	l1169
  1205     06F6                     u1220:
  1206     06F6                     l1165:
  1207     06F6  0870               	movf	___lwdiv@divisor,w
  1208     06F7  02F2               	subwf	___lwdiv@dividend,f
  1209     06F8  0871               	movf	___lwdiv@divisor+1,w
  1210     06F9  1C03               	skipc
  1211     06FA  03F3               	decf	___lwdiv@dividend+1,f
  1212     06FB  02F3               	subwf	___lwdiv@dividend+1,f
  1213     06FC                     l1167:
  1214     06FC  1474               	bsf	___lwdiv@quotient,0
  1215     06FD                     l1169:
  1216     06FD  3001               	movlw	1
  1217     06FE                     u1235:
  1218     06FE  1003               	clrc
  1219     06FF  0CF1               	rrf	___lwdiv@divisor+1,f
  1220     0700  0CF0               	rrf	___lwdiv@divisor,f
  1221     0701  3EFF               	addlw	-1
  1222     0702  1D03               	skipz
  1223     0703  2EFE               	goto	u1235
  1224     0704                     l1171:
  1225     0704  3001               	movlw	1
  1226     0705  02F6               	subwf	___lwdiv@counter,f
  1227     0706  1D03               	btfss	3,2
  1228     0707  2F09               	goto	u1241
  1229     0708  2F0A               	goto	u1240
  1230     0709                     u1241:
  1231     0709  2EE5               	goto	l1163
  1232     070A                     u1240:
  1233     070A                     l1173:
  1234     070A  0875               	movf	___lwdiv@quotient+1,w
  1235     070B  00F1               	movwf	?___lwdiv+1
  1236     070C  0874               	movf	___lwdiv@quotient,w
  1237     070D  00F0               	movwf	?___lwdiv
  1238     070E                     l435:
  1239     070E  0008               	return
  1240     070F                     __end_of___lwdiv:
  1241                           
  1242                           	psect	text7
  1243     0636                     __ptext7:	
  1244 ;; *************** function _lcd_init *****************
  1245 ;; Defined at:
  1246 ;;		line 60 in file "./lcd_8bit.h"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;		None
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;		None
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      void 
  1253 ;; Registers used:
  1254 ;;		wreg, status,2, status,0, pclath, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1260 ;;      Params:         0       0       0       0       0
  1261 ;;      Locals:         0       0       0       0       0
  1262 ;;      Temps:          0       0       0       0       0
  1263 ;;      Totals:         0       0       0       0       0
  1264 ;;Total ram usage:        0 bytes
  1265 ;; Hardware stack levels used: 1
  1266 ;; Hardware stack levels required when called: 1
  1267 ;; This function calls:
  1268 ;;		_lcd_command
  1269 ;; This function is called by:
  1270 ;;		_main
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274     0636                     _lcd_init:	
  1275                           ;psect for function _lcd_init
  1276                           
  1277     0636                     l1199:	
  1278                           ;incstack = 0
  1279                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1280                           
  1281                           
  1282                           ;./lcd_8bit.h: 61:     lcd_command(0x0C);
  1283     0636  300C               	movlw	12
  1284     0637  120A  118A  261E  120A  118A  	fcall	_lcd_command
  1285                           
  1286                           ;./lcd_8bit.h: 62:     lcd_command(0x38);
  1287     063C  3038               	movlw	56
  1288     063D  120A  118A  261E  120A  118A  	fcall	_lcd_command
  1289                           
  1290                           ;./lcd_8bit.h: 63:     lcd_command(0x80);
  1291     0642  3080               	movlw	128
  1292     0643  120A  118A  261E  120A  118A  	fcall	_lcd_command
  1293     0648                     l33:
  1294     0648  0008               	return
  1295     0649                     __end_of_lcd_init:
  1296                           
  1297                           	psect	text8
  1298     061E                     __ptext8:	
  1299 ;; *************** function _lcd_command *****************
  1300 ;; Defined at:
  1301 ;;		line 42 in file "./lcd_8bit.h"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  cmd             1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  cmd             1    0[COMMON] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1315 ;;      Params:         0       0       0       0       0
  1316 ;;      Locals:         1       0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0
  1318 ;;      Totals:         1       0       0       0       0
  1319 ;;Total ram usage:        1 bytes
  1320 ;; Hardware stack levels used: 1
  1321 ;; This function calls:
  1322 ;;		Nothing
  1323 ;; This function is called by:
  1324 ;;		_lcd_init
  1325 ;;		_setCursor
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329     061E                     _lcd_command:	
  1330                           ;psect for function _lcd_command
  1331                           
  1332                           
  1333                           ;incstack = 0
  1334                           ; Regs used in _lcd_command: [wreg]
  1335                           ;lcd_command@cmd stored from wreg
  1336     061E  00F0               	movwf	lcd_command@cmd
  1337     061F                     l1135:
  1338                           
  1339                           ;./lcd_8bit.h: 43:     PORTCbits.RC5 = 0x00;
  1340     061F  1283               	bcf	3,5	;RP0=0, select bank0
  1341     0620  1303               	bcf	3,6	;RP1=0, select bank0
  1342     0621  1287               	bcf	7,5	;volatile
  1343                           
  1344                           ;./lcd_8bit.h: 44:     PORTCbits.RC6 = 0x00;
  1345     0622  1307               	bcf	7,6	;volatile
  1346                           
  1347                           ;./lcd_8bit.h: 45:     PORTCbits.RC7 = 0x01;
  1348     0623  1787               	bsf	7,7	;volatile
  1349     0624                     l1137:
  1350                           
  1351                           ;./lcd_8bit.h: 46:     PORTD = cmd;
  1352     0624  0870               	movf	lcd_command@cmd,w
  1353     0625  0088               	movwf	8	;volatile
  1354     0626                     l1139:
  1355                           
  1356                           ;./lcd_8bit.h: 47:     PORTCbits.RC7 = 0;
  1357     0626  1387               	bcf	7,7	;volatile
  1358     0627                     l1141:
  1359                           
  1360                           ;./lcd_8bit.h: 48:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000.0)));
  1361     0627  2E28               	nop2	;2 cycle nop
  1362     0628  2E29               	nop2	;2 cycle nop
  1363     0629                     l27:
  1364     0629  0008               	return
  1365     062A                     __end_of_lcd_command:
  1366     007E                     btemp	set	126	;btemp
  1367     007E                     wtemp0	set	126
  1368                           
  1369                           	psect	config
  1370                           
  1371                           ;Config register CONFIG @ 0x2007
  1372                           ;	Oscillator Selection bits
  1373                           ;	FOSC = HS, HS oscillator
  1374                           ;	Watchdog Timer Enable bit
  1375                           ;	WDTE = OFF, WDT disabled
  1376                           ;	Power-up Timer Enable bit
  1377                           ;	PWRTE = OFF, PWRT disabled
  1378                           ;	Brown-out Reset Enable bit
  1379                           ;	BOREN = OFF, BOR disabled
  1380                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1381                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1382                           ;	Data EEPROM Memory Code Protection bit
  1383                           ;	CPD = OFF, Data EEPROM code protection off
  1384                           ;	Flash Program Memory Write Enable bits
  1385                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1386                           ;	In-Circuit Debugger Mode bit
  1387                           ;	DEBUG = 0x1, unprogrammed default
  1388                           ;	Flash Program Memory Code Protection bit
  1389                           ;	CP = OFF, Code protection off
  1390     2007                     	org	8199
  1391     2007  3F3A               	dw	16186

Data Sizes:
    Strings     7
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     36      36
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@string_data	PTR unsigned char  size(1) Largest target is 7
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_lcd_number
    _setCursor->_lcd_command
    _lcd_string->_lcd_data
    _lcd_number->___lwdiv
    _lcd_init->_lcd_command

Critical Paths under _main in BANK0

    _main->_lcd_number

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1691
                                             10 COMMON     2     2      0
                           _lcd_init
                         _lcd_number
                         _lcd_string
                          _setCursor
 ---------------------------------------------------------------------------------
 (1) _setCursor                                            2     1      1     360
                                              1 COMMON     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           3     3      0     146
                                              1 COMMON     3     3      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (1) _lcd_number                                          39    37      2    1117
                                              7 COMMON     3     1      2
                                              0 BANK0     36    36      0
                            ___lwdiv
                            ___lwmod
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      22
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_init
     _lcd_command
   _lcd_number
     ___lwdiv
     ___lwmod
     _lcd_data
   _lcd_string
     _lcd_data
   _setCursor
     _lcd_command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      24       5       45.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      32      12        0.0%
ABS                  0      0      32       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Apr 30 14:49:53 2024

           lcd_data@Data 0070                        pc 0002                       l30 0635  
                     l33 0648                       l50 07EF                       l27 0629  
                     l39 0690                       l64 076C                       l57 0669  
                     fsr 0004                      l435 070E                      l445 06CA  
                    fsr0 0004                      indf 0000                     l1201 066B  
                   l1211 077D                     l1203 0670                     l1141 0627  
                   l1221 07B9                     l1213 0785                     l1205 067D  
                   l1135 061F                     l1151 06CB                     l1143 062B  
                   l1231 07EB                     l1215 078A                     l1223 07C1  
                   l1207 0683                     l1137 0624                     l1161 06E1  
                   l1153 06CD                     l1145 0630                     l1225 07CA  
                   l1217 079D                     l1209 0774                     l1241 0662  
                   l1233 064A                     l1139 0626                     l1171 0704  
                   l1163 06E5                     l1155 06D3                     l1147 0632  
                   l1227 07D6                     l1219 07A8                     l1235 0650  
                   l1251 0725                     l1243 070F                     l1165 06F6  
                   l1157 06D6                     l1173 070A                     l1181 069A  
                   l1149 0633                     l1229 07E3                     l1237 0655  
                   l1261 0747                     l1253 072C                     l1245 0717  
                   l1167 06FC                     l1159 06DD                     l1191 06B9  
                   l1183 06A1                     l1239 065D                     l1263 074D  
                   l1255 0732                     l1247 071A                     l1169 06FD  
                   l1193 06C0                     l1185 06A5                     l1177 0691  
                   l1265 0754                     l1257 0739                     l1249 0720  
                   l1187 06A9                     l1179 0697                     l1195 06C6  
                   l1267 075D                     l1259 0741                     l1189 06B3  
                   l1199 0636                     STR_1 0009                     u1200 06E5  
                   u1201 06E4                     u1220 06F6                     u1300 06C6  
                   u1221 06F5                     u1301 06C5                     u1310 0690  
                   u1215 06E6                     u1311 068F                     u1240 070A  
                   u1320 077D                     u1241 0709                     u1225 06F2  
                   u1321 077C                     u1250 0697                     u1330 07CA  
                   u1410 0770                     u1235 06FE                     u1251 0696  
                   u1331 07C9                     u1411 076F                     u1180 06D3  
                   u1340 07EF                     u1404 076C                     u1181 06D2  
                   u1341 07EE                     u1270 06A9                     u1350 0650  
                   u1271 06A8                     u1351 064F                     u1280 06B3  
                   u1360 0655                     u1281 06B2                     u1265 069B  
                   u1361 0654                     u1370 0662                     u1195 06D7  
                   u1371 0661                     u1380 0747                     u1285 06AF  
                   u1381 0746                     u1390 0769                     u1295 06BA  
                   u1391 0765              lcd_number@a 0020                     _main 070F  
                   btemp 007E                     start 0000              lcd_string@i 0072  
                  ?_main 0070          __end_of___lwdiv 070F          __end_of___lwmod 06CB  
                  _PORTA 0005                    _PORTD 0008                    _TRISA 0085  
                  _TRISC 0087                    _TRISD 0088                    pclath 000A  
             __XTAL_FREQ 007C                    status 0003                    wtemp0 007E  
        __initialization 07F0             __end_of_main 0774                   ??_main 007A  
         lcd_command@cmd 0070            lcd_number@num 0077         __end_of_lcd_data 0636  
       __end_of_lcd_init 0649                ??___lwdiv 0074                ??___lwmod 0074  
           __pdataCOMMON 007C  __end_of__initialization 07FC           __pcstackCOMMON 0070  
             __pmaintext 070F               _lcd_number 0774                ?_lcd_data 0070  
             _lcd_string 066A                ?_lcd_init 0070               __stringtab 0003  
         lcd_number@temp 0040                  ___lwdiv 06CB                  ___lwmod 0691  
                __ptext1 0649                  __ptext2 066A                  __ptext3 0774  
                __ptext4 062A                  __ptext5 0691                  __ptext6 06CB  
                __ptext7 0636                  __ptext8 061E               ??_lcd_data 0070  
             ??_lcd_init 0071     end_of_initialization 07FC        __end_of_setCursor 066A  
  lcd_string@string_data 0071                _PORTAbits 0005                _PORTBbits 0006  
              _PORTCbits 0007                _TRISAbits 0085                _TRISBbits 0086  
            ?_lcd_number 0077              ?_lcd_string 0070            ??_lcd_command 0070  
          __pidataCOMMON 061C      start_initialization 07F0      __end_of_lcd_command 062A  
              ___latbits 0002            __pcstackBANK0 0020         ___lwdiv@dividend 0072  
               ?___lwdiv 0070               setCursor@x 0072               setCursor@y 0071  
               ?___lwmod 0070                __pstrings 0003         ___lwdiv@quotient 0074  
              _setCursor 0649              _lcd_command 061E              __stringbase 0008  
        lcd_number@count 0042                main@count 007A             ??_lcd_number 0079  
           ??_lcd_string 0071               ?_setCursor 0071       __end_of_lcd_number 07F0  
     __end_of_lcd_string 0691       __end_of__stringtab 0009          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076                 _lcd_data 062A                 _lcd_init 0636  
       ___lwmod@dividend 0072              ??_setCursor 0072                stringcode 0003  
        ___lwmod@divisor 0070          ___lwmod@counter 0074                 stringdir 0003  
               stringtab 0003             ?_lcd_command 0070  
