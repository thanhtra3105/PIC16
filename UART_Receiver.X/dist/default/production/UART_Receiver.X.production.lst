

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat Jun 08 17:04:04 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 12/10/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0006                     	;# 
    61     0007                     	;# 
    62     0008                     	;# 
    63     0009                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     000D                     	;# 
    68     000E                     	;# 
    69     000E                     	;# 
    70     000F                     	;# 
    71     0010                     	;# 
    72     0011                     	;# 
    73     0012                     	;# 
    74     0013                     	;# 
    75     0014                     	;# 
    76     0015                     	;# 
    77     0015                     	;# 
    78     0016                     	;# 
    79     0017                     	;# 
    80     0018                     	;# 
    81     0019                     	;# 
    82     001A                     	;# 
    83     001B                     	;# 
    84     001B                     	;# 
    85     001C                     	;# 
    86     001D                     	;# 
    87     001E                     	;# 
    88     001F                     	;# 
    89     0081                     	;# 
    90     0085                     	;# 
    91     0086                     	;# 
    92     0087                     	;# 
    93     0088                     	;# 
    94     0089                     	;# 
    95     008C                     	;# 
    96     008D                     	;# 
    97     008E                     	;# 
    98     008F                     	;# 
    99     0090                     	;# 
   100     0091                     	;# 
   101     0092                     	;# 
   102     0093                     	;# 
   103     0093                     	;# 
   104     0093                     	;# 
   105     0094                     	;# 
   106     0095                     	;# 
   107     0096                     	;# 
   108     0097                     	;# 
   109     0098                     	;# 
   110     0099                     	;# 
   111     009A                     	;# 
   112     009B                     	;# 
   113     009C                     	;# 
   114     009D                     	;# 
   115     009E                     	;# 
   116     009F                     	;# 
   117     0105                     	;# 
   118     0107                     	;# 
   119     0108                     	;# 
   120     0109                     	;# 
   121     010C                     	;# 
   122     010C                     	;# 
   123     010D                     	;# 
   124     010E                     	;# 
   125     010F                     	;# 
   126     0185                     	;# 
   127     0187                     	;# 
   128     0188                     	;# 
   129     0189                     	;# 
   130     018C                     	;# 
   131     018D                     	;# 
   132     0000                     	;# 
   133     0001                     	;# 
   134     0002                     	;# 
   135     0003                     	;# 
   136     0004                     	;# 
   137     0005                     	;# 
   138     0006                     	;# 
   139     0007                     	;# 
   140     0008                     	;# 
   141     0009                     	;# 
   142     000A                     	;# 
   143     000B                     	;# 
   144     000C                     	;# 
   145     000D                     	;# 
   146     000E                     	;# 
   147     000E                     	;# 
   148     000F                     	;# 
   149     0010                     	;# 
   150     0011                     	;# 
   151     0012                     	;# 
   152     0013                     	;# 
   153     0014                     	;# 
   154     0015                     	;# 
   155     0015                     	;# 
   156     0016                     	;# 
   157     0017                     	;# 
   158     0018                     	;# 
   159     0019                     	;# 
   160     001A                     	;# 
   161     001B                     	;# 
   162     001B                     	;# 
   163     001C                     	;# 
   164     001D                     	;# 
   165     001E                     	;# 
   166     001F                     	;# 
   167     0081                     	;# 
   168     0085                     	;# 
   169     0086                     	;# 
   170     0087                     	;# 
   171     0088                     	;# 
   172     0089                     	;# 
   173     008C                     	;# 
   174     008D                     	;# 
   175     008E                     	;# 
   176     008F                     	;# 
   177     0090                     	;# 
   178     0091                     	;# 
   179     0092                     	;# 
   180     0093                     	;# 
   181     0093                     	;# 
   182     0093                     	;# 
   183     0094                     	;# 
   184     0095                     	;# 
   185     0096                     	;# 
   186     0097                     	;# 
   187     0098                     	;# 
   188     0099                     	;# 
   189     009A                     	;# 
   190     009B                     	;# 
   191     009C                     	;# 
   192     009D                     	;# 
   193     009E                     	;# 
   194     009F                     	;# 
   195     0105                     	;# 
   196     0107                     	;# 
   197     0108                     	;# 
   198     0109                     	;# 
   199     010C                     	;# 
   200     010C                     	;# 
   201     010D                     	;# 
   202     010E                     	;# 
   203     010F                     	;# 
   204     0185                     	;# 
   205     0187                     	;# 
   206     0188                     	;# 
   207     0189                     	;# 
   208     018C                     	;# 
   209     018D                     	;# 
   210                           
   211                           	psect	idataBANK0
   212     05FC                     __pidataBANK0:
   213                           
   214                           ;initializer for __XTAL_FREQ
   215     05FC  3400               	retlw	0
   216     05FD  3409               	retlw	9
   217     001A                     _RCREG	set	26
   218     0019                     _TXREG	set	25
   219     0018                     _RCSTAbits	set	24
   220     0008                     _PORTD	set	8
   221     0007                     _PORTCbits	set	7
   222     0065                     _RCIF	set	101
   223     0064                     _TXIF	set	100
   224     0088                     _TRISD	set	136
   225     0087                     _TRISC	set	135
   226     0099                     _SPBRG	set	153
   227     0098                     _TXSTAbits	set	152
   228     0087                     _TRISCbits	set	135
   229     0187                     _BAUDCTLbits	set	391
   230                           
   231                           	psect	cinit
   232     07F0                     start_initialization:	
   233                           ; #config settings
   234                           
   235     07F0                     __initialization:
   236                           
   237                           ; Initialize objects allocated to BANK0
   238     07F0  120A  118A  25FC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   239     07F5  00AB               	movwf	__pdataBANK0& (0+127)
   240     07F6  120A  118A  25FD  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   241     07FB  00AC               	movwf	(__pdataBANK0+1)& (0+127)
   242     07FC                     end_of_initialization:	
   243                           ;End of C runtime variable initialization code
   244                           
   245     07FC                     __end_of__initialization:
   246     07FC  0183               	clrf	3
   247     07FD  120A  118A  2E4E   	ljmp	_main	;jump to C main() function
   248                           
   249                           	psect	dataBANK0
   250     002B                     __pdataBANK0:
   251     002B                     __XTAL_FREQ:
   252     002B                     	ds	2
   253                           
   254                           	psect	cstackCOMMON
   255     0070                     __pcstackCOMMON:
   256     0070                     ?_lcd_command:
   257     0070                     ??_lcd_command:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     ?_lcd_data:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ??_lcd_data:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     ?_lcd_init:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ?_UART_RxChar:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     ??_UART_RxChar:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ?_main:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ?___aldiv:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     0070                     lcd_command@cmd:	
   282                           ; 4 bytes @ 0x0
   283                           
   284     0070                     lcd_data@Data:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0070                     ___aldiv@divisor:	
   288                           ; 1 bytes @ 0x0
   289                           
   290                           
   291                           ; 4 bytes @ 0x0
   292     0070                     	ds	1
   293     0071                     ??_lcd_init:
   294     0071                     ?_lcd_setCursor:	
   295                           ; 1 bytes @ 0x1
   296                           
   297     0071                     lcd_setCursor@y:	
   298                           ; 1 bytes @ 0x1
   299                           
   300                           
   301                           ; 1 bytes @ 0x1
   302     0071                     	ds	1
   303     0072                     ??_lcd_setCursor:
   304     0072                     lcd_setCursor@x:	
   305                           ; 1 bytes @ 0x2
   306                           
   307                           
   308                           ; 1 bytes @ 0x2
   309     0072                     	ds	2
   310     0074                     ___aldiv@dividend:
   311                           
   312                           ; 4 bytes @ 0x4
   313     0074                     	ds	4
   314     0078                     ??___aldiv:
   315                           
   316                           ; 1 bytes @ 0x8
   317     0078                     	ds	1
   318     0079                     ??_UART_init:
   319                           
   320                           ; 1 bytes @ 0x9
   321     0079                     	ds	4
   322     007D                     ??_main:
   323                           
   324                           	psect	cstackBANK0
   325     0020                     __pcstackBANK0:	
   326                           ; 1 bytes @ 0xD
   327                           
   328     0020                     ___aldiv@counter:
   329                           
   330                           ; 1 bytes @ 0x0
   331     0020                     	ds	1
   332     0021                     ___aldiv@sign:
   333                           
   334                           ; 1 bytes @ 0x1
   335     0021                     	ds	1
   336     0022                     ___aldiv@quotient:
   337                           
   338                           ; 4 bytes @ 0x2
   339     0022                     	ds	4
   340     0026                     ?_UART_init:
   341     0026                     UART_init@baud:	
   342                           ; 1 bytes @ 0x6
   343                           
   344                           
   345                           ; 2 bytes @ 0x6
   346     0026                     	ds	2
   347     0028                     main@t:
   348                           
   349                           ; 1 bytes @ 0x8
   350     0028                     	ds	1
   351     0029                     main@i:
   352                           
   353                           ; 2 bytes @ 0x9
   354     0029                     	ds	2
   355                           
   356                           	psect	maintext
   357     064E                     __pmaintext:	
   358 ;;
   359 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   360 ;;
   361 ;; *************** function _main *****************
   362 ;; Defined at:
   363 ;;		line 23 in file "newmain.c"
   364 ;; Parameters:    Size  Location     Type
   365 ;;		None
   366 ;; Auto vars:     Size  Location     Type
   367 ;;  i               2    9[BANK0 ] int 
   368 ;;  j               2    0        int 
   369 ;;  t               1    8[BANK0 ] unsigned char 
   370 ;; Return value:  Size  Location     Type
   371 ;;                  1    wreg      void 
   372 ;; Registers used:
   373 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   374 ;; Tracked objects:
   375 ;;		On entry : B00/0
   376 ;;		On exit  : 0/0
   377 ;;		Unchanged: 0/0
   378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   379 ;;      Params:         0       0       0       0       0
   380 ;;      Locals:         0       3       0       0       0
   381 ;;      Temps:          0       0       0       0       0
   382 ;;      Totals:         0       3       0       0       0
   383 ;;Total ram usage:        3 bytes
   384 ;; Hardware stack levels required when called: 2
   385 ;; This function calls:
   386 ;;		_UART_RxChar
   387 ;;		_UART_init
   388 ;;		_lcd_data
   389 ;;		_lcd_init
   390 ;;		_lcd_setCursor
   391 ;; This function is called by:
   392 ;;		Startup code after reset
   393 ;; This function uses a non-reentrant model
   394 ;;
   395                           
   396     064E                     _main:	
   397                           ;psect for function _main
   398                           
   399     064E                     l923:	
   400                           ;incstack = 0
   401                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   402                           
   403                           
   404                           ;newmain.c: 24:     TRISC = 0;
   405     064E  1683               	bsf	3,5	;RP0=1, select bank1
   406     064F  1303               	bcf	3,6	;RP1=0, select bank1
   407     0650  0187               	clrf	7	;volatile
   408                           
   409                           ;newmain.c: 25:     TRISD = 0;
   410     0651  0188               	clrf	8	;volatile
   411     0652                     l925:
   412                           
   413                           ;newmain.c: 26:     UART_init(9600);
   414     0652  3080               	movlw	128
   415     0653  1283               	bcf	3,5	;RP0=0, select bank0
   416     0654  1303               	bcf	3,6	;RP1=0, select bank0
   417     0655  00A6               	movwf	UART_init@baud
   418     0656  3025               	movlw	37
   419     0657  00A7               	movwf	UART_init@baud+1
   420     0658  120A  118A  2732  120A  118A  	fcall	_UART_init
   421     065D                     l927:
   422     065D                     l929:
   423     065D                     l931:
   424                           
   425                           ;newmain.c: 28:     char t;;newmain.c: 29:     lcd_init();
   426     065D  120A  118A  261B  120A  118A  	fcall	_lcd_init
   427     0662                     l933:
   428                           
   429                           ;newmain.c: 32:         lcd_setCursor(0,1);
   430     0662  01F1               	clrf	lcd_setCursor@y
   431     0663  0AF1               	incf	lcd_setCursor@y,f
   432     0664  3000               	movlw	0
   433     0665  120A  118A  262E  120A  118A  	fcall	_lcd_setCursor
   434     066A                     l935:
   435                           
   436                           ;newmain.c: 34:         for (i = 0; i < 3; i++) {
   437     066A  1283               	bcf	3,5	;RP0=0, select bank0
   438     066B  1303               	bcf	3,6	;RP1=0, select bank0
   439     066C  01A9               	clrf	main@i
   440     066D  01AA               	clrf	main@i+1
   441     066E                     l941:
   442                           
   443                           ;newmain.c: 36:         }
   444     066E  3001               	movlw	1
   445     066F  1283               	bcf	3,5	;RP0=0, select bank0
   446     0670  1303               	bcf	3,6	;RP1=0, select bank0
   447     0671  07A9               	addwf	main@i,f
   448     0672  1803               	skipnc
   449     0673  0AAA               	incf	main@i+1,f
   450     0674  3000               	movlw	0
   451     0675  07AA               	addwf	main@i+1,f
   452     0676                     l943:
   453     0676  082A               	movf	main@i+1,w
   454     0677  3A80               	xorlw	128
   455     0678  00FF               	movwf	btemp+1
   456     0679  3080               	movlw	128
   457     067A  027F               	subwf	btemp+1,w
   458     067B  1D03               	skipz
   459     067C  2E7F               	goto	u495
   460     067D  3003               	movlw	3
   461     067E  0229               	subwf	main@i,w
   462     067F                     u495:
   463     067F  1C03               	skipc
   464     0680  2E82               	goto	u491
   465     0681  2E83               	goto	u490
   466     0682                     u491:
   467     0682  2E6E               	goto	l941
   468     0683                     u490:
   469     0683                     l945:
   470                           
   471                           ;newmain.c: 37:         t = UART_RxChar();
   472     0683  120A  118A  25FE  120A  118A  	fcall	_UART_RxChar
   473     0688  1283               	bcf	3,5	;RP0=0, select bank0
   474     0689  1303               	bcf	3,6	;RP1=0, select bank0
   475     068A  00A8               	movwf	main@t
   476     068B                     l947:
   477                           
   478                           ;newmain.c: 38:         lcd_data(t);
   479     068B  0828               	movf	main@t,w
   480     068C  120A  118A  2607  120A  118A  	fcall	_lcd_data
   481     0691  2E62               	goto	l933
   482     0692  120A  118A  2800   	ljmp	start
   483     0695                     __end_of_main:
   484                           
   485                           	psect	text1
   486     062E                     __ptext1:	
   487 ;; *************** function _lcd_setCursor *****************
   488 ;; Defined at:
   489 ;;		line 71 in file "./lcd_8bit.h"
   490 ;; Parameters:    Size  Location     Type
   491 ;;  x               1    wreg     unsigned char 
   492 ;;  y               1    1[COMMON] unsigned char 
   493 ;; Auto vars:     Size  Location     Type
   494 ;;  x               1    2[COMMON] unsigned char 
   495 ;; Return value:  Size  Location     Type
   496 ;;                  1    wreg      void 
   497 ;; Registers used:
   498 ;;		wreg, status,2, status,0, pclath, cstack
   499 ;; Tracked objects:
   500 ;;		On entry : 0/0
   501 ;;		On exit  : 0/0
   502 ;;		Unchanged: 0/0
   503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   504 ;;      Params:         1       0       0       0       0
   505 ;;      Locals:         1       0       0       0       0
   506 ;;      Temps:          0       0       0       0       0
   507 ;;      Totals:         2       0       0       0       0
   508 ;;Total ram usage:        2 bytes
   509 ;; Hardware stack levels used: 1
   510 ;; Hardware stack levels required when called: 1
   511 ;; This function calls:
   512 ;;		_lcd_command
   513 ;; This function is called by:
   514 ;;		_main
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518     062E                     _lcd_setCursor:	
   519                           ;psect for function _lcd_setCursor
   520                           
   521                           
   522                           ;incstack = 0
   523                           ; Regs used in _lcd_setCursor: [wreg+status,2+status,0+pclath+cstack]
   524                           ;lcd_setCursor@x stored from wreg
   525     062E  00F2               	movwf	lcd_setCursor@x
   526     062F                     l849:
   527                           
   528                           ;./lcd_8bit.h: 71: void lcd_setCursor(unsigned char x, unsigned char y);./lcd_8bit.h: 72
      +                          : {;./lcd_8bit.h: 73:     if (x >= 0 && x < 16) {
   529     062F  3010               	movlw	16
   530     0630  0272               	subwf	lcd_setCursor@x,w
   531     0631  1803               	skipnc
   532     0632  2E34               	goto	u361
   533     0633  2E35               	goto	u360
   534     0634                     u361:
   535     0634  2E4D               	goto	l60
   536     0635                     u360:
   537     0635                     l851:
   538                           
   539                           ;./lcd_8bit.h: 74:         if (y == 0)
   540     0635  0871               	movf	lcd_setCursor@y,w
   541     0636  1D03               	btfss	3,2
   542     0637  2E39               	goto	u371
   543     0638  2E3A               	goto	u370
   544     0639                     u371:
   545     0639  2E41               	goto	l855
   546     063A                     u370:
   547     063A                     l853:
   548                           
   549                           ;./lcd_8bit.h: 75:         {;./lcd_8bit.h: 76:             lcd_command(0x80 + x);
   550     063A  0872               	movf	lcd_setCursor@x,w
   551     063B  3E80               	addlw	128
   552     063C  120A  118A  2611  120A  118A  	fcall	_lcd_command
   553     0641                     l855:
   554                           
   555                           ;./lcd_8bit.h: 79:         if (y == 1)
   556     0641  0371               	decf	lcd_setCursor@y,w
   557     0642  1D03               	btfss	3,2
   558     0643  2E45               	goto	u381
   559     0644  2E46               	goto	u380
   560     0645                     u381:
   561     0645  2E4D               	goto	l60
   562     0646                     u380:
   563     0646                     l857:
   564                           
   565                           ;./lcd_8bit.h: 80:         {;./lcd_8bit.h: 81:             lcd_command(0xC0 + x);
   566     0646  0872               	movf	lcd_setCursor@x,w
   567     0647  3EC0               	addlw	192
   568     0648  120A  118A  2611  120A  118A  	fcall	_lcd_command
   569     064D                     l60:
   570     064D  0008               	return
   571     064E                     __end_of_lcd_setCursor:
   572                           
   573                           	psect	text2
   574     061B                     __ptext2:	
   575 ;; *************** function _lcd_init *****************
   576 ;; Defined at:
   577 ;;		line 33 in file "./lcd_8bit.h"
   578 ;; Parameters:    Size  Location     Type
   579 ;;		None
   580 ;; Auto vars:     Size  Location     Type
   581 ;;		None
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      void 
   584 ;; Registers used:
   585 ;;		wreg, status,2, status,0, pclath, cstack
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   591 ;;      Params:         0       0       0       0       0
   592 ;;      Locals:         0       0       0       0       0
   593 ;;      Temps:          0       0       0       0       0
   594 ;;      Totals:         0       0       0       0       0
   595 ;;Total ram usage:        0 bytes
   596 ;; Hardware stack levels used: 1
   597 ;; Hardware stack levels required when called: 1
   598 ;; This function calls:
   599 ;;		_lcd_command
   600 ;; This function is called by:
   601 ;;		_main
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605     061B                     _lcd_init:	
   606                           ;psect for function _lcd_init
   607                           
   608     061B                     l847:	
   609                           ;incstack = 0
   610                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   611                           
   612                           
   613                           ;./lcd_8bit.h: 34:     lcd_command(0x0C);
   614     061B  300C               	movlw	12
   615     061C  120A  118A  2611  120A  118A  	fcall	_lcd_command
   616                           
   617                           ;./lcd_8bit.h: 35:     lcd_command(0x38);
   618     0621  3038               	movlw	56
   619     0622  120A  118A  2611  120A  118A  	fcall	_lcd_command
   620                           
   621                           ;./lcd_8bit.h: 36:     lcd_command(0x01);
   622     0627  3001               	movlw	1
   623     0628  120A  118A  2611  120A  118A  	fcall	_lcd_command
   624     062D                     l37:
   625     062D  0008               	return
   626     062E                     __end_of_lcd_init:
   627                           
   628                           	psect	text3
   629     0611                     __ptext3:	
   630 ;; *************** function _lcd_command *****************
   631 ;; Defined at:
   632 ;;		line 15 in file "./lcd_8bit.h"
   633 ;; Parameters:    Size  Location     Type
   634 ;;  cmd             1    wreg     unsigned char 
   635 ;; Auto vars:     Size  Location     Type
   636 ;;  cmd             1    0[COMMON] unsigned char 
   637 ;; Return value:  Size  Location     Type
   638 ;;                  1    wreg      void 
   639 ;; Registers used:
   640 ;;		wreg
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   646 ;;      Params:         0       0       0       0       0
   647 ;;      Locals:         1       0       0       0       0
   648 ;;      Temps:          0       0       0       0       0
   649 ;;      Totals:         1       0       0       0       0
   650 ;;Total ram usage:        1 bytes
   651 ;; Hardware stack levels used: 1
   652 ;; This function calls:
   653 ;;		Nothing
   654 ;; This function is called by:
   655 ;;		_lcd_init
   656 ;;		_lcd_setCursor
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660     0611                     _lcd_command:	
   661                           ;psect for function _lcd_command
   662                           
   663                           
   664                           ;incstack = 0
   665                           ; Regs used in _lcd_command: [wreg]
   666                           ;lcd_command@cmd stored from wreg
   667     0611  00F0               	movwf	lcd_command@cmd
   668     0612                     l793:
   669                           
   670                           ;./lcd_8bit.h: 16:     PORTCbits.RC0 = 0x00;
   671     0612  1283               	bcf	3,5	;RP0=0, select bank0
   672     0613  1303               	bcf	3,6	;RP1=0, select bank0
   673     0614  1007               	bcf	7,0	;volatile
   674                           
   675                           ;./lcd_8bit.h: 17:     PORTCbits.RC1 = 0x00;
   676     0615  1087               	bcf	7,1	;volatile
   677                           
   678                           ;./lcd_8bit.h: 18:     PORTCbits.RC2 = 0x01;
   679     0616  1507               	bsf	7,2	;volatile
   680     0617                     l795:
   681                           
   682                           ;./lcd_8bit.h: 19:     PORTD = cmd;
   683     0617  0870               	movf	lcd_command@cmd,w
   684     0618  0088               	movwf	8	;volatile
   685     0619                     l797:
   686                           
   687                           ;./lcd_8bit.h: 20:     PORTCbits.RC2 = 0;
   688     0619  1107               	bcf	7,2	;volatile
   689     061A                     l31:
   690     061A  0008               	return
   691     061B                     __end_of_lcd_command:
   692                           
   693                           	psect	text4
   694     0607                     __ptext4:	
   695 ;; *************** function _lcd_data *****************
   696 ;; Defined at:
   697 ;;		line 24 in file "./lcd_8bit.h"
   698 ;; Parameters:    Size  Location     Type
   699 ;;  Data            1    wreg     unsigned char 
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  Data            1    0[COMMON] unsigned char 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   711 ;;      Params:         0       0       0       0       0
   712 ;;      Locals:         1       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0
   714 ;;      Totals:         1       0       0       0       0
   715 ;;Total ram usage:        1 bytes
   716 ;; Hardware stack levels used: 1
   717 ;; This function calls:
   718 ;;		Nothing
   719 ;; This function is called by:
   720 ;;		_main
   721 ;;		_lcd_string
   722 ;;		_lcd_number
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726     0607                     _lcd_data:	
   727                           ;psect for function _lcd_data
   728                           
   729                           
   730                           ;incstack = 0
   731                           ; Regs used in _lcd_data: [wreg]
   732                           ;lcd_data@Data stored from wreg
   733     0607  00F0               	movwf	lcd_data@Data
   734     0608                     l841:
   735                           
   736                           ;./lcd_8bit.h: 25:     PORTCbits.RC0 = 1;
   737     0608  1283               	bcf	3,5	;RP0=0, select bank0
   738     0609  1303               	bcf	3,6	;RP1=0, select bank0
   739     060A  1407               	bsf	7,0	;volatile
   740                           
   741                           ;./lcd_8bit.h: 26:     PORTCbits.RC1 = 0;
   742     060B  1087               	bcf	7,1	;volatile
   743                           
   744                           ;./lcd_8bit.h: 27:     PORTCbits.RC2 = 1;
   745     060C  1507               	bsf	7,2	;volatile
   746     060D                     l843:
   747                           
   748                           ;./lcd_8bit.h: 28:     PORTD = Data;
   749     060D  0870               	movf	lcd_data@Data,w
   750     060E  0088               	movwf	8	;volatile
   751     060F                     l845:
   752                           
   753                           ;./lcd_8bit.h: 29:     PORTCbits.RC2 = 0;
   754     060F  1107               	bcf	7,2	;volatile
   755     0610                     l34:
   756     0610  0008               	return
   757     0611                     __end_of_lcd_data:
   758                           
   759                           	psect	text5
   760     0732                     __ptext5:	
   761 ;; *************** function _UART_init *****************
   762 ;; Defined at:
   763 ;;		line 5 in file "./uart.h"
   764 ;; Parameters:    Size  Location     Type
   765 ;;  baud            2    6[BANK0 ] int 
   766 ;; Auto vars:     Size  Location     Type
   767 ;;		None
   768 ;; Return value:  Size  Location     Type
   769 ;;                  1    wreg      void 
   770 ;; Registers used:
   771 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   772 ;; Tracked objects:
   773 ;;		On entry : 0/0
   774 ;;		On exit  : 0/0
   775 ;;		Unchanged: 0/0
   776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   777 ;;      Params:         0       2       0       0       0
   778 ;;      Locals:         0       0       0       0       0
   779 ;;      Temps:          4       0       0       0       0
   780 ;;      Totals:         4       2       0       0       0
   781 ;;Total ram usage:        6 bytes
   782 ;; Hardware stack levels used: 1
   783 ;; Hardware stack levels required when called: 1
   784 ;; This function calls:
   785 ;;		___aldiv
   786 ;; This function is called by:
   787 ;;		_main
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791     0732                     _UART_init:	
   792                           ;psect for function _UART_init
   793                           
   794     0732                     l859:	
   795                           ;incstack = 0
   796                           ; Regs used in _UART_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   797                           
   798                           
   799                           ;./uart.h: 6:     TRISCbits.TRISC6 = 0;
   800     0732  1683               	bsf	3,5	;RP0=1, select bank1
   801     0733  1303               	bcf	3,6	;RP1=0, select bank1
   802     0734  1307               	bcf	7,6	;volatile
   803                           
   804                           ;./uart.h: 7:     TRISCbits.TRISC7 = 1;
   805     0735  1787               	bsf	7,7	;volatile
   806                           
   807                           ;./uart.h: 9:     TXSTAbits.SYNC = 0;
   808     0736  1218               	bcf	24,4	;volatile
   809                           
   810                           ;./uart.h: 11:     TXSTAbits.TXEN = 1;
   811     0737  1698               	bsf	24,5	;volatile
   812     0738                     l861:
   813                           
   814                           ;./uart.h: 12:     if(baud < 9600)
   815     0738  1283               	bcf	3,5	;RP0=0, select bank0
   816     0739  1303               	bcf	3,6	;RP1=0, select bank0
   817     073A  0827               	movf	UART_init@baud+1,w
   818     073B  3A80               	xorlw	128
   819     073C  00FF               	movwf	btemp+1
   820     073D  30A5               	movlw	165
   821     073E  027F               	subwf	btemp+1,w
   822     073F  1D03               	skipz
   823     0740  2F43               	goto	u395
   824     0741  3080               	movlw	128
   825     0742  0226               	subwf	UART_init@baud,w
   826     0743                     u395:
   827     0743  1803               	skipnc
   828     0744  2F46               	goto	u391
   829     0745  2F47               	goto	u390
   830     0746                     u391:
   831     0746  2F77               	goto	l867
   832     0747                     u390:
   833     0747                     l863:
   834                           
   835                           ;./uart.h: 13:     {;./uart.h: 14:         SPBRG = (4000000 / (long) (64UL * baud)) - 1;
   836     0747  1283               	bcf	3,5	;RP0=0, select bank0
   837     0748  1303               	bcf	3,6	;RP1=0, select bank0
   838     0749  0826               	movf	UART_init@baud,w
   839     074A  00F9               	movwf	??_UART_init
   840     074B  0827               	movf	UART_init@baud+1,w
   841     074C  00FA               	movwf	??_UART_init+1
   842     074D  3000               	movlw	0
   843     074E  1BFA               	btfsc	??_UART_init+1,7
   844     074F  30FF               	movlw	255
   845     0750  00FB               	movwf	??_UART_init+2
   846     0751  00FC               	movwf	??_UART_init+3
   847     0752  3006               	movlw	6
   848     0753                     u405:
   849     0753  1003               	clrc
   850     0754  0DF9               	rlf	??_UART_init,f
   851     0755  0DFA               	rlf	??_UART_init+1,f
   852     0756  0DFB               	rlf	??_UART_init+2,f
   853     0757  0DFC               	rlf	??_UART_init+3,f
   854     0758                     u400:
   855     0758  3EFF               	addlw	-1
   856     0759  1D03               	skipz
   857     075A  2F53               	goto	u405
   858     075B  087C               	movf	??_UART_init+3,w
   859     075C  00F3               	movwf	___aldiv@divisor+3
   860     075D  087B               	movf	??_UART_init+2,w
   861     075E  00F2               	movwf	___aldiv@divisor+2
   862     075F  087A               	movf	??_UART_init+1,w
   863     0760  00F1               	movwf	___aldiv@divisor+1
   864     0761  0879               	movf	??_UART_init,w
   865     0762  00F0               	movwf	___aldiv@divisor
   866     0763  3000               	movlw	0
   867     0764  00F7               	movwf	___aldiv@dividend+3
   868     0765  303D               	movlw	61
   869     0766  00F6               	movwf	___aldiv@dividend+2
   870     0767  3009               	movlw	9
   871     0768  00F5               	movwf	___aldiv@dividend+1
   872     0769  3000               	movlw	0
   873     076A  00F4               	movwf	___aldiv@dividend
   874     076B  120A  118A  2695  120A  118A  	fcall	___aldiv
   875     0770  0870               	movf	?___aldiv,w
   876     0771  3EFF               	addlw	255
   877     0772  1683               	bsf	3,5	;RP0=1, select bank1
   878     0773  1303               	bcf	3,6	;RP1=0, select bank1
   879     0774  0099               	movwf	25	;volatile
   880     0775                     l865:
   881                           
   882                           ;./uart.h: 15:         TXSTAbits.BRGH = 0;
   883     0775  1118               	bcf	24,2	;volatile
   884                           
   885                           ;./uart.h: 16:     }
   886     0776  2FEB               	goto	l881
   887     0777                     l867:
   888     0777  1283               	bcf	3,5	;RP0=0, select bank0
   889     0778  1303               	bcf	3,6	;RP1=0, select bank0
   890     0779  0827               	movf	UART_init@baud+1,w
   891     077A  3A80               	xorlw	128
   892     077B  00FF               	movwf	btemp+1
   893     077C  30CB               	movlw	203
   894     077D  027F               	subwf	btemp+1,w
   895     077E  1D03               	skipz
   896     077F  2F82               	goto	u415
   897     0780  3001               	movlw	1
   898     0781  0226               	subwf	UART_init@baud,w
   899     0782                     u415:
   900     0782  1803               	skipnc
   901     0783  2F85               	goto	u411
   902     0784  2F86               	goto	u410
   903     0785                     u411:
   904     0785  2FB6               	goto	l873
   905     0786                     u410:
   906     0786                     l869:
   907                           
   908                           ;./uart.h: 18:     {;./uart.h: 19:         SPBRG = (4000000 / (long) (16UL * baud)) - 1;
   909     0786  1283               	bcf	3,5	;RP0=0, select bank0
   910     0787  1303               	bcf	3,6	;RP1=0, select bank0
   911     0788  0826               	movf	UART_init@baud,w
   912     0789  00F9               	movwf	??_UART_init
   913     078A  0827               	movf	UART_init@baud+1,w
   914     078B  00FA               	movwf	??_UART_init+1
   915     078C  3000               	movlw	0
   916     078D  1BFA               	btfsc	??_UART_init+1,7
   917     078E  30FF               	movlw	255
   918     078F  00FB               	movwf	??_UART_init+2
   919     0790  00FC               	movwf	??_UART_init+3
   920     0791  3004               	movlw	4
   921     0792                     u425:
   922     0792  1003               	clrc
   923     0793  0DF9               	rlf	??_UART_init,f
   924     0794  0DFA               	rlf	??_UART_init+1,f
   925     0795  0DFB               	rlf	??_UART_init+2,f
   926     0796  0DFC               	rlf	??_UART_init+3,f
   927     0797                     u420:
   928     0797  3EFF               	addlw	-1
   929     0798  1D03               	skipz
   930     0799  2F92               	goto	u425
   931     079A  087C               	movf	??_UART_init+3,w
   932     079B  00F3               	movwf	___aldiv@divisor+3
   933     079C  087B               	movf	??_UART_init+2,w
   934     079D  00F2               	movwf	___aldiv@divisor+2
   935     079E  087A               	movf	??_UART_init+1,w
   936     079F  00F1               	movwf	___aldiv@divisor+1
   937     07A0  0879               	movf	??_UART_init,w
   938     07A1  00F0               	movwf	___aldiv@divisor
   939     07A2  3000               	movlw	0
   940     07A3  00F7               	movwf	___aldiv@dividend+3
   941     07A4  303D               	movlw	61
   942     07A5  00F6               	movwf	___aldiv@dividend+2
   943     07A6  3009               	movlw	9
   944     07A7  00F5               	movwf	___aldiv@dividend+1
   945     07A8  3000               	movlw	0
   946     07A9  00F4               	movwf	___aldiv@dividend
   947     07AA  120A  118A  2695  120A  118A  	fcall	___aldiv
   948     07AF  0870               	movf	?___aldiv,w
   949     07B0  3EFF               	addlw	255
   950     07B1  1683               	bsf	3,5	;RP0=1, select bank1
   951     07B2  1303               	bcf	3,6	;RP1=0, select bank1
   952     07B3  0099               	movwf	25	;volatile
   953     07B4                     l871:
   954                           
   955                           ;./uart.h: 20:         TXSTAbits.BRGH = 1;
   956     07B4  1518               	bsf	24,2	;volatile
   957                           
   958                           ;./uart.h: 21:     }
   959     07B5  2FEB               	goto	l881
   960     07B6                     l873:
   961                           
   962                           ;./uart.h: 23:     {;./uart.h: 24:         SPBRG = (4000000 / (long) (4UL * baud)) - 1;
   963     07B6  1283               	bcf	3,5	;RP0=0, select bank0
   964     07B7  1303               	bcf	3,6	;RP1=0, select bank0
   965     07B8  0826               	movf	UART_init@baud,w
   966     07B9  00F9               	movwf	??_UART_init
   967     07BA  0827               	movf	UART_init@baud+1,w
   968     07BB  00FA               	movwf	??_UART_init+1
   969     07BC  3000               	movlw	0
   970     07BD  1BFA               	btfsc	??_UART_init+1,7
   971     07BE  30FF               	movlw	255
   972     07BF  00FB               	movwf	??_UART_init+2
   973     07C0  00FC               	movwf	??_UART_init+3
   974     07C1  3002               	movlw	2
   975     07C2                     u435:
   976     07C2  1003               	clrc
   977     07C3  0DF9               	rlf	??_UART_init,f
   978     07C4  0DFA               	rlf	??_UART_init+1,f
   979     07C5  0DFB               	rlf	??_UART_init+2,f
   980     07C6  0DFC               	rlf	??_UART_init+3,f
   981     07C7                     u430:
   982     07C7  3EFF               	addlw	-1
   983     07C8  1D03               	skipz
   984     07C9  2FC2               	goto	u435
   985     07CA  087C               	movf	??_UART_init+3,w
   986     07CB  00F3               	movwf	___aldiv@divisor+3
   987     07CC  087B               	movf	??_UART_init+2,w
   988     07CD  00F2               	movwf	___aldiv@divisor+2
   989     07CE  087A               	movf	??_UART_init+1,w
   990     07CF  00F1               	movwf	___aldiv@divisor+1
   991     07D0  0879               	movf	??_UART_init,w
   992     07D1  00F0               	movwf	___aldiv@divisor
   993     07D2  3000               	movlw	0
   994     07D3  00F7               	movwf	___aldiv@dividend+3
   995     07D4  303D               	movlw	61
   996     07D5  00F6               	movwf	___aldiv@dividend+2
   997     07D6  3009               	movlw	9
   998     07D7  00F5               	movwf	___aldiv@dividend+1
   999     07D8  3000               	movlw	0
  1000     07D9  00F4               	movwf	___aldiv@dividend
  1001     07DA  120A  118A  2695  120A  118A  	fcall	___aldiv
  1002     07DF  0870               	movf	?___aldiv,w
  1003     07E0  3EFF               	addlw	255
  1004     07E1  1683               	bsf	3,5	;RP0=1, select bank1
  1005     07E2  1303               	bcf	3,6	;RP1=0, select bank1
  1006     07E3  0099               	movwf	25	;volatile
  1007     07E4                     l875:
  1008                           
  1009                           ;./uart.h: 25:         TXSTAbits.BRGH = 1;
  1010     07E4  1518               	bsf	24,2	;volatile
  1011     07E5                     l877:
  1012                           
  1013                           ;./uart.h: 26:         BAUDCTLbits.BRG16 = 1;
  1014     07E5  1683               	bsf	3,5	;RP0=1, select bank3
  1015     07E6  1703               	bsf	3,6	;RP1=1, select bank3
  1016     07E7  1587               	bsf	7,3	;volatile
  1017     07E8                     l879:
  1018                           
  1019                           ;./uart.h: 27:         TXSTAbits.SYNC = 1;
  1020     07E8  1683               	bsf	3,5	;RP0=1, select bank1
  1021     07E9  1303               	bcf	3,6	;RP1=0, select bank1
  1022     07EA  1618               	bsf	24,4	;volatile
  1023     07EB                     l881:
  1024                           
  1025                           ;./uart.h: 31:     RCSTAbits.SPEN = 1;
  1026     07EB  1283               	bcf	3,5	;RP0=0, select bank0
  1027     07EC  1303               	bcf	3,6	;RP1=0, select bank0
  1028     07ED  1798               	bsf	24,7	;volatile
  1029     07EE                     l883:
  1030                           
  1031                           ;./uart.h: 32:     RCSTAbits.CREN = 1;
  1032     07EE  1618               	bsf	24,4	;volatile
  1033     07EF                     l67:
  1034     07EF  0008               	return
  1035     07F0                     __end_of_UART_init:
  1036                           
  1037                           	psect	text6
  1038     0695                     __ptext6:	
  1039 ;; *************** function ___aldiv *****************
  1040 ;; Defined at:
  1041 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\aldiv.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;  divisor         4    0[COMMON] long 
  1044 ;;  dividend        4    4[COMMON] long 
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;  quotient        4    2[BANK0 ] long 
  1047 ;;  sign            1    1[BANK0 ] unsigned char 
  1048 ;;  counter         1    0[BANK0 ] unsigned char 
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  4    0[COMMON] long 
  1051 ;; Registers used:
  1052 ;;		wreg, status,2, status,0, btemp+1
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1058 ;;      Params:         8       0       0       0       0
  1059 ;;      Locals:         0       6       0       0       0
  1060 ;;      Temps:          1       0       0       0       0
  1061 ;;      Totals:         9       6       0       0       0
  1062 ;;Total ram usage:       15 bytes
  1063 ;; Hardware stack levels used: 1
  1064 ;; This function calls:
  1065 ;;		Nothing
  1066 ;; This function is called by:
  1067 ;;		_UART_init
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071     0695                     ___aldiv:	
  1072                           ;psect for function ___aldiv
  1073                           
  1074     0695                     l799:	
  1075                           ;incstack = 0
  1076                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  1077                           
  1078     0695  1283               	bcf	3,5	;RP0=0, select bank0
  1079     0696  1303               	bcf	3,6	;RP1=0, select bank0
  1080     0697  01A1               	clrf	___aldiv@sign
  1081     0698                     l801:
  1082     0698  1FF3               	btfss	___aldiv@divisor+3,7
  1083     0699  2E9B               	goto	u261
  1084     069A  2E9C               	goto	u260
  1085     069B                     u261:
  1086     069B  2EA9               	goto	l240
  1087     069C                     u260:
  1088     069C                     l803:
  1089     069C  09F0               	comf	___aldiv@divisor,f
  1090     069D  09F1               	comf	___aldiv@divisor+1,f
  1091     069E  09F2               	comf	___aldiv@divisor+2,f
  1092     069F  09F3               	comf	___aldiv@divisor+3,f
  1093     06A0  0AF0               	incf	___aldiv@divisor,f
  1094     06A1  1903               	skipnz
  1095     06A2  0AF1               	incf	___aldiv@divisor+1,f
  1096     06A3  1903               	skipnz
  1097     06A4  0AF2               	incf	___aldiv@divisor+2,f
  1098     06A5  1903               	skipnz
  1099     06A6  0AF3               	incf	___aldiv@divisor+3,f
  1100     06A7  01A1               	clrf	___aldiv@sign
  1101     06A8  0AA1               	incf	___aldiv@sign,f
  1102     06A9                     l240:
  1103     06A9  1FF7               	btfss	___aldiv@dividend+3,7
  1104     06AA  2EAC               	goto	u271
  1105     06AB  2EAD               	goto	u270
  1106     06AC                     u271:
  1107     06AC  2EBC               	goto	l809
  1108     06AD                     u270:
  1109     06AD                     l805:
  1110     06AD  09F4               	comf	___aldiv@dividend,f
  1111     06AE  09F5               	comf	___aldiv@dividend+1,f
  1112     06AF  09F6               	comf	___aldiv@dividend+2,f
  1113     06B0  09F7               	comf	___aldiv@dividend+3,f
  1114     06B1  0AF4               	incf	___aldiv@dividend,f
  1115     06B2  1903               	skipnz
  1116     06B3  0AF5               	incf	___aldiv@dividend+1,f
  1117     06B4  1903               	skipnz
  1118     06B5  0AF6               	incf	___aldiv@dividend+2,f
  1119     06B6  1903               	skipnz
  1120     06B7  0AF7               	incf	___aldiv@dividend+3,f
  1121     06B8                     l807:
  1122     06B8  3001               	movlw	1
  1123     06B9  00FF               	movwf	btemp+1
  1124     06BA  087F               	movf	btemp+1,w
  1125     06BB  06A1               	xorwf	___aldiv@sign,f
  1126     06BC                     l809:
  1127     06BC  3000               	movlw	0
  1128     06BD  00A5               	movwf	___aldiv@quotient+3
  1129     06BE  3000               	movlw	0
  1130     06BF  00A4               	movwf	___aldiv@quotient+2
  1131     06C0  3000               	movlw	0
  1132     06C1  00A3               	movwf	___aldiv@quotient+1
  1133     06C2  3000               	movlw	0
  1134     06C3  00A2               	movwf	___aldiv@quotient
  1135     06C4                     l811:
  1136     06C4  0873               	movf	___aldiv@divisor+3,w
  1137     06C5  0472               	iorwf	___aldiv@divisor+2,w
  1138     06C6  0471               	iorwf	___aldiv@divisor+1,w
  1139     06C7  0470               	iorwf	___aldiv@divisor,w
  1140     06C8  1903               	skipnz
  1141     06C9  2ECB               	goto	u281
  1142     06CA  2ECC               	goto	u280
  1143     06CB                     u281:
  1144     06CB  2F19               	goto	l833
  1145     06CC                     u280:
  1146     06CC                     l813:
  1147     06CC  01A0               	clrf	___aldiv@counter
  1148     06CD  0AA0               	incf	___aldiv@counter,f
  1149     06CE  2EDC               	goto	l819
  1150     06CF                     l815:
  1151     06CF  3001               	movlw	1
  1152     06D0  00F8               	movwf	??___aldiv
  1153     06D1                     u295:
  1154     06D1  1003               	clrc
  1155     06D2  0DF0               	rlf	___aldiv@divisor,f
  1156     06D3  0DF1               	rlf	___aldiv@divisor+1,f
  1157     06D4  0DF2               	rlf	___aldiv@divisor+2,f
  1158     06D5  0DF3               	rlf	___aldiv@divisor+3,f
  1159     06D6  0BF8               	decfsz	??___aldiv,f
  1160     06D7  2ED1               	goto	u295
  1161     06D8                     l817:
  1162     06D8  3001               	movlw	1
  1163     06D9  00FF               	movwf	btemp+1
  1164     06DA  087F               	movf	btemp+1,w
  1165     06DB  07A0               	addwf	___aldiv@counter,f
  1166     06DC                     l819:
  1167     06DC  1FF3               	btfss	___aldiv@divisor+3,7
  1168     06DD  2EDF               	goto	u301
  1169     06DE  2EE0               	goto	u300
  1170     06DF                     u301:
  1171     06DF  2ECF               	goto	l815
  1172     06E0                     u300:
  1173     06E0                     l821:
  1174     06E0  3001               	movlw	1
  1175     06E1  00F8               	movwf	??___aldiv
  1176     06E2                     u315:
  1177     06E2  1003               	clrc
  1178     06E3  0DA2               	rlf	___aldiv@quotient,f
  1179     06E4  0DA3               	rlf	___aldiv@quotient+1,f
  1180     06E5  0DA4               	rlf	___aldiv@quotient+2,f
  1181     06E6  0DA5               	rlf	___aldiv@quotient+3,f
  1182     06E7  0BF8               	decfsz	??___aldiv,f
  1183     06E8  2EE2               	goto	u315
  1184     06E9                     l823:
  1185     06E9  0873               	movf	___aldiv@divisor+3,w
  1186     06EA  0277               	subwf	___aldiv@dividend+3,w
  1187     06EB  1D03               	skipz
  1188     06EC  2EF7               	goto	u325
  1189     06ED  0872               	movf	___aldiv@divisor+2,w
  1190     06EE  0276               	subwf	___aldiv@dividend+2,w
  1191     06EF  1D03               	skipz
  1192     06F0  2EF7               	goto	u325
  1193     06F1  0871               	movf	___aldiv@divisor+1,w
  1194     06F2  0275               	subwf	___aldiv@dividend+1,w
  1195     06F3  1D03               	skipz
  1196     06F4  2EF7               	goto	u325
  1197     06F5  0870               	movf	___aldiv@divisor,w
  1198     06F6  0274               	subwf	___aldiv@dividend,w
  1199     06F7                     u325:
  1200     06F7  1C03               	skipc
  1201     06F8  2EFA               	goto	u321
  1202     06F9  2EFB               	goto	u320
  1203     06FA                     u321:
  1204     06FA  2F0A               	goto	l829
  1205     06FB                     u320:
  1206     06FB                     l825:
  1207     06FB  0870               	movf	___aldiv@divisor,w
  1208     06FC  02F4               	subwf	___aldiv@dividend,f
  1209     06FD  0871               	movf	___aldiv@divisor+1,w
  1210     06FE  1C03               	skipc
  1211     06FF  0F71               	incfsz	___aldiv@divisor+1,w
  1212     0700  02F5               	subwf	___aldiv@dividend+1,f
  1213     0701  0872               	movf	___aldiv@divisor+2,w
  1214     0702  1C03               	skipc
  1215     0703  0F72               	incfsz	___aldiv@divisor+2,w
  1216     0704  02F6               	subwf	___aldiv@dividend+2,f
  1217     0705  0873               	movf	___aldiv@divisor+3,w
  1218     0706  1C03               	skipc
  1219     0707  0F73               	incfsz	___aldiv@divisor+3,w
  1220     0708  02F7               	subwf	___aldiv@dividend+3,f
  1221     0709                     l827:
  1222     0709  1422               	bsf	___aldiv@quotient,0
  1223     070A                     l829:
  1224     070A  3001               	movlw	1
  1225     070B                     u335:
  1226     070B  1003               	clrc
  1227     070C  0CF3               	rrf	___aldiv@divisor+3,f
  1228     070D  0CF2               	rrf	___aldiv@divisor+2,f
  1229     070E  0CF1               	rrf	___aldiv@divisor+1,f
  1230     070F  0CF0               	rrf	___aldiv@divisor,f
  1231     0710  3EFF               	addlw	-1
  1232     0711  1D03               	skipz
  1233     0712  2F0B               	goto	u335
  1234     0713                     l831:
  1235     0713  3001               	movlw	1
  1236     0714  02A0               	subwf	___aldiv@counter,f
  1237     0715  1D03               	btfss	3,2
  1238     0716  2F18               	goto	u341
  1239     0717  2F19               	goto	u340
  1240     0718                     u341:
  1241     0718  2EE0               	goto	l821
  1242     0719                     u340:
  1243     0719                     l833:
  1244     0719  0821               	movf	___aldiv@sign,w
  1245     071A  1903               	btfsc	3,2
  1246     071B  2F1D               	goto	u351
  1247     071C  2F1E               	goto	u350
  1248     071D                     u351:
  1249     071D  2F29               	goto	l837
  1250     071E                     u350:
  1251     071E                     l835:
  1252     071E  09A2               	comf	___aldiv@quotient,f
  1253     071F  09A3               	comf	___aldiv@quotient+1,f
  1254     0720  09A4               	comf	___aldiv@quotient+2,f
  1255     0721  09A5               	comf	___aldiv@quotient+3,f
  1256     0722  0AA2               	incf	___aldiv@quotient,f
  1257     0723  1903               	skipnz
  1258     0724  0AA3               	incf	___aldiv@quotient+1,f
  1259     0725  1903               	skipnz
  1260     0726  0AA4               	incf	___aldiv@quotient+2,f
  1261     0727  1903               	skipnz
  1262     0728  0AA5               	incf	___aldiv@quotient+3,f
  1263     0729                     l837:
  1264     0729  0825               	movf	___aldiv@quotient+3,w
  1265     072A  00F3               	movwf	?___aldiv+3
  1266     072B  0824               	movf	___aldiv@quotient+2,w
  1267     072C  00F2               	movwf	?___aldiv+2
  1268     072D  0823               	movf	___aldiv@quotient+1,w
  1269     072E  00F1               	movwf	?___aldiv+1
  1270     072F  0822               	movf	___aldiv@quotient,w
  1271     0730  00F0               	movwf	?___aldiv
  1272     0731                     l250:
  1273     0731  0008               	return
  1274     0732                     __end_of___aldiv:
  1275                           
  1276                           	psect	text7
  1277     05FE                     __ptext7:	
  1278 ;; *************** function _UART_RxChar *****************
  1279 ;; Defined at:
  1280 ;;		line 43 in file "./uart.h"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;		None
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;		None
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      unsigned char 
  1287 ;; Registers used:
  1288 ;;		wreg
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1294 ;;      Params:         0       0       0       0       0
  1295 ;;      Locals:         0       0       0       0       0
  1296 ;;      Temps:          0       0       0       0       0
  1297 ;;      Totals:         0       0       0       0       0
  1298 ;;Total ram usage:        0 bytes
  1299 ;; Hardware stack levels used: 1
  1300 ;; This function calls:
  1301 ;;		Nothing
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307     05FE                     _UART_RxChar:	
  1308                           ;psect for function _UART_RxChar
  1309                           
  1310     05FE                     l885:	
  1311                           ;incstack = 0
  1312                           ; Regs used in _UART_RxChar: [wreg]
  1313                           
  1314     05FE                     l76:	
  1315                           ;./uart.h: 44:     while (RCIF == 0);
  1316                           
  1317     05FE  1283               	bcf	3,5	;RP0=0, select bank0
  1318     05FF  1303               	bcf	3,6	;RP1=0, select bank0
  1319     0600  1E8C               	btfss	12,5	;volatile
  1320     0601  2E03               	goto	u441
  1321     0602  2E04               	goto	u440
  1322     0603                     u441:
  1323     0603  2DFE               	goto	l76
  1324     0604                     u440:
  1325     0604                     l78:
  1326                           
  1327                           ;./uart.h: 45:     RCIF = 0;
  1328     0604  128C               	bcf	12,5	;volatile
  1329     0605                     l887:
  1330                           
  1331                           ;./uart.h: 46:     return (RCREG);
  1332     0605  081A               	movf	26,w	;volatile
  1333     0606                     l79:
  1334     0606  0008               	return
  1335     0607                     __end_of_UART_RxChar:
  1336     007E                     btemp	set	126	;btemp
  1337     007E                     wtemp0	set	126
  1338                           
  1339                           	psect	config
  1340                           
  1341                           ;Config register CONFIG1 @ 0x2007
  1342                           ;	Oscillator Selection bits
  1343                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1344                           ;	Watchdog Timer Enable bit
  1345                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1346                           ;	Power-up Timer Enable bit
  1347                           ;	PWRTE = OFF, PWRT disabled
  1348                           ;	RE3/MCLR pin function select bit
  1349                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1350                           ;	Code Protection bit
  1351                           ;	CP = OFF, Program memory code protection is disabled
  1352                           ;	Data Code Protection bit
  1353                           ;	CPD = OFF, Data memory code protection is disabled
  1354                           ;	Brown Out Reset Selection bits
  1355                           ;	BOREN = OFF, BOR disabled
  1356                           ;	Internal External Switchover bit
  1357                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1358                           ;	Fail-Safe Clock Monitor Enabled bit
  1359                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1360                           ;	Low Voltage Programming Enable bit
  1361                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1362                           ;	In-Circuit Debugger Mode bit
  1363                           ;	DEBUG = 0x1, unprogrammed default
  1364     2007                     	org	8199
  1365     2007  20D2               	dw	8402
  1366                           
  1367                           ;Config register CONFIG2 @ 0x2008
  1368                           ;	Brown-out Reset Selection bit
  1369                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1370                           ;	Flash Program Memory Self Write Enable bits
  1371                           ;	WRT = OFF, Write protection off
  1372     2008                     	org	8200
  1373     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     11      13
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_UART_init
    _lcd_setCursor->_lcd_command
    _lcd_init->_lcd_command
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1265
                                              8 BANK0      3     3      0
                        _UART_RxChar
                          _UART_init
                           _lcd_data
                           _lcd_init
                      _lcd_setCursor
 ---------------------------------------------------------------------------------
 (1) _lcd_setCursor                                        2     1      1     208
                                              1 COMMON     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      22
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_data                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            6     4      2     942
                                              9 COMMON     4     4      0
                                              6 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     756
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_RxChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_RxChar
   _UART_init
     ___aldiv
   _lcd_data
   _lcd_init
     _lcd_command
   _lcd_setCursor
     _lcd_command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      B       D       5       16.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1A      12        0.0%
ABS                  0      0      1A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat Jun 08 17:04:04 2024

           lcd_data@Data 0070           ?_lcd_setCursor 0071                       l31 061A  
                     l34 0610                       l60 064D                       l37 062D  
                     l67 07EF                       l76 05FE                       l78 0604  
                     l79 0606                      l240 06A9                      l250 0731  
                    l801 0698                      l811 06C4                      l803 069C  
                    l821 06E0                      l813 06CC                      l805 06AD  
                    l831 0713                      l823 06E9                      l815 06CF  
                    l807 06B8                      l825 06FB                      l817 06D8  
                    l833 0719                      l809 06BC                      l841 0608  
                    l835 071E                      l827 0709                      l819 06DC  
                    l843 060D                      l851 0635                      l931 065D  
                    l923 064E                      l837 0729                      l829 070A  
                    l861 0738                      l845 060F                      l853 063A  
                    l941 066E                      l933 0662                      l925 0652  
                    l871 07B4                      l863 0747                      l847 061B  
                    l855 0641                      l943 0676                      l935 066A  
                    l927 065D                      l873 07B6                      l881 07EB  
                    l865 0775                      l793 0612                      l857 0646  
                    l849 062F                      l945 0683                      l929 065D  
                    l883 07EE                      l875 07E4                      l867 0777  
                    l859 0732                      l795 0617                      l947 068B  
                    l885 05FE                      l877 07E5                      l869 0786  
                    l797 0619                      l887 0605                      l799 0695  
                    l879 07E8                      u300 06E0                      u301 06DF  
                    u320 06FB                      u400 0758                      u321 06FA  
                    u410 0786                      u315 06E2                      u411 0785  
                    u340 0719                      u260 069C                      u420 0797  
                    u341 0718                      u325 06F7                      u261 069B  
                    u405 0753                      u350 071E                      u270 06AD  
                    u430 07C7                      u351 071D                      u335 070B  
                    u271 06AC                      u415 0782                      u440 0604  
                    u280 06CC                      u360 0635                      u441 0603  
                    u281 06CB                      u425 0792                      u361 0634  
                    u370 063A                      u435 07C2                      u371 0639  
                    u380 0646                      u381 0645                      u390 0747  
                    u295 06D1                      u391 0746                      u490 0683  
                    u395 0743                      u491 0682                      u495 067F  
                   _RCIF 0065                     _TXIF 0064                     _main 064E  
                   btemp 007E                     start 0000          __end_of___aldiv 0732  
                  ?_main 0070                    _RCREG 001A                    _SPBRG 0099  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  _TXREG 0019                    main@i 0029                    main@t 0028  
             __XTAL_FREQ 002B                    status 0003                    wtemp0 007E  
        __initialization 07F0          ??_lcd_setCursor 0072             __end_of_main 0695  
                 ??_main 007D           lcd_command@cmd 0070             ?_UART_RxChar 0070  
       __end_of_lcd_data 0611         __end_of_lcd_init 062E                ??___aldiv 0078  
      __end_of_UART_init 07F0  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK0 05FC           lcd_setCursor@x 0072           lcd_setCursor@y 0071  
             __pmaintext 064E                ?_lcd_data 0070                ?_lcd_init 0070  
                ___aldiv 0695                  __ptext1 062E                  __ptext2 061B  
                __ptext3 0611                  __ptext4 0607                  __ptext5 0732  
                __ptext6 0695                  __ptext7 05FE         ___aldiv@dividend 0074  
             ??_lcd_data 0070               ??_lcd_init 0071     end_of_initialization 07FC  
              _RCSTAbits 0018         ___aldiv@quotient 0022    __end_of_lcd_setCursor 064E  
              _UART_init 0732                _PORTCbits 0007                _TRISCbits 0087  
              _TXSTAbits 0098            ??_lcd_command 0070              _BAUDCTLbits 0187  
             ?_UART_init 0026      start_initialization 07F0      __end_of_lcd_command 061B  
            __pdataBANK0 002B                ___latbits 0002            __pcstackBANK0 0020  
               ?___aldiv 0070              ??_UART_init 0079          ___aldiv@divisor 0070  
        ___aldiv@counter 0020            ??_UART_RxChar 0070              _lcd_command 0611  
          UART_init@baud 0026      __end_of_UART_RxChar 0607                 _lcd_data 0607  
               _lcd_init 061B              _UART_RxChar 05FE            _lcd_setCursor 062E  
           ___aldiv@sign 0021             ?_lcd_command 0070  
