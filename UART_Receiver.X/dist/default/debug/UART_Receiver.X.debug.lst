

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat Jun 08 16:28:51 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0088                     	;# 
    92     0089                     	;# 
    93     008C                     	;# 
    94     008D                     	;# 
    95     008E                     	;# 
    96     008F                     	;# 
    97     0090                     	;# 
    98     0091                     	;# 
    99     0092                     	;# 
   100     0093                     	;# 
   101     0093                     	;# 
   102     0093                     	;# 
   103     0094                     	;# 
   104     0095                     	;# 
   105     0096                     	;# 
   106     0097                     	;# 
   107     0098                     	;# 
   108     0099                     	;# 
   109     009A                     	;# 
   110     009B                     	;# 
   111     009C                     	;# 
   112     009D                     	;# 
   113     009E                     	;# 
   114     009F                     	;# 
   115     0105                     	;# 
   116     0107                     	;# 
   117     0108                     	;# 
   118     0109                     	;# 
   119     010C                     	;# 
   120     010C                     	;# 
   121     010D                     	;# 
   122     010E                     	;# 
   123     010F                     	;# 
   124     0185                     	;# 
   125     0187                     	;# 
   126     0188                     	;# 
   127     0189                     	;# 
   128     018C                     	;# 
   129     018D                     	;# 
   130     0000                     	;# 
   131     0001                     	;# 
   132     0002                     	;# 
   133     0003                     	;# 
   134     0004                     	;# 
   135     0005                     	;# 
   136     0006                     	;# 
   137     0007                     	;# 
   138     0008                     	;# 
   139     0009                     	;# 
   140     000A                     	;# 
   141     000B                     	;# 
   142     000C                     	;# 
   143     000D                     	;# 
   144     000E                     	;# 
   145     000E                     	;# 
   146     000F                     	;# 
   147     0010                     	;# 
   148     0011                     	;# 
   149     0012                     	;# 
   150     0013                     	;# 
   151     0014                     	;# 
   152     0015                     	;# 
   153     0015                     	;# 
   154     0016                     	;# 
   155     0017                     	;# 
   156     0018                     	;# 
   157     0019                     	;# 
   158     001A                     	;# 
   159     001B                     	;# 
   160     001B                     	;# 
   161     001C                     	;# 
   162     001D                     	;# 
   163     001E                     	;# 
   164     001F                     	;# 
   165     0081                     	;# 
   166     0085                     	;# 
   167     0086                     	;# 
   168     0087                     	;# 
   169     0088                     	;# 
   170     0089                     	;# 
   171     008C                     	;# 
   172     008D                     	;# 
   173     008E                     	;# 
   174     008F                     	;# 
   175     0090                     	;# 
   176     0091                     	;# 
   177     0092                     	;# 
   178     0093                     	;# 
   179     0093                     	;# 
   180     0093                     	;# 
   181     0094                     	;# 
   182     0095                     	;# 
   183     0096                     	;# 
   184     0097                     	;# 
   185     0098                     	;# 
   186     0099                     	;# 
   187     009A                     	;# 
   188     009B                     	;# 
   189     009C                     	;# 
   190     009D                     	;# 
   191     009E                     	;# 
   192     009F                     	;# 
   193     0105                     	;# 
   194     0107                     	;# 
   195     0108                     	;# 
   196     0109                     	;# 
   197     010C                     	;# 
   198     010C                     	;# 
   199     010D                     	;# 
   200     010E                     	;# 
   201     010F                     	;# 
   202     0185                     	;# 
   203     0187                     	;# 
   204     0188                     	;# 
   205     0189                     	;# 
   206     018C                     	;# 
   207     018D                     	;# 
   208                           
   209                           	psect	idataCOMMON
   210     0756                     __pidataCOMMON:
   211                           
   212                           ;initializer for __XTAL_FREQ
   213     0756  3400               	retlw	0
   214     0757  3409               	retlw	9
   215     001A                     _RCREG	set	26
   216     0019                     _TXREG	set	25
   217     0018                     _RCSTAbits	set	24
   218     0008                     _PORTD	set	8
   219     0007                     _PORTCbits	set	7
   220     0065                     _RCIF	set	101
   221     0064                     _TXIF	set	100
   222     0088                     _TRISD	set	136
   223     0087                     _TRISC	set	135
   224     0099                     _SPBRG	set	153
   225     0098                     _TXSTAbits	set	152
   226     0087                     _TRISCbits	set	135
   227     0187                     _BAUDCTLbits	set	391
   228                           
   229                           	psect	strings
   230     0003                     __pstrings:
   231     0003                     stringtab:
   232     0003                     __stringtab:
   233     0003                     stringcode:	
   234                           ;	String table - string pointers are 1 byte each
   235                           
   236     0003                     stringdir:
   237     0003  3000               	movlw	high stringdir
   238     0004  008A               	movwf	10
   239     0005  0804               	movf	4,w
   240     0006  0A84               	incf	4,f
   241     0007  0782               	addwf	2,f
   242     0008                     __stringbase:
   243     0008  3400               	retlw	0
   244     0009                     __end_of__stringtab:
   245     0009                     STR_1:
   246     0009  3474               	retlw	116	;'t'
   247     000A  3472               	retlw	114	;'r'
   248     000B  3461               	retlw	97	;'a'
   249     000C  3400               	retlw	0
   250                           
   251                           	psect	cinit
   252     07F0                     start_initialization:	
   253                           ; #config settings
   254                           
   255     07F0                     __initialization:
   256                           
   257                           ; Initialize objects allocated to COMMON
   258     07F0  120A  118A  2756  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   259     07F5  00F6               	movwf	__pdataCOMMON& (0+127)
   260     07F6  120A  118A  2757  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   261     07FB  00F7               	movwf	(__pdataCOMMON+1)& (0+127)
   262     07FC                     end_of_initialization:	
   263                           ;End of C runtime variable initialization code
   264                           
   265     07FC                     __end_of__initialization:
   266     07FC  0183               	clrf	3
   267     07FD  120A  118A  2F8B   	ljmp	_main	;jump to C main() function
   268                           
   269                           	psect	dataCOMMON
   270     0076                     __pdataCOMMON:
   271     0076                     __XTAL_FREQ:
   272     0076                     	ds	2
   273                           
   274                           	psect	cstackCOMMON
   275     0070                     __pcstackCOMMON:
   276     0070                     ?_lcd_command:
   277     0070                     ??_lcd_command:	
   278                           ; 1 bytes @ 0x0
   279                           
   280     0070                     ?_lcd_data:	
   281                           ; 1 bytes @ 0x0
   282                           
   283     0070                     ??_lcd_data:	
   284                           ; 1 bytes @ 0x0
   285                           
   286     0070                     ?_lcd_init:	
   287                           ; 1 bytes @ 0x0
   288                           
   289     0070                     ?_lcd_string:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     0070                     ?_main:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     0070                     lcd_command@cmd:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0070                     lcd_data@Data:	
   299                           ; 1 bytes @ 0x0
   300                           
   301                           
   302                           ; 1 bytes @ 0x0
   303     0070                     	ds	1
   304     0071                     ??_lcd_init:
   305     0071                     ??_lcd_string:	
   306                           ; 1 bytes @ 0x1
   307                           
   308     0071                     ?_lcd_setCursor:	
   309                           ; 1 bytes @ 0x1
   310                           
   311     0071                     lcd_string@string_data:	
   312                           ; 1 bytes @ 0x1
   313                           
   314     0071                     lcd_setCursor@y:	
   315                           ; 1 bytes @ 0x1
   316                           
   317                           
   318                           ; 1 bytes @ 0x1
   319     0071                     	ds	1
   320     0072                     ??_lcd_setCursor:
   321     0072                     lcd_setCursor@x:	
   322                           ; 1 bytes @ 0x2
   323                           
   324     0072                     lcd_string@i:	
   325                           ; 1 bytes @ 0x2
   326                           
   327                           
   328                           ; 2 bytes @ 0x2
   329     0072                     	ds	2
   330     0074                     ??_main:
   331     0074                     main@j:	
   332                           ; 1 bytes @ 0x4
   333                           
   334                           
   335                           ; 2 bytes @ 0x4
   336     0074                     	ds	2
   337                           
   338                           	psect	maintext
   339     078B                     __pmaintext:	
   340 ;;
   341 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   342 ;;
   343 ;; *************** function _main *****************
   344 ;; Defined at:
   345 ;;		line 25 in file "newmain.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;		None
   348 ;; Auto vars:     Size  Location     Type
   349 ;;  j               2    4[COMMON] int 
   350 ;;  i               2    0        int 
   351 ;;  t               1    0        unsigned char 
   352 ;; Return value:  Size  Location     Type
   353 ;;                  1    wreg      void 
   354 ;; Registers used:
   355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   356 ;; Tracked objects:
   357 ;;		On entry : B00/0
   358 ;;		On exit  : 0/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   361 ;;      Params:         0       0       0       0       0
   362 ;;      Locals:         2       0       0       0       0
   363 ;;      Temps:          0       0       0       0       0
   364 ;;      Totals:         2       0       0       0       0
   365 ;;Total ram usage:        2 bytes
   366 ;; Hardware stack levels required when called: 2
   367 ;; This function calls:
   368 ;;		_lcd_init
   369 ;;		_lcd_setCursor
   370 ;;		_lcd_string
   371 ;; This function is called by:
   372 ;;		Startup code after reset
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376     078B                     _main:	
   377                           ;psect for function _main
   378                           
   379     078B                     l1144:	
   380                           ;incstack = 0
   381                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   382                           
   383                           
   384                           ;newmain.c: 26:     TRISC = 0;
   385     078B  1683               	bsf	3,5	;RP0=1, select bank1
   386     078C  1303               	bcf	3,6	;RP1=0, select bank1
   387     078D  0187               	clrf	7	;volatile
   388                           
   389                           ;newmain.c: 27:     TRISD = 0;
   390     078E  0188               	clrf	8	;volatile
   391     078F  01F4               	clrf	main@j
   392     0790  01F5               	clrf	main@j+1
   393     0791                     l1146:
   394                           
   395                           ;newmain.c: 30:     char t;;newmain.c: 31:     lcd_init();
   396     0791  120A  118A  2772  120A  118A  	fcall	_lcd_init
   397     0796                     l1148:
   398                           
   399                           ;newmain.c: 34:         lcd_setCursor(0,1);
   400     0796  01F1               	clrf	lcd_setCursor@y
   401     0797  0AF1               	incf	lcd_setCursor@y,f
   402     0798  3000               	movlw	0
   403     0799  120A  118A  27A8  120A  118A  	fcall	_lcd_setCursor
   404     079E                     l1150:
   405                           
   406                           ;newmain.c: 36:         lcd_string("tra");
   407     079E  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   408     079F  120A  118A  27C9  120A  118A  	fcall	_lcd_string
   409     07A4  2F96               	goto	l1148
   410     07A5  120A  118A  2800   	ljmp	start
   411     07A8                     __end_of_main:
   412                           
   413                           	psect	text1
   414     07C9                     __ptext1:	
   415 ;; *************** function _lcd_string *****************
   416 ;; Defined at:
   417 ;;		line 41 in file "./lcd_8bit.h"
   418 ;; Parameters:    Size  Location     Type
   419 ;;  string_data     1    wreg     PTR unsigned char 
   420 ;;		 -> STR_1(4), 
   421 ;; Auto vars:     Size  Location     Type
   422 ;;  string_data     1    1[COMMON] PTR unsigned char 
   423 ;;		 -> STR_1(4), 
   424 ;;  i               2    2[COMMON] int 
   425 ;; Return value:  Size  Location     Type
   426 ;;                  1    wreg      void 
   427 ;; Registers used:
   428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   434 ;;      Params:         0       0       0       0       0
   435 ;;      Locals:         3       0       0       0       0
   436 ;;      Temps:          0       0       0       0       0
   437 ;;      Totals:         3       0       0       0       0
   438 ;;Total ram usage:        3 bytes
   439 ;; Hardware stack levels used: 1
   440 ;; Hardware stack levels required when called: 1
   441 ;; This function calls:
   442 ;;		_lcd_data
   443 ;; This function is called by:
   444 ;;		_main
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448     07C9                     _lcd_string:	
   449                           ;psect for function _lcd_string
   450                           
   451                           
   452                           ;incstack = 0
   453                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   454                           ;lcd_string@string_data stored from wreg
   455     07C9  00F1               	movwf	lcd_string@string_data
   456     07CA                     l1126:
   457                           
   458                           ;./lcd_8bit.h: 42:     int i = 0;
   459     07CA  01F2               	clrf	lcd_string@i
   460     07CB  01F3               	clrf	lcd_string@i+1
   461                           
   462                           ;./lcd_8bit.h: 43:     for (i = 0; string_data[i] != 0; i++) {
   463     07CC  01F2               	clrf	lcd_string@i
   464     07CD  01F3               	clrf	lcd_string@i+1
   465     07CE  2FE2               	goto	l1132
   466     07CF                     l1128:
   467                           
   468                           ;./lcd_8bit.h: 44:         lcd_data(string_data[i]);
   469     07CF  0872               	movf	lcd_string@i,w
   470     07D0  0771               	addwf	lcd_string@string_data,w
   471     07D1  0084               	movwf	4
   472     07D2  120A  118A  2003  120A  118A  	fcall	stringdir
   473     07D7  120A  118A  2765  120A  118A  	fcall	_lcd_data
   474     07DC                     l1130:
   475                           
   476                           ;./lcd_8bit.h: 45:     }
   477     07DC  3001               	movlw	1
   478     07DD  07F2               	addwf	lcd_string@i,f
   479     07DE  1803               	skipnc
   480     07DF  0AF3               	incf	lcd_string@i+1,f
   481     07E0  3000               	movlw	0
   482     07E1  07F3               	addwf	lcd_string@i+1,f
   483     07E2                     l1132:
   484     07E2  0872               	movf	lcd_string@i,w
   485     07E3  0771               	addwf	lcd_string@string_data,w
   486     07E4  0084               	movwf	4
   487     07E5  120A  118A  2003  120A  118A  	fcall	stringdir
   488     07EA  3A00               	xorlw	0
   489     07EB  1D03               	skipz
   490     07EC  2FEE               	goto	u1081
   491     07ED  2FEF               	goto	u1080
   492     07EE                     u1081:
   493     07EE  2FCF               	goto	l1128
   494     07EF                     u1080:
   495     07EF                     l45:
   496     07EF  0008               	return
   497     07F0                     __end_of_lcd_string:
   498                           
   499                           	psect	text2
   500     0765                     __ptext2:	
   501 ;; *************** function _lcd_data *****************
   502 ;; Defined at:
   503 ;;		line 24 in file "./lcd_8bit.h"
   504 ;; Parameters:    Size  Location     Type
   505 ;;  Data            1    wreg     unsigned char 
   506 ;; Auto vars:     Size  Location     Type
   507 ;;  Data            1    0[COMMON] unsigned char 
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   517 ;;      Params:         0       0       0       0       0
   518 ;;      Locals:         1       0       0       0       0
   519 ;;      Temps:          0       0       0       0       0
   520 ;;      Totals:         1       0       0       0       0
   521 ;;Total ram usage:        1 bytes
   522 ;; Hardware stack levels used: 1
   523 ;; This function calls:
   524 ;;		Nothing
   525 ;; This function is called by:
   526 ;;		_lcd_string
   527 ;;		_lcd_number
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531     0765                     _lcd_data:	
   532                           ;psect for function _lcd_data
   533                           
   534                           
   535                           ;incstack = 0
   536                           ; Regs used in _lcd_data: [wreg]
   537                           ;lcd_data@Data stored from wreg
   538     0765  00F0               	movwf	lcd_data@Data
   539     0766                     l642:
   540                           
   541                           ;./lcd_8bit.h: 25:     PORTCbits.RC0 = 1;
   542     0766  1283               	bcf	3,5	;RP0=0, select bank0
   543     0767  1303               	bcf	3,6	;RP1=0, select bank0
   544     0768  1407               	bsf	7,0	;volatile
   545                           
   546                           ;./lcd_8bit.h: 26:     PORTCbits.RC1 = 0;
   547     0769  1087               	bcf	7,1	;volatile
   548                           
   549                           ;./lcd_8bit.h: 27:     PORTCbits.RC2 = 1;
   550     076A  1507               	bsf	7,2	;volatile
   551     076B                     l644:
   552                           
   553                           ;./lcd_8bit.h: 28:     PORTD = Data;
   554     076B  0870               	movf	lcd_data@Data,w
   555     076C  0088               	movwf	8	;volatile
   556     076D                     l646:
   557                           
   558                           ;./lcd_8bit.h: 29:     PORTCbits.RC2 = 0;
   559     076D  1107               	bcf	7,2	;volatile
   560     076E                     l648:
   561                           
   562                           ;./lcd_8bit.h: 30:     _delay((unsigned long)((10)*(_XTAL_FREQ/4000.0)));
   563     076E  2F6F               	nop2	;2 cycle nop
   564     076F  2F70               	nop2	;2 cycle nop
   565     0770  0000               	nop
   566     0771                     l36:
   567     0771  0008               	return
   568     0772                     __end_of_lcd_data:
   569                           
   570                           	psect	text3
   571     07A8                     __ptext3:	
   572 ;; *************** function _lcd_setCursor *****************
   573 ;; Defined at:
   574 ;;		line 71 in file "./lcd_8bit.h"
   575 ;; Parameters:    Size  Location     Type
   576 ;;  x               1    wreg     unsigned char 
   577 ;;  y               1    1[COMMON] unsigned char 
   578 ;; Auto vars:     Size  Location     Type
   579 ;;  x               1    2[COMMON] unsigned char 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  1    wreg      void 
   582 ;; Registers used:
   583 ;;		wreg, status,2, status,0, pclath, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   589 ;;      Params:         1       0       0       0       0
   590 ;;      Locals:         1       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0
   592 ;;      Totals:         2       0       0       0       0
   593 ;;Total ram usage:        2 bytes
   594 ;; Hardware stack levels used: 1
   595 ;; Hardware stack levels required when called: 1
   596 ;; This function calls:
   597 ;;		_lcd_command
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603     07A8                     _lcd_setCursor:	
   604                           ;psect for function _lcd_setCursor
   605                           
   606                           
   607                           ;incstack = 0
   608                           ; Regs used in _lcd_setCursor: [wreg+status,2+status,0+pclath+cstack]
   609                           ;lcd_setCursor@x stored from wreg
   610     07A8  00F2               	movwf	lcd_setCursor@x
   611     07A9                     l1134:
   612                           
   613                           ;./lcd_8bit.h: 71: void lcd_setCursor(unsigned char x, unsigned char y);./lcd_8bit.h: 72
      +                          : {;./lcd_8bit.h: 73:     if (x >= 0 && x < 16) {
   614     07A9  3010               	movlw	16
   615     07AA  0272               	subwf	lcd_setCursor@x,w
   616     07AB  1803               	skipnc
   617     07AC  2FAE               	goto	u1091
   618     07AD  2FAF               	goto	u1090
   619     07AE                     u1091:
   620     07AE  2FC8               	goto	l63
   621     07AF                     u1090:
   622     07AF                     l1136:
   623                           
   624                           ;./lcd_8bit.h: 74:         if (y == 0)
   625     07AF  0871               	movf	lcd_setCursor@y,w
   626     07B0  1D03               	btfss	3,2
   627     07B1  2FB3               	goto	u1101
   628     07B2  2FB4               	goto	u1100
   629     07B3                     u1101:
   630     07B3  2FBC               	goto	l1140
   631     07B4                     u1100:
   632     07B4                     l1138:
   633                           
   634                           ;./lcd_8bit.h: 75:         {;./lcd_8bit.h: 76:             lcd_command(0x80 + x);
   635     07B4  0872               	movf	lcd_setCursor@x,w
   636     07B5  3E80               	addlw	128
   637     07B6  120A  118A  2758  120A  118A  	fcall	_lcd_command
   638                           
   639                           ;./lcd_8bit.h: 78:         } else if (y == 1)
   640     07BB  2FC8               	goto	l63
   641     07BC                     l1140:
   642     07BC  0371               	decf	lcd_setCursor@y,w
   643     07BD  1D03               	btfss	3,2
   644     07BE  2FC0               	goto	u1111
   645     07BF  2FC1               	goto	u1110
   646     07C0                     u1111:
   647     07C0  2FC8               	goto	l63
   648     07C1                     u1110:
   649     07C1                     l1142:
   650                           
   651                           ;./lcd_8bit.h: 79:         {;./lcd_8bit.h: 80:             lcd_command(0xC0 + x);
   652     07C1  0872               	movf	lcd_setCursor@x,w
   653     07C2  3EC0               	addlw	192
   654     07C3  120A  118A  2758  120A  118A  	fcall	_lcd_command
   655     07C8                     l63:
   656     07C8  0008               	return
   657     07C9                     __end_of_lcd_setCursor:
   658                           
   659                           	psect	text4
   660     0772                     __ptext4:	
   661 ;; *************** function _lcd_init *****************
   662 ;; Defined at:
   663 ;;		line 33 in file "./lcd_8bit.h"
   664 ;; Parameters:    Size  Location     Type
   665 ;;		None
   666 ;; Auto vars:     Size  Location     Type
   667 ;;		None
   668 ;; Return value:  Size  Location     Type
   669 ;;                  1    wreg      void 
   670 ;; Registers used:
   671 ;;		wreg, status,2, status,0, pclath, cstack
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   677 ;;      Params:         0       0       0       0       0
   678 ;;      Locals:         0       0       0       0       0
   679 ;;      Temps:          0       0       0       0       0
   680 ;;      Totals:         0       0       0       0       0
   681 ;;Total ram usage:        0 bytes
   682 ;; Hardware stack levels used: 1
   683 ;; Hardware stack levels required when called: 1
   684 ;; This function calls:
   685 ;;		_lcd_command
   686 ;; This function is called by:
   687 ;;		_main
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691     0772                     _lcd_init:	
   692                           ;psect for function _lcd_init
   693                           
   694     0772                     l650:	
   695                           ;incstack = 0
   696                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   697                           
   698                           
   699                           ;./lcd_8bit.h: 34:     lcd_command(0x0C);
   700     0772  300C               	movlw	12
   701     0773  120A  118A  2758  120A  118A  	fcall	_lcd_command
   702                           
   703                           ;./lcd_8bit.h: 35:     lcd_command(0x38);
   704     0778  3038               	movlw	56
   705     0779  120A  118A  2758  120A  118A  	fcall	_lcd_command
   706                           
   707                           ;./lcd_8bit.h: 36:     lcd_command(0x01);
   708     077E  3001               	movlw	1
   709     077F  120A  118A  2758  120A  118A  	fcall	_lcd_command
   710                           
   711                           ;./lcd_8bit.h: 37:     lcd_command(0x80);
   712     0784  3080               	movlw	128
   713     0785  120A  118A  2758  120A  118A  	fcall	_lcd_command
   714     078A                     l39:
   715     078A  0008               	return
   716     078B                     __end_of_lcd_init:
   717                           
   718                           	psect	text5
   719     0758                     __ptext5:	
   720 ;; *************** function _lcd_command *****************
   721 ;; Defined at:
   722 ;;		line 15 in file "./lcd_8bit.h"
   723 ;; Parameters:    Size  Location     Type
   724 ;;  cmd             1    wreg     unsigned char 
   725 ;; Auto vars:     Size  Location     Type
   726 ;;  cmd             1    0[COMMON] unsigned char 
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      void 
   729 ;; Registers used:
   730 ;;		wreg
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   736 ;;      Params:         0       0       0       0       0
   737 ;;      Locals:         1       0       0       0       0
   738 ;;      Temps:          0       0       0       0       0
   739 ;;      Totals:         1       0       0       0       0
   740 ;;Total ram usage:        1 bytes
   741 ;; Hardware stack levels used: 1
   742 ;; This function calls:
   743 ;;		Nothing
   744 ;; This function is called by:
   745 ;;		_lcd_init
   746 ;;		_lcd_setCursor
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750     0758                     _lcd_command:	
   751                           ;psect for function _lcd_command
   752                           
   753                           
   754                           ;incstack = 0
   755                           ; Regs used in _lcd_command: [wreg]
   756                           ;lcd_command@cmd stored from wreg
   757     0758  00F0               	movwf	lcd_command@cmd
   758     0759                     l634:
   759                           
   760                           ;./lcd_8bit.h: 16:     PORTCbits.RC0 = 0x00;
   761     0759  1283               	bcf	3,5	;RP0=0, select bank0
   762     075A  1303               	bcf	3,6	;RP1=0, select bank0
   763     075B  1007               	bcf	7,0	;volatile
   764                           
   765                           ;./lcd_8bit.h: 17:     PORTCbits.RC1 = 0x00;
   766     075C  1087               	bcf	7,1	;volatile
   767                           
   768                           ;./lcd_8bit.h: 18:     PORTCbits.RC2 = 0x01;
   769     075D  1507               	bsf	7,2	;volatile
   770     075E                     l636:
   771                           
   772                           ;./lcd_8bit.h: 19:     PORTD = cmd;
   773     075E  0870               	movf	lcd_command@cmd,w
   774     075F  0088               	movwf	8	;volatile
   775     0760                     l638:
   776                           
   777                           ;./lcd_8bit.h: 20:     PORTCbits.RC2 = 0;
   778     0760  1107               	bcf	7,2	;volatile
   779     0761                     l640:
   780                           
   781                           ;./lcd_8bit.h: 21:     _delay((unsigned long)((10)*(_XTAL_FREQ/4000.0)));
   782     0761  2F62               	nop2	;2 cycle nop
   783     0762  2F63               	nop2	;2 cycle nop
   784     0763  0000               	nop
   785     0764                     l33:
   786     0764  0008               	return
   787     0765                     __end_of_lcd_command:
   788     007E                     btemp	set	126	;btemp
   789     007E                     wtemp0	set	126
   790                           
   791                           	psect	config
   792                           
   793                           ;Config register CONFIG1 @ 0x2007
   794                           ;	Oscillator Selection bits
   795                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   796                           ;	Watchdog Timer Enable bit
   797                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   798                           ;	Power-up Timer Enable bit
   799                           ;	PWRTE = OFF, PWRT disabled
   800                           ;	RE3/MCLR pin function select bit
   801                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   802                           ;	Code Protection bit
   803                           ;	CP = OFF, Program memory code protection is disabled
   804                           ;	Data Code Protection bit
   805                           ;	CPD = OFF, Data memory code protection is disabled
   806                           ;	Brown Out Reset Selection bits
   807                           ;	BOREN = OFF, BOR disabled
   808                           ;	Internal External Switchover bit
   809                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   810                           ;	Fail-Safe Clock Monitor Enabled bit
   811                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   812                           ;	Low Voltage Programming Enable bit
   813                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   814                           ;	In-Circuit Debugger Mode bit
   815                           ;	DEBUG = 0x1, unprogrammed default
   816     2007                     	org	8199
   817     2007  20D2               	dw	8402
   818                           
   819                           ;Config register CONFIG2 @ 0x2008
   820                           ;	Brown-out Reset Selection bit
   821                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   822                           ;	Flash Program Memory Self Write Enable bits
   823                           ;	WRT = OFF, Write protection off
   824     2008                     	org	8200
   825     2008  3FFF               	dw	16383

Data Sizes:
    Strings     4
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@string_data	PTR unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_lcd_string
    _lcd_string->_lcd_data
    _lcd_setCursor->_lcd_command
    _lcd_init->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     357
                                              4 COMMON     2     2      0
                           _lcd_init
                      _lcd_setCursor
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           3     3      0     139
                                              1 COMMON     3     3      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_setCursor                                        2     1      1     201
                                              1 COMMON     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      15
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_init
     _lcd_command
   _lcd_setCursor
     _lcd_command
   _lcd_string
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       8       1       57.1%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       8      12        0.0%
ABS                  0      0       8       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat Jun 08 16:28:51 2024

           lcd_data@Data 0070                        pc 0002           ?_lcd_setCursor 0071  
                     l33 0764                       l36 0771                       l45 07EF  
                     l39 078A                       l63 07C8                       fsr 0004  
                    l640 0761                      l634 0759                      l650 0772  
                    l642 0766                      l636 075E                      l644 076B  
                    l638 0760                      l646 076D                      l648 076E  
                    fsr0 0004                     l1130 07DC                     l1140 07BC  
                   l1132 07E2                     l1142 07C1                     l1134 07A9  
                   l1126 07CA                     l1150 079E                     l1136 07AF  
                   l1128 07CF                     l1144 078B                     l1138 07B4  
                   l1146 0791                     l1148 0796                     STR_1 0009  
                   u1100 07B4                     u1101 07B3                     u1110 07C1  
                   u1111 07C0                     u1080 07EF                     u1081 07EE  
                   u1090 07AF                     u1091 07AE                     _RCIF 0065  
                   _TXIF 0064                     _main 078B                     btemp 007E  
                   start 0000              lcd_string@i 0072                    ?_main 0070  
                  _RCREG 001A                    _SPBRG 0099                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    _TXREG 0019  
                  main@j 0074                    pclath 000A               __XTAL_FREQ 0076  
                  status 0003                    wtemp0 007E          __initialization 07F0  
        ??_lcd_setCursor 0072             __end_of_main 07A8                   ??_main 0074  
         lcd_command@cmd 0070         __end_of_lcd_data 0772         __end_of_lcd_init 078B  
           __pdataCOMMON 0076  __end_of__initialization 07FC           __pcstackCOMMON 0070  
         lcd_setCursor@x 0072           lcd_setCursor@y 0071               __pmaintext 078B  
              ?_lcd_data 0070               _lcd_string 07C9                ?_lcd_init 0070  
             __stringtab 0003                  __ptext1 07C9                  __ptext2 0765  
                __ptext3 07A8                  __ptext4 0772                  __ptext5 0758  
             ??_lcd_data 0070               ??_lcd_init 0071     end_of_initialization 07FC  
  lcd_string@string_data 0071                _RCSTAbits 0018    __end_of_lcd_setCursor 07C9  
              _PORTCbits 0007                _TRISCbits 0087              ?_lcd_string 0070  
              _TXSTAbits 0098            ??_lcd_command 0070            __pidataCOMMON 0756  
            _BAUDCTLbits 0187      start_initialization 07F0      __end_of_lcd_command 0765  
              ___latbits 0002                __pstrings 0003              _lcd_command 0758  
            __stringbase 0008             ??_lcd_string 0071       __end_of_lcd_string 07F0  
     __end_of__stringtab 0009                 _lcd_data 0765                 _lcd_init 0772  
              stringcode 0003            _lcd_setCursor 07A8                 stringdir 0003  
               stringtab 0003             ?_lcd_command 0070  
