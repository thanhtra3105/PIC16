

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Jun 06 23:45:51 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 12/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0015                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001B                     	;# 
    84     001C                     	;# 
    85     001D                     	;# 
    86     001E                     	;# 
    87     001F                     	;# 
    88     0081                     	;# 
    89     0085                     	;# 
    90     0086                     	;# 
    91     0087                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     008E                     	;# 
    97     008F                     	;# 
    98     0090                     	;# 
    99     0091                     	;# 
   100     0092                     	;# 
   101     0093                     	;# 
   102     0093                     	;# 
   103     0093                     	;# 
   104     0094                     	;# 
   105     0095                     	;# 
   106     0096                     	;# 
   107     0097                     	;# 
   108     0098                     	;# 
   109     0099                     	;# 
   110     009A                     	;# 
   111     009B                     	;# 
   112     009C                     	;# 
   113     009D                     	;# 
   114     009E                     	;# 
   115     009F                     	;# 
   116     0105                     	;# 
   117     0107                     	;# 
   118     0108                     	;# 
   119     0109                     	;# 
   120     010C                     	;# 
   121     010C                     	;# 
   122     010D                     	;# 
   123     010E                     	;# 
   124     010F                     	;# 
   125     0185                     	;# 
   126     0187                     	;# 
   127     0188                     	;# 
   128     0189                     	;# 
   129     018C                     	;# 
   130     018D                     	;# 
   131     0000                     	;# 
   132     0001                     	;# 
   133     0002                     	;# 
   134     0003                     	;# 
   135     0004                     	;# 
   136     0005                     	;# 
   137     0006                     	;# 
   138     0007                     	;# 
   139     0008                     	;# 
   140     0009                     	;# 
   141     000A                     	;# 
   142     000B                     	;# 
   143     000C                     	;# 
   144     000D                     	;# 
   145     000E                     	;# 
   146     000E                     	;# 
   147     000F                     	;# 
   148     0010                     	;# 
   149     0011                     	;# 
   150     0012                     	;# 
   151     0013                     	;# 
   152     0014                     	;# 
   153     0015                     	;# 
   154     0015                     	;# 
   155     0016                     	;# 
   156     0017                     	;# 
   157     0018                     	;# 
   158     0019                     	;# 
   159     001A                     	;# 
   160     001B                     	;# 
   161     001B                     	;# 
   162     001C                     	;# 
   163     001D                     	;# 
   164     001E                     	;# 
   165     001F                     	;# 
   166     0081                     	;# 
   167     0085                     	;# 
   168     0086                     	;# 
   169     0087                     	;# 
   170     0088                     	;# 
   171     0089                     	;# 
   172     008C                     	;# 
   173     008D                     	;# 
   174     008E                     	;# 
   175     008F                     	;# 
   176     0090                     	;# 
   177     0091                     	;# 
   178     0092                     	;# 
   179     0093                     	;# 
   180     0093                     	;# 
   181     0093                     	;# 
   182     0094                     	;# 
   183     0095                     	;# 
   184     0096                     	;# 
   185     0097                     	;# 
   186     0098                     	;# 
   187     0099                     	;# 
   188     009A                     	;# 
   189     009B                     	;# 
   190     009C                     	;# 
   191     009D                     	;# 
   192     009E                     	;# 
   193     009F                     	;# 
   194     0105                     	;# 
   195     0107                     	;# 
   196     0108                     	;# 
   197     0109                     	;# 
   198     010C                     	;# 
   199     010C                     	;# 
   200     010D                     	;# 
   201     010E                     	;# 
   202     010F                     	;# 
   203     0185                     	;# 
   204     0187                     	;# 
   205     0188                     	;# 
   206     0189                     	;# 
   207     018C                     	;# 
   208     018D                     	;# 
   209                           
   210                           	psect	idataCOMMON
   211     0756                     __pidataCOMMON:
   212                           
   213                           ;initializer for __XTAL_FREQ
   214     0756  3400               	retlw	0
   215     0757  3409               	retlw	9
   216     001E                     _ADRESH	set	30
   217     001F                     _ADCON0	set	31
   218     0008                     _PORTD	set	8
   219     0007                     _PORTCbits	set	7
   220     00F9                     _GO_nDONE	set	249
   221     0088                     _TRISD	set	136
   222     0087                     _TRISC	set	135
   223     009E                     _ADRESL	set	158
   224     009F                     _ADCON1	set	159
   225                           
   226                           	psect	strings
   227     0003                     __pstrings:
   228     0003                     stringtab:
   229     0003                     __stringtab:
   230     0003                     stringcode:	
   231                           ;	String table - string pointers are 1 byte each
   232                           
   233     0003                     stringdir:
   234     0003  3000               	movlw	high stringdir
   235     0004  008A               	movwf	10
   236     0005  0804               	movf	4,w
   237     0006  0A84               	incf	4,f
   238     0007  0782               	addwf	2,f
   239     0008                     __stringbase:
   240     0008  3400               	retlw	0
   241     0009                     __end_of__stringtab:
   242     0009                     STR_1:
   243     0009  3474               	retlw	116	;'t'
   244     000A  3472               	retlw	114	;'r'
   245     000B  3461               	retlw	97	;'a'
   246     000C  3400               	retlw	0
   247                           
   248                           	psect	cinit
   249     07F0                     start_initialization:	
   250                           ; #config settings
   251                           
   252     07F0                     __initialization:
   253                           
   254                           ; Initialize objects allocated to COMMON
   255     07F0  120A  118A  2756  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   256     07F5  00F4               	movwf	__pdataCOMMON& (0+127)
   257     07F6  120A  118A  2757  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   258     07FB  00F5               	movwf	(__pdataCOMMON+1)& (0+127)
   259     07FC                     end_of_initialization:	
   260                           ;End of C runtime variable initialization code
   261                           
   262     07FC                     __end_of__initialization:
   263     07FC  0183               	clrf	3
   264     07FD  120A  118A  2F88   	ljmp	_main	;jump to C main() function
   265                           
   266                           	psect	dataCOMMON
   267     0074                     __pdataCOMMON:
   268     0074                     __XTAL_FREQ:
   269     0074                     	ds	2
   270                           
   271                           	psect	cstackCOMMON
   272     0070                     __pcstackCOMMON:
   273     0070                     ?_lcd_command:
   274     0070                     ??_lcd_command:	
   275                           ; 1 bytes @ 0x0
   276                           
   277     0070                     ?_lcd_data:	
   278                           ; 1 bytes @ 0x0
   279                           
   280     0070                     ??_lcd_data:	
   281                           ; 1 bytes @ 0x0
   282                           
   283     0070                     ?_lcd_init:	
   284                           ; 1 bytes @ 0x0
   285                           
   286     0070                     ?_lcd_string:	
   287                           ; 1 bytes @ 0x0
   288                           
   289     0070                     ?_ADC_init:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     0070                     ??_ADC_init:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     0070                     ?_main:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0070                     lcd_command@cmd:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0070                     lcd_data@Data:	
   302                           ; 1 bytes @ 0x0
   303                           
   304                           
   305                           ; 1 bytes @ 0x0
   306     0070                     	ds	1
   307     0071                     ??_lcd_init:
   308     0071                     ??_lcd_string:	
   309                           ; 1 bytes @ 0x1
   310                           
   311     0071                     ?_lcd_setCursor:	
   312                           ; 1 bytes @ 0x1
   313                           
   314     0071                     lcd_string@string_data:	
   315                           ; 1 bytes @ 0x1
   316                           
   317     0071                     lcd_setCursor@y:	
   318                           ; 1 bytes @ 0x1
   319                           
   320                           
   321                           ; 1 bytes @ 0x1
   322     0071                     	ds	1
   323     0072                     ??_lcd_setCursor:
   324     0072                     lcd_setCursor@x:	
   325                           ; 1 bytes @ 0x2
   326                           
   327     0072                     lcd_string@i:	
   328                           ; 1 bytes @ 0x2
   329                           
   330                           
   331                           ; 2 bytes @ 0x2
   332     0072                     	ds	2
   333     0074                     ??_main:
   334                           
   335                           	psect	maintext
   336     0788                     __pmaintext:	
   337                           ; 1 bytes @ 0x4
   338 ;;
   339 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   340 ;;
   341 ;; *************** function _main *****************
   342 ;; Defined at:
   343 ;;		line 38 in file "newmain.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;  value           2    0        unsigned int 
   348 ;; Return value:  Size  Location     Type
   349 ;;                  1    wreg      void 
   350 ;; Registers used:
   351 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   352 ;; Tracked objects:
   353 ;;		On entry : B00/0
   354 ;;		On exit  : 0/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   357 ;;      Params:         0       0       0       0       0
   358 ;;      Locals:         0       0       0       0       0
   359 ;;      Temps:          0       0       0       0       0
   360 ;;      Totals:         0       0       0       0       0
   361 ;;Total ram usage:        0 bytes
   362 ;; Hardware stack levels required when called: 2
   363 ;; This function calls:
   364 ;;		_ADC_init
   365 ;;		_lcd_init
   366 ;;		_lcd_setCursor
   367 ;;		_lcd_string
   368 ;; This function is called by:
   369 ;;		Startup code after reset
   370 ;; This function uses a non-reentrant model
   371 ;;
   372                           
   373     0788                     _main:	
   374                           ;psect for function _main
   375                           
   376     0788                     l1100:	
   377                           ;incstack = 0
   378                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   379                           
   380                           
   381                           ;newmain.c: 39:     TRISC = 0;
   382     0788  1683               	bsf	3,5	;RP0=1, select bank1
   383     0789  1303               	bcf	3,6	;RP1=0, select bank1
   384     078A  0187               	clrf	7	;volatile
   385                           
   386                           ;newmain.c: 40:     TRISD = 0;
   387     078B  0188               	clrf	8	;volatile
   388     078C                     l1102:
   389                           
   390                           ;newmain.c: 43:     lcd_init();
   391     078C  120A  118A  2775  120A  118A  	fcall	_lcd_init
   392     0791                     l1104:
   393                           
   394                           ;newmain.c: 44:     ADC_init();
   395     0791  120A  118A  2758  120A  118A  	fcall	_ADC_init
   396     0796                     l1106:
   397                           
   398                           ;newmain.c: 46:     {;newmain.c: 48:         lcd_setCursor(0,1);
   399     0796  01F1               	clrf	lcd_setCursor@y
   400     0797  0AF1               	incf	lcd_setCursor@y,f
   401     0798  3000               	movlw	0
   402     0799  120A  118A  27A8  120A  118A  	fcall	_lcd_setCursor
   403     079E                     l1108:
   404                           
   405                           ;newmain.c: 49:         lcd_string("tra");
   406     079E  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   407     079F  120A  118A  27C9  120A  118A  	fcall	_lcd_string
   408     07A4  2F96               	goto	l1106
   409     07A5  120A  118A  2800   	ljmp	start
   410     07A8                     __end_of_main:
   411                           
   412                           	psect	text1
   413     07C9                     __ptext1:	
   414 ;; *************** function _lcd_string *****************
   415 ;; Defined at:
   416 ;;		line 41 in file "./lcd_8bit.h"
   417 ;; Parameters:    Size  Location     Type
   418 ;;  string_data     1    wreg     PTR unsigned char 
   419 ;;		 -> STR_1(4), 
   420 ;; Auto vars:     Size  Location     Type
   421 ;;  string_data     1    1[COMMON] PTR unsigned char 
   422 ;;		 -> STR_1(4), 
   423 ;;  i               2    2[COMMON] int 
   424 ;; Return value:  Size  Location     Type
   425 ;;                  1    wreg      void 
   426 ;; Registers used:
   427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   428 ;; Tracked objects:
   429 ;;		On entry : 0/0
   430 ;;		On exit  : 0/0
   431 ;;		Unchanged: 0/0
   432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   433 ;;      Params:         0       0       0       0       0
   434 ;;      Locals:         3       0       0       0       0
   435 ;;      Temps:          0       0       0       0       0
   436 ;;      Totals:         3       0       0       0       0
   437 ;;Total ram usage:        3 bytes
   438 ;; Hardware stack levels used: 1
   439 ;; Hardware stack levels required when called: 1
   440 ;; This function calls:
   441 ;;		_lcd_data
   442 ;; This function is called by:
   443 ;;		_main
   444 ;; This function uses a non-reentrant model
   445 ;;
   446                           
   447     07C9                     _lcd_string:	
   448                           ;psect for function _lcd_string
   449                           
   450                           
   451                           ;incstack = 0
   452                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   453                           ;lcd_string@string_data stored from wreg
   454     07C9  00F1               	movwf	lcd_string@string_data
   455     07CA                     l1082:
   456                           
   457                           ;./lcd_8bit.h: 42:     int i = 0;
   458     07CA  01F2               	clrf	lcd_string@i
   459     07CB  01F3               	clrf	lcd_string@i+1
   460                           
   461                           ;./lcd_8bit.h: 43:     for (i = 0; string_data[i] != 0; i++) {
   462     07CC  01F2               	clrf	lcd_string@i
   463     07CD  01F3               	clrf	lcd_string@i+1
   464     07CE  2FE2               	goto	l1088
   465     07CF                     l1084:
   466                           
   467                           ;./lcd_8bit.h: 44:         lcd_data(string_data[i]);
   468     07CF  0872               	movf	lcd_string@i,w
   469     07D0  0771               	addwf	lcd_string@string_data,w
   470     07D1  0084               	movwf	4
   471     07D2  120A  118A  2003  120A  118A  	fcall	stringdir
   472     07D7  120A  118A  276B  120A  118A  	fcall	_lcd_data
   473     07DC                     l1086:
   474                           
   475                           ;./lcd_8bit.h: 45:     }
   476     07DC  3001               	movlw	1
   477     07DD  07F2               	addwf	lcd_string@i,f
   478     07DE  1803               	skipnc
   479     07DF  0AF3               	incf	lcd_string@i+1,f
   480     07E0  3000               	movlw	0
   481     07E1  07F3               	addwf	lcd_string@i+1,f
   482     07E2                     l1088:
   483     07E2  0872               	movf	lcd_string@i,w
   484     07E3  0771               	addwf	lcd_string@string_data,w
   485     07E4  0084               	movwf	4
   486     07E5  120A  118A  2003  120A  118A  	fcall	stringdir
   487     07EA  3A00               	xorlw	0
   488     07EB  1D03               	skipz
   489     07EC  2FEE               	goto	u1021
   490     07ED  2FEF               	goto	u1020
   491     07EE                     u1021:
   492     07EE  2FCF               	goto	l1084
   493     07EF                     u1020:
   494     07EF                     l37:
   495     07EF  0008               	return
   496     07F0                     __end_of_lcd_string:
   497                           
   498                           	psect	text2
   499     076B                     __ptext2:	
   500 ;; *************** function _lcd_data *****************
   501 ;; Defined at:
   502 ;;		line 25 in file "./lcd_8bit.h"
   503 ;; Parameters:    Size  Location     Type
   504 ;;  Data            1    wreg     unsigned char 
   505 ;; Auto vars:     Size  Location     Type
   506 ;;  Data            1    0[COMMON] unsigned char 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   516 ;;      Params:         0       0       0       0       0
   517 ;;      Locals:         1       0       0       0       0
   518 ;;      Temps:          0       0       0       0       0
   519 ;;      Totals:         1       0       0       0       0
   520 ;;Total ram usage:        1 bytes
   521 ;; Hardware stack levels used: 1
   522 ;; This function calls:
   523 ;;		Nothing
   524 ;; This function is called by:
   525 ;;		_lcd_string
   526 ;;		_lcd_number
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530     076B                     _lcd_data:	
   531                           ;psect for function _lcd_data
   532                           
   533                           
   534                           ;incstack = 0
   535                           ; Regs used in _lcd_data: [wreg]
   536                           ;lcd_data@Data stored from wreg
   537     076B  00F0               	movwf	lcd_data@Data
   538     076C                     l624:
   539                           
   540                           ;./lcd_8bit.h: 26:     PORTCbits.RC0 = 1;
   541     076C  1283               	bcf	3,5	;RP0=0, select bank0
   542     076D  1303               	bcf	3,6	;RP1=0, select bank0
   543     076E  1407               	bsf	7,0	;volatile
   544                           
   545                           ;./lcd_8bit.h: 27:     PORTCbits.RC1 = 0;
   546     076F  1087               	bcf	7,1	;volatile
   547                           
   548                           ;./lcd_8bit.h: 28:     PORTCbits.RC2 = 1;
   549     0770  1507               	bsf	7,2	;volatile
   550     0771                     l626:
   551                           
   552                           ;./lcd_8bit.h: 29:     PORTD = Data;
   553     0771  0870               	movf	lcd_data@Data,w
   554     0772  0088               	movwf	8	;volatile
   555     0773                     l628:
   556                           
   557                           ;./lcd_8bit.h: 30:     PORTCbits.RC2 = 0;
   558     0773  1107               	bcf	7,2	;volatile
   559     0774                     l630:
   560     0774                     l28:	
   561                           ;./lcd_8bit.h: 31:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000.0)));
   562                           
   563     0774  0008               	return
   564     0775                     __end_of_lcd_data:
   565                           
   566                           	psect	text3
   567     07A8                     __ptext3:	
   568 ;; *************** function _lcd_setCursor *****************
   569 ;; Defined at:
   570 ;;		line 71 in file "./lcd_8bit.h"
   571 ;; Parameters:    Size  Location     Type
   572 ;;  x               1    wreg     unsigned char 
   573 ;;  y               1    1[COMMON] unsigned char 
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  x               1    2[COMMON] unsigned char 
   576 ;; Return value:  Size  Location     Type
   577 ;;                  1    wreg      void 
   578 ;; Registers used:
   579 ;;		wreg, status,2, status,0, pclath, cstack
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   585 ;;      Params:         1       0       0       0       0
   586 ;;      Locals:         1       0       0       0       0
   587 ;;      Temps:          0       0       0       0       0
   588 ;;      Totals:         2       0       0       0       0
   589 ;;Total ram usage:        2 bytes
   590 ;; Hardware stack levels used: 1
   591 ;; Hardware stack levels required when called: 1
   592 ;; This function calls:
   593 ;;		_lcd_command
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599     07A8                     _lcd_setCursor:	
   600                           ;psect for function _lcd_setCursor
   601                           
   602                           
   603                           ;incstack = 0
   604                           ; Regs used in _lcd_setCursor: [wreg+status,2+status,0+pclath+cstack]
   605                           ;lcd_setCursor@x stored from wreg
   606     07A8  00F2               	movwf	lcd_setCursor@x
   607     07A9                     l1090:
   608                           
   609                           ;./lcd_8bit.h: 71: void lcd_setCursor(unsigned char x, unsigned char y);./lcd_8bit.h: 72
      +                          : {;./lcd_8bit.h: 73:     if (x >= 0 && x < 16) {
   610     07A9  3010               	movlw	16
   611     07AA  0272               	subwf	lcd_setCursor@x,w
   612     07AB  1803               	skipnc
   613     07AC  2FAE               	goto	u1031
   614     07AD  2FAF               	goto	u1030
   615     07AE                     u1031:
   616     07AE  2FC8               	goto	l55
   617     07AF                     u1030:
   618     07AF                     l1092:
   619                           
   620                           ;./lcd_8bit.h: 74:         if (y == 0)
   621     07AF  0871               	movf	lcd_setCursor@y,w
   622     07B0  1D03               	btfss	3,2
   623     07B1  2FB3               	goto	u1041
   624     07B2  2FB4               	goto	u1040
   625     07B3                     u1041:
   626     07B3  2FBC               	goto	l1096
   627     07B4                     u1040:
   628     07B4                     l1094:
   629                           
   630                           ;./lcd_8bit.h: 75:         {;./lcd_8bit.h: 76:             lcd_command(0x80 + x);
   631     07B4  0872               	movf	lcd_setCursor@x,w
   632     07B5  3E80               	addlw	128
   633     07B6  120A  118A  2761  120A  118A  	fcall	_lcd_command
   634                           
   635                           ;./lcd_8bit.h: 78:         } else if (y == 1)
   636     07BB  2FC8               	goto	l55
   637     07BC                     l1096:
   638     07BC  0371               	decf	lcd_setCursor@y,w
   639     07BD  1D03               	btfss	3,2
   640     07BE  2FC0               	goto	u1051
   641     07BF  2FC1               	goto	u1050
   642     07C0                     u1051:
   643     07C0  2FC8               	goto	l55
   644     07C1                     u1050:
   645     07C1                     l1098:
   646                           
   647                           ;./lcd_8bit.h: 79:         {;./lcd_8bit.h: 80:             lcd_command(0xC0 + x);
   648     07C1  0872               	movf	lcd_setCursor@x,w
   649     07C2  3EC0               	addlw	192
   650     07C3  120A  118A  2761  120A  118A  	fcall	_lcd_command
   651     07C8                     l55:
   652     07C8  0008               	return
   653     07C9                     __end_of_lcd_setCursor:
   654                           
   655                           	psect	text4
   656     0775                     __ptext4:	
   657 ;; *************** function _lcd_init *****************
   658 ;; Defined at:
   659 ;;		line 34 in file "./lcd_8bit.h"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;		None
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg, status,2, status,0, pclath, cstack
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   673 ;;      Params:         0       0       0       0       0
   674 ;;      Locals:         0       0       0       0       0
   675 ;;      Temps:          0       0       0       0       0
   676 ;;      Totals:         0       0       0       0       0
   677 ;;Total ram usage:        0 bytes
   678 ;; Hardware stack levels used: 1
   679 ;; Hardware stack levels required when called: 1
   680 ;; This function calls:
   681 ;;		_lcd_command
   682 ;; This function is called by:
   683 ;;		_main
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687     0775                     _lcd_init:	
   688                           ;psect for function _lcd_init
   689                           
   690     0775                     l632:	
   691                           ;incstack = 0
   692                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   693                           
   694                           
   695                           ;./lcd_8bit.h: 35:     lcd_command(0x0C);
   696     0775  300C               	movlw	12
   697     0776  120A  118A  2761  120A  118A  	fcall	_lcd_command
   698                           
   699                           ;./lcd_8bit.h: 36:     lcd_command(0x38);
   700     077B  3038               	movlw	56
   701     077C  120A  118A  2761  120A  118A  	fcall	_lcd_command
   702                           
   703                           ;./lcd_8bit.h: 37:     lcd_command(0x80);
   704     0781  3080               	movlw	128
   705     0782  120A  118A  2761  120A  118A  	fcall	_lcd_command
   706     0787                     l31:
   707     0787  0008               	return
   708     0788                     __end_of_lcd_init:
   709                           
   710                           	psect	text5
   711     0761                     __ptext5:	
   712 ;; *************** function _lcd_command *****************
   713 ;; Defined at:
   714 ;;		line 16 in file "./lcd_8bit.h"
   715 ;; Parameters:    Size  Location     Type
   716 ;;  cmd             1    wreg     unsigned char 
   717 ;; Auto vars:     Size  Location     Type
   718 ;;  cmd             1    0[COMMON] unsigned char 
   719 ;; Return value:  Size  Location     Type
   720 ;;                  1    wreg      void 
   721 ;; Registers used:
   722 ;;		wreg
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   728 ;;      Params:         0       0       0       0       0
   729 ;;      Locals:         1       0       0       0       0
   730 ;;      Temps:          0       0       0       0       0
   731 ;;      Totals:         1       0       0       0       0
   732 ;;Total ram usage:        1 bytes
   733 ;; Hardware stack levels used: 1
   734 ;; This function calls:
   735 ;;		Nothing
   736 ;; This function is called by:
   737 ;;		_lcd_init
   738 ;;		_lcd_setCursor
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742     0761                     _lcd_command:	
   743                           ;psect for function _lcd_command
   744                           
   745                           
   746                           ;incstack = 0
   747                           ; Regs used in _lcd_command: [wreg]
   748                           ;lcd_command@cmd stored from wreg
   749     0761  00F0               	movwf	lcd_command@cmd
   750     0762                     l616:
   751                           
   752                           ;./lcd_8bit.h: 17:     PORTCbits.RC0 = 0x00;
   753     0762  1283               	bcf	3,5	;RP0=0, select bank0
   754     0763  1303               	bcf	3,6	;RP1=0, select bank0
   755     0764  1007               	bcf	7,0	;volatile
   756                           
   757                           ;./lcd_8bit.h: 18:     PORTCbits.RC1 = 0x00;
   758     0765  1087               	bcf	7,1	;volatile
   759                           
   760                           ;./lcd_8bit.h: 19:     PORTCbits.RC2 = 0x01;
   761     0766  1507               	bsf	7,2	;volatile
   762     0767                     l618:
   763                           
   764                           ;./lcd_8bit.h: 20:     PORTD = cmd;
   765     0767  0870               	movf	lcd_command@cmd,w
   766     0768  0088               	movwf	8	;volatile
   767     0769                     l620:
   768                           
   769                           ;./lcd_8bit.h: 21:     PORTCbits.RC2 = 0;
   770     0769  1107               	bcf	7,2	;volatile
   771     076A                     l622:
   772     076A                     l25:	
   773                           ;./lcd_8bit.h: 22:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000.0)));
   774                           
   775     076A  0008               	return
   776     076B                     __end_of_lcd_command:
   777                           
   778                           	psect	text6
   779     0758                     __ptext6:	
   780 ;; *************** function _ADC_init *****************
   781 ;; Defined at:
   782 ;;		line 21 in file "newmain.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;		None
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   796 ;;      Params:         0       0       0       0       0
   797 ;;      Locals:         0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0
   799 ;;      Totals:         0       0       0       0       0
   800 ;;Total ram usage:        0 bytes
   801 ;; Hardware stack levels used: 1
   802 ;; This function calls:
   803 ;;		Nothing
   804 ;; This function is called by:
   805 ;;		_main
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809     0758                     _ADC_init:	
   810                           ;psect for function _ADC_init
   811                           
   812     0758                     l652:	
   813                           ;incstack = 0
   814                           ; Regs used in _ADC_init: [wreg]
   815                           
   816                           
   817                           ;newmain.c: 23:     ADCON0 = 0b00000001;
   818     0758  3001               	movlw	1
   819     0759  1283               	bcf	3,5	;RP0=0, select bank0
   820     075A  1303               	bcf	3,6	;RP1=0, select bank0
   821     075B  009F               	movwf	31	;volatile
   822                           
   823                           ;newmain.c: 24:     ADCON1 = 0b10000000;
   824     075C  3080               	movlw	128
   825     075D  1683               	bsf	3,5	;RP0=1, select bank1
   826     075E  1303               	bcf	3,6	;RP1=0, select bank1
   827     075F  009F               	movwf	31	;volatile
   828     0760                     l58:
   829     0760  0008               	return
   830     0761                     __end_of_ADC_init:
   831     007E                     btemp	set	126	;btemp
   832     007E                     wtemp0	set	126
   833                           
   834                           	psect	config
   835                           
   836                           ;Config register CONFIG1 @ 0x2007
   837                           ;	Oscillator Selection bits
   838                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   839                           ;	Watchdog Timer Enable bit
   840                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   841                           ;	Power-up Timer Enable bit
   842                           ;	PWRTE = OFF, PWRT disabled
   843                           ;	RE3/MCLR pin function select bit
   844                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   845                           ;	Code Protection bit
   846                           ;	CP = OFF, Program memory code protection is disabled
   847                           ;	Data Code Protection bit
   848                           ;	CPD = OFF, Data memory code protection is disabled
   849                           ;	Brown Out Reset Selection bits
   850                           ;	BOREN = OFF, BOR disabled
   851                           ;	Internal External Switchover bit
   852                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   853                           ;	Fail-Safe Clock Monitor Enabled bit
   854                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   855                           ;	Low Voltage Programming Enable bit
   856                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   857                           ;	In-Circuit Debugger Mode bit
   858                           ;	DEBUG = 0x1, unprogrammed default
   859     2007                     	org	8199
   860     2007  20D2               	dw	8402
   861                           
   862                           ;Config register CONFIG2 @ 0x2008
   863                           ;	Brown-out Reset Selection bit
   864                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   865                           ;	Flash Program Memory Self Write Enable bits
   866                           ;	WRT = OFF, Write protection off
   867     2008                     	org	8200
   868     2008  3FFF               	dw	16383

Data Sizes:
    Strings     4
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@string_data	PTR unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_lcd_string
    _lcd_string->_lcd_data
    _lcd_setCursor->_lcd_command
    _lcd_init->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     356
                           _ADC_init
                           _lcd_init
                      _lcd_setCursor
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           3     3      0     139
                                              1 COMMON     3     3      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_setCursor                                        2     1      1     201
                                              1 COMMON     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      15
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _lcd_init
     _lcd_command
   _lcd_setCursor
     _lcd_command
   _lcd_string
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      4       6       1       42.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       6      12        0.0%
ABS                  0      0       6       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Jun 06 23:45:51 2024

           lcd_data@Data 0070                        pc 0002           ?_lcd_setCursor 0071  
                     l31 0787                       l25 076A                       l28 0774  
                     l37 07EF                       l55 07C8                       l58 0760  
                     fsr 0004                      l620 0769                      l622 076A  
                    l630 0774                      l616 0762                      l632 0775  
                    l624 076C                      l618 0767                      l626 0771  
                    l652 0758                      l628 0773                      fsr0 0004  
                   l1100 0788                     l1102 078C                     l1104 0791  
                   l1106 0796                     l1108 079E                     l1090 07A9  
                   l1082 07CA                     l1092 07AF                     l1084 07CF  
                   l1094 07B4                     l1086 07DC                     l1096 07BC  
                   l1088 07E2                     l1098 07C1                     STR_1 0009  
                   u1020 07EF                     u1021 07EE                     u1030 07AF  
                   u1031 07AE                     u1040 07B4                     u1041 07B3  
                   u1050 07C1                     u1051 07C0                     _main 0788  
                   btemp 007E                     start 0000         __end_of_ADC_init 0761  
            lcd_string@i 0072                    ?_main 0070                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    pclath 000A  
             __XTAL_FREQ 0074                    status 0003                    wtemp0 007E  
        __initialization 07F0          ??_lcd_setCursor 0072             __end_of_main 07A8  
                 ??_main 0074           lcd_command@cmd 0070                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
       __end_of_lcd_data 0775         __end_of_lcd_init 0788             __pdataCOMMON 0074  
              ?_ADC_init 0070  __end_of__initialization 07FC           __pcstackCOMMON 0070  
             ??_ADC_init 0070           lcd_setCursor@x 0072           lcd_setCursor@y 0071  
             __pmaintext 0788                ?_lcd_data 0070               _lcd_string 07C9  
              ?_lcd_init 0070               __stringtab 0003                  __ptext1 07C9  
                __ptext2 076B                  __ptext3 07A8                  __ptext4 0775  
                __ptext5 0761                  __ptext6 0758               ??_lcd_data 0070  
             ??_lcd_init 0071     end_of_initialization 07FC    lcd_string@string_data 0071  
  __end_of_lcd_setCursor 07C9                _PORTCbits 0007              ?_lcd_string 0070  
          ??_lcd_command 0070            __pidataCOMMON 0756      start_initialization 07F0  
    __end_of_lcd_command 076B                ___latbits 0002                __pstrings 0003  
               _ADC_init 0758              _lcd_command 0761                 _GO_nDONE 00F9  
            __stringbase 0008             ??_lcd_string 0071       __end_of_lcd_string 07F0  
     __end_of__stringtab 0009                 _lcd_data 076B                 _lcd_init 0775  
              stringcode 0003            _lcd_setCursor 07A8                 stringdir 0003  
               stringtab 0003             ?_lcd_command 0070  
