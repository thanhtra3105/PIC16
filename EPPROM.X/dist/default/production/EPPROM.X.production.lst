

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Jun 14 13:49:10 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Generated 12/10/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0000                     	;# 
    58     0001                     	;# 
    59     0002                     	;# 
    60     0003                     	;# 
    61     0004                     	;# 
    62     0005                     	;# 
    63     0006                     	;# 
    64     0007                     	;# 
    65     0008                     	;# 
    66     0009                     	;# 
    67     000A                     	;# 
    68     000B                     	;# 
    69     000C                     	;# 
    70     000D                     	;# 
    71     000E                     	;# 
    72     000E                     	;# 
    73     000F                     	;# 
    74     0010                     	;# 
    75     0011                     	;# 
    76     0012                     	;# 
    77     0013                     	;# 
    78     0014                     	;# 
    79     0015                     	;# 
    80     0015                     	;# 
    81     0016                     	;# 
    82     0017                     	;# 
    83     0018                     	;# 
    84     0019                     	;# 
    85     001A                     	;# 
    86     001B                     	;# 
    87     001B                     	;# 
    88     001C                     	;# 
    89     001D                     	;# 
    90     001E                     	;# 
    91     001F                     	;# 
    92     0081                     	;# 
    93     0085                     	;# 
    94     0086                     	;# 
    95     0087                     	;# 
    96     0088                     	;# 
    97     0089                     	;# 
    98     008C                     	;# 
    99     008D                     	;# 
   100     008E                     	;# 
   101     008F                     	;# 
   102     0090                     	;# 
   103     0091                     	;# 
   104     0092                     	;# 
   105     0093                     	;# 
   106     0093                     	;# 
   107     0093                     	;# 
   108     0094                     	;# 
   109     0095                     	;# 
   110     0096                     	;# 
   111     0097                     	;# 
   112     0098                     	;# 
   113     0099                     	;# 
   114     009A                     	;# 
   115     009B                     	;# 
   116     009C                     	;# 
   117     009D                     	;# 
   118     009E                     	;# 
   119     009F                     	;# 
   120     0105                     	;# 
   121     0107                     	;# 
   122     0108                     	;# 
   123     0109                     	;# 
   124     010C                     	;# 
   125     010C                     	;# 
   126     010D                     	;# 
   127     010E                     	;# 
   128     010F                     	;# 
   129     0185                     	;# 
   130     0187                     	;# 
   131     0188                     	;# 
   132     0189                     	;# 
   133     018C                     	;# 
   134     018D                     	;# 
   135     0000                     	;# 
   136     0001                     	;# 
   137     0002                     	;# 
   138     0003                     	;# 
   139     0004                     	;# 
   140     0005                     	;# 
   141     0006                     	;# 
   142     0007                     	;# 
   143     0008                     	;# 
   144     0009                     	;# 
   145     000A                     	;# 
   146     000B                     	;# 
   147     000C                     	;# 
   148     000D                     	;# 
   149     000E                     	;# 
   150     000E                     	;# 
   151     000F                     	;# 
   152     0010                     	;# 
   153     0011                     	;# 
   154     0012                     	;# 
   155     0013                     	;# 
   156     0014                     	;# 
   157     0015                     	;# 
   158     0015                     	;# 
   159     0016                     	;# 
   160     0017                     	;# 
   161     0018                     	;# 
   162     0019                     	;# 
   163     001A                     	;# 
   164     001B                     	;# 
   165     001B                     	;# 
   166     001C                     	;# 
   167     001D                     	;# 
   168     001E                     	;# 
   169     001F                     	;# 
   170     0081                     	;# 
   171     0085                     	;# 
   172     0086                     	;# 
   173     0087                     	;# 
   174     0088                     	;# 
   175     0089                     	;# 
   176     008C                     	;# 
   177     008D                     	;# 
   178     008E                     	;# 
   179     008F                     	;# 
   180     0090                     	;# 
   181     0091                     	;# 
   182     0092                     	;# 
   183     0093                     	;# 
   184     0093                     	;# 
   185     0093                     	;# 
   186     0094                     	;# 
   187     0095                     	;# 
   188     0096                     	;# 
   189     0097                     	;# 
   190     0098                     	;# 
   191     0099                     	;# 
   192     009A                     	;# 
   193     009B                     	;# 
   194     009C                     	;# 
   195     009D                     	;# 
   196     009E                     	;# 
   197     009F                     	;# 
   198     0105                     	;# 
   199     0107                     	;# 
   200     0108                     	;# 
   201     0109                     	;# 
   202     010C                     	;# 
   203     010C                     	;# 
   204     010D                     	;# 
   205     010E                     	;# 
   206     010F                     	;# 
   207     0185                     	;# 
   208     0187                     	;# 
   209     0188                     	;# 
   210     0189                     	;# 
   211     018C                     	;# 
   212     018D                     	;# 
   213                           
   214                           	psect	idataCOMMON
   215     061D                     __pidataCOMMON:
   216                           
   217                           ;initializer for __XTAL_FREQ
   218     061D  3400               	retlw	0
   219     061E  3409               	retlw	9
   220     0006                     _PORTB	set	6
   221     0007                     _PORTCbits	set	7
   222     006C                     _EEIF	set	108
   223     005F                     _GIE	set	95
   224     0087                     _TRISCbits	set	135
   225     0086                     _TRISB	set	134
   226     010C                     _EEDAT	set	268
   227     010D                     _EEADR	set	269
   228     018D                     _EECON2	set	397
   229     0C60                     _RD	set	3168
   230     0C67                     _EEPGD	set	3175
   231     0C61                     _WR	set	3169
   232     0C62                     _WREN	set	3170
   233                           
   234                           	psect	strings
   235     0003                     __pstrings:
   236     0003                     stringtab:
   237     0003                     __stringtab:
   238     0003                     stringcode:	
   239                           ;	String table - string pointers are 1 byte each
   240                           
   241     0003                     stringdir:
   242     0003  3000               	movlw	high stringdir
   243     0004  008A               	movwf	10
   244     0005  0804               	movf	4,w
   245     0006  0A84               	incf	4,f
   246     0007  0782               	addwf	2,f
   247     0008                     __stringbase:
   248     0008  3400               	retlw	0
   249     0009                     __end_of__stringtab:
   250     0009                     STR_6:
   251     0009  3420               	retlw	32	;' '
   252     000A  3420               	retlw	32	;' '
   253     000B  3420               	retlw	32	;' '
   254     000C  3420               	retlw	32	;' '
   255     000D  3420               	retlw	32	;' '
   256     000E  3420               	retlw	32	;' '
   257     000F  3420               	retlw	32	;' '
   258     0010  3420               	retlw	32	;' '
   259     0011  3420               	retlw	32	;' '
   260     0012  3420               	retlw	32	;' '
   261     0013  3420               	retlw	32	;' '
   262     0014  3420               	retlw	32	;' '
   263     0015  3420               	retlw	32	;' '
   264     0016  3420               	retlw	32	;' '
   265     0017  3420               	retlw	32	;' '
   266     0018  3400               	retlw	0
   267     0019                     STR_2:
   268     0019  3431               	retlw	49	;'1'
   269     001A  342E               	retlw	46	;'.'
   270     001B  3457               	retlw	87	;'W'
   271     001C  3472               	retlw	114	;'r'
   272     001D  3469               	retlw	105	;'i'
   273     001E  3474               	retlw	116	;'t'
   274     001F  3465               	retlw	101	;'e'
   275     0020  3420               	retlw	32	;' '
   276     0021  3445               	retlw	69	;'E'
   277     0022  3445               	retlw	69	;'E'
   278     0023  3450               	retlw	80	;'P'
   279     0024  3452               	retlw	82	;'R'
   280     0025  344F               	retlw	79	;'O'
   281     0026  344D               	retlw	77	;'M'
   282     0027  3400               	retlw	0
   283     0028                     STR_3:
   284     0028  3432               	retlw	50	;'2'
   285     0029  342E               	retlw	46	;'.'
   286     002A  3452               	retlw	82	;'R'
   287     002B  3465               	retlw	101	;'e'
   288     002C  3461               	retlw	97	;'a'
   289     002D  3464               	retlw	100	;'d'
   290     002E  3420               	retlw	32	;' '
   291     002F  3445               	retlw	69	;'E'
   292     0030  3445               	retlw	69	;'E'
   293     0031  3450               	retlw	80	;'P'
   294     0032  3452               	retlw	82	;'R'
   295     0033  344F               	retlw	79	;'O'
   296     0034  344D               	retlw	77	;'M'
   297     0035  3400               	retlw	0
   298     0036                     STR_4:
   299     0036  3457               	retlw	87	;'W'
   300     0037  3452               	retlw	82	;'R'
   301     0038  3449               	retlw	73	;'I'
   302     0039  3454               	retlw	84	;'T'
   303     003A  3445               	retlw	69	;'E'
   304     003B  3420               	retlw	32	;' '
   305     003C  3445               	retlw	69	;'E'
   306     003D  3445               	retlw	69	;'E'
   307     003E  3450               	retlw	80	;'P'
   308     003F  3452               	retlw	82	;'R'
   309     0040  344F               	retlw	79	;'O'
   310     0041  344D               	retlw	77	;'M'
   311     0042  3400               	retlw	0
   312     0043                     STR_5:
   313     0043  346C               	retlw	108	;'l'
   314     0044  3465               	retlw	101	;'e'
   315     0045  3420               	retlw	32	;' '
   316     0046  3474               	retlw	116	;'t'
   317     0047  3468               	retlw	104	;'h'
   318     0048  3461               	retlw	97	;'a'
   319     0049  346E               	retlw	110	;'n'
   320     004A  3468               	retlw	104	;'h'
   321     004B  3420               	retlw	32	;' '
   322     004C  3474               	retlw	116	;'t'
   323     004D  3472               	retlw	114	;'r'
   324     004E  3461               	retlw	97	;'a'
   325     004F  3400               	retlw	0
   326     0050                     STR_7:
   327     0050  3444               	retlw	68	;'D'
   328     0051  344F               	retlw	79	;'O'
   329     0052  344E               	retlw	78	;'N'
   330     0053  3445               	retlw	69	;'E'
   331     0054  3420               	retlw	32	;' '
   332     0055  3457               	retlw	87	;'W'
   333     0056  3452               	retlw	82	;'R'
   334     0057  3449               	retlw	73	;'I'
   335     0058  3454               	retlw	84	;'T'
   336     0059  3445               	retlw	69	;'E'
   337     005A  3400               	retlw	0
   338     005B                     STR_8:
   339     005B  3444               	retlw	68	;'D'
   340     005C  346F               	retlw	111	;'o'
   341     005D  3463               	retlw	99	;'c'
   342     005E  3420               	retlw	32	;' '
   343     005F  3445               	retlw	69	;'E'
   344     0060  3445               	retlw	69	;'E'
   345     0061  3450               	retlw	80	;'P'
   346     0062  3452               	retlw	82	;'R'
   347     0063  344F               	retlw	79	;'O'
   348     0064  344D               	retlw	77	;'M'
   349     0065  3400               	retlw	0
   350     0066                     STR_1:
   351     0066  3453               	retlw	83	;'S'
   352     0067  3474               	retlw	116	;'t'
   353     0068  3461               	retlw	97	;'a'
   354     0069  3472               	retlw	114	;'r'
   355     006A  3474               	retlw	116	;'t'
   356     006B  3400               	retlw	0
   357     0009                     
   358                           	psect	cinit
   359     07F0                     start_initialization:	
   360                           ; #config settings
   361                           
   362     07F0                     __initialization:
   363                           
   364                           ; Initialize objects allocated to COMMON
   365     07F0  120A  118A  261D  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   366     07F5  00F9               	movwf	__pdataCOMMON& (0+127)
   367     07F6  120A  118A  261E  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   368     07FB  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   369     07FC                     end_of_initialization:	
   370                           ;End of C runtime variable initialization code
   371                           
   372     07FC                     __end_of__initialization:
   373     07FC  0183               	clrf	3
   374     07FD  120A  118A  2EED   	ljmp	_main	;jump to C main() function
   375                           
   376                           	psect	dataCOMMON
   377     0079                     __pdataCOMMON:
   378     0079                     __XTAL_FREQ:
   379     0079                     	ds	2
   380                           
   381                           	psect	cstackCOMMON
   382     0070                     __pcstackCOMMON:
   383     0070                     ?_lcd_command:
   384     0070                     ??_lcd_command:	
   385                           ; 1 bytes @ 0x0
   386                           
   387     0070                     ?_lcd_data:	
   388                           ; 1 bytes @ 0x0
   389                           
   390     0070                     ??_lcd_data:	
   391                           ; 1 bytes @ 0x0
   392                           
   393     0070                     ?_lcd_init:	
   394                           ; 1 bytes @ 0x0
   395                           
   396     0070                     ?_lcd_string:	
   397                           ; 1 bytes @ 0x0
   398                           
   399     0070                     ?_lcd_clear:	
   400                           ; 1 bytes @ 0x0
   401                           
   402     0070                     ?_EEPROM_write:	
   403                           ; 1 bytes @ 0x0
   404                           
   405     0070                     ?_EEPROM_read:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0070                     ??_EEPROM_read:	
   409                           ; 1 bytes @ 0x0
   410                           
   411     0070                     ?_main:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     lcd_command@cmd:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     lcd_data@Data:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     EEPROM_write@Data:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     EEPROM_read@ADR:	
   424                           ; 1 bytes @ 0x0
   425                           
   426                           
   427                           ; 1 bytes @ 0x0
   428     0070                     	ds	1
   429     0071                     ??_lcd_init:
   430     0071                     ??_lcd_string:	
   431                           ; 1 bytes @ 0x1
   432                           
   433     0071                     ?_lcd_setCursor:	
   434                           ; 1 bytes @ 0x1
   435                           
   436     0071                     ??_lcd_clear:	
   437                           ; 1 bytes @ 0x1
   438                           
   439     0071                     ??_EEPROM_write:	
   440                           ; 1 bytes @ 0x1
   441                           
   442     0071                     lcd_setCursor@y:	
   443                           ; 1 bytes @ 0x1
   444                           
   445     0071                     EEPROM_write@ADR:	
   446                           ; 1 bytes @ 0x1
   447                           
   448     0071                     EEPROM_read@Data:	
   449                           ; 1 bytes @ 0x1
   450                           
   451     0071                     lcd_string@i:	
   452                           ; 1 bytes @ 0x1
   453                           
   454                           
   455                           ; 2 bytes @ 0x1
   456     0071                     	ds	1
   457     0072                     ??_lcd_setCursor:
   458     0072                     ?_EEPROM_write_string:	
   459                           ; 1 bytes @ 0x2
   460                           
   461     0072                     lcd_setCursor@x:	
   462                           ; 1 bytes @ 0x2
   463                           
   464     0072                     EEPROM_write_string@Data:	
   465                           ; 1 bytes @ 0x2
   466                           
   467                           
   468                           ; 1 bytes @ 0x2
   469     0072                     	ds	1
   470     0073                     ??_EEPROM_write_string:
   471     0073                     lcd_string@string_data:	
   472                           ; 1 bytes @ 0x3
   473                           
   474     0073                     EEPROM_write_string@ADR:	
   475                           ; 1 bytes @ 0x3
   476                           
   477                           
   478                           ; 1 bytes @ 0x3
   479     0073                     	ds	1
   480     0074                     EEPROM_write_string@i:
   481                           
   482                           ; 2 bytes @ 0x4
   483     0074                     	ds	2
   484     0076                     ??_main:
   485                           
   486                           ; 1 bytes @ 0x6
   487     0076                     	ds	3
   488                           
   489                           	psect	cstackBANK0
   490     0020                     __pcstackBANK0:
   491     0020                     main@value:
   492                           
   493                           ; 16 bytes @ 0x0
   494     0020                     	ds	16
   495     0030                     main@i:
   496                           
   497                           ; 2 bytes @ 0x10
   498     0030                     	ds	2
   499                           
   500                           	psect	maintext
   501     06ED                     __pmaintext:	
   502 ;;
   503 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   504 ;;
   505 ;; *************** function _main *****************
   506 ;; Defined at:
   507 ;;		line 24 in file "newmain.c"
   508 ;; Parameters:    Size  Location     Type
   509 ;;		None
   510 ;; Auto vars:     Size  Location     Type
   511 ;;  i               2   16[BANK0 ] int 
   512 ;;  value          16    0[BANK0 ] unsigned char [16]
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : B00/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   522 ;;      Params:         0       0       0       0       0
   523 ;;      Locals:         0      18       0       0       0
   524 ;;      Temps:          3       0       0       0       0
   525 ;;      Totals:         3      18       0       0       0
   526 ;;Total ram usage:       21 bytes
   527 ;; Hardware stack levels required when called: 2
   528 ;; This function calls:
   529 ;;		_EEPROM_read
   530 ;;		_EEPROM_write_string
   531 ;;		_lcd_clear
   532 ;;		_lcd_data
   533 ;;		_lcd_init
   534 ;;		_lcd_setCursor
   535 ;;		_lcd_string
   536 ;; This function is called by:
   537 ;;		Startup code after reset
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541     06ED                     _main:	
   542                           ;psect for function _main
   543                           
   544     06ED                     l1291:	
   545                           ;incstack = 0
   546                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   547                           
   548                           
   549                           ;newmain.c: 27:     TRISB = 0;
   550     06ED  1683               	bsf	3,5	;RP0=1, select bank1
   551     06EE  1303               	bcf	3,6	;RP1=0, select bank1
   552     06EF  0186               	clrf	6	;volatile
   553     06F0                     l1293:
   554                           
   555                           ;newmain.c: 28:     TRISCbits.TRISC0 = 0;
   556     06F0  1007               	bcf	7,0	;volatile
   557     06F1                     l1295:
   558                           
   559                           ;newmain.c: 29:     TRISCbits.TRISC1 = 0;
   560     06F1  1087               	bcf	7,1	;volatile
   561     06F2                     l1297:
   562                           
   563                           ;newmain.c: 30:     TRISCbits.TRISC2 = 0;
   564     06F2  1107               	bcf	7,2	;volatile
   565     06F3                     l1299:
   566                           
   567                           ;newmain.c: 31:     TRISCbits.TRISC3 = 0;
   568     06F3  1187               	bcf	7,3	;volatile
   569     06F4                     l1301:
   570                           
   571                           ;newmain.c: 32:     PORTCbits.RC3 = 1;
   572     06F4  1283               	bcf	3,5	;RP0=0, select bank0
   573     06F5  1303               	bcf	3,6	;RP1=0, select bank0
   574     06F6  1587               	bsf	7,3	;volatile
   575     06F7                     l1303:
   576                           
   577                           ;newmain.c: 33:     TRISCbits.TRISC7 = 1;
   578     06F7  1683               	bsf	3,5	;RP0=1, select bank1
   579     06F8  1303               	bcf	3,6	;RP1=0, select bank1
   580     06F9  1787               	bsf	7,7	;volatile
   581     06FA                     l1305:
   582                           
   583                           ;newmain.c: 34:     TRISCbits.TRISC6 = 1;
   584     06FA  1707               	bsf	7,6	;volatile
   585     06FB                     l1307:
   586                           
   587                           ;newmain.c: 35:     lcd_init();
   588     06FB  120A  118A  2662  120A  118A  	fcall	_lcd_init
   589     0700                     l1309:
   590                           
   591                           ;newmain.c: 37:     lcd_setCursor(0, 0);
   592     0700  01F1               	clrf	lcd_setCursor@y
   593     0701  3000               	movlw	0
   594     0702  120A  118A  267B  120A  118A  	fcall	_lcd_setCursor
   595     0707                     l1311:
   596                           
   597                           ;newmain.c: 38:     lcd_string("Start");
   598     0707  305E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   599     0708  120A  118A  269C  120A  118A  	fcall	_lcd_string
   600     070D                     l1313:
   601                           
   602                           ;newmain.c: 39:     _delay((unsigned long)((500)*(4000000/4000.0)));
   603     070D  3003               	movlw	3
   604     070E  00F8               	movwf	??_main+2
   605     070F  308A               	movlw	138
   606     0710  00F7               	movwf	??_main+1
   607     0711  3055               	movlw	85
   608     0712  00F6               	movwf	??_main
   609     0713                     u2157:
   610     0713  0BF6               	decfsz	??_main,f
   611     0714  2F13               	goto	u2157
   612     0715  0BF7               	decfsz	??_main+1,f
   613     0716  2F13               	goto	u2157
   614     0717  0BF8               	decfsz	??_main+2,f
   615     0718  2F13               	goto	u2157
   616     0719  2F1A               	nop2
   617     071A                     l1315:
   618                           
   619                           ;newmain.c: 40:     lcd_setCursor(0,0);
   620     071A  01F1               	clrf	lcd_setCursor@y
   621     071B  3000               	movlw	0
   622     071C  120A  118A  267B  120A  118A  	fcall	_lcd_setCursor
   623     0721                     l1317:
   624                           
   625                           ;newmain.c: 41:     lcd_string("1.Write EEPROM");
   626     0721  3011               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   627     0722  120A  118A  269C  120A  118A  	fcall	_lcd_string
   628     0727                     l1319:
   629                           
   630                           ;newmain.c: 42:     lcd_setCursor(0,1);
   631     0727  01F1               	clrf	lcd_setCursor@y
   632     0728  0AF1               	incf	lcd_setCursor@y,f
   633     0729  3000               	movlw	0
   634     072A  120A  118A  267B  120A  118A  	fcall	_lcd_setCursor
   635     072F                     l1321:
   636                           
   637                           ;newmain.c: 43:     lcd_string("2.Read EEPROM");
   638     072F  3020               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   639     0730  120A  118A  269C  120A  118A  	fcall	_lcd_string
   640     0735                     l1323:
   641                           
   642                           ;newmain.c: 46:         if (PORTCbits.RC7 == 0) {
   643     0735  1283               	bcf	3,5	;RP0=0, select bank0
   644     0736  1303               	bcf	3,6	;RP1=0, select bank0
   645     0737  1B87               	btfsc	7,7	;volatile
   646     0738  2F3A               	goto	u1171
   647     0739  2F3B               	goto	u1170
   648     073A                     u1171:
   649     073A  2F89               	goto	l1345
   650     073B                     u1170:
   651     073B                     l88:
   652     073B  1F87               	btfss	7,7	;volatile
   653     073C  2F3E               	goto	u1181
   654     073D  2F3F               	goto	u1180
   655     073E                     u1181:
   656     073E  2F3B               	goto	l88
   657     073F                     u1180:
   658     073F                     l1327:
   659                           
   660                           ;newmain.c: 48:             lcd_setCursor(0, 0);
   661     073F  01F1               	clrf	lcd_setCursor@y
   662     0740  3000               	movlw	0
   663     0741  120A  118A  267B  120A  118A  	fcall	_lcd_setCursor
   664     0746                     l1329:
   665                           
   666                           ;newmain.c: 49:             lcd_string("WRITE EEPROM");
   667     0746  302E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   668     0747  120A  118A  269C  120A  118A  	fcall	_lcd_string
   669     074C                     l1331:
   670                           
   671                           ;newmain.c: 50:             EEPROM_write_string(0x00, "le thanh tra");
   672     074C  303B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   673     074D  00F2               	movwf	EEPROM_write_string@Data
   674     074E  3000               	movlw	0
   675     074F  120A  118A  26C3  120A  118A  	fcall	_EEPROM_write_string
   676     0754                     l1333:
   677                           
   678                           ;newmain.c: 51:             _delay((unsigned long)((500)*(4000000/4000.0)));
   679     0754  3003               	movlw	3
   680     0755  00F8               	movwf	??_main+2
   681     0756  308A               	movlw	138
   682     0757  00F7               	movwf	??_main+1
   683     0758  3055               	movlw	85
   684     0759  00F6               	movwf	??_main
   685     075A                     u2167:
   686     075A  0BF6               	decfsz	??_main,f
   687     075B  2F5A               	goto	u2167
   688     075C  0BF7               	decfsz	??_main+1,f
   689     075D  2F5A               	goto	u2167
   690     075E  0BF8               	decfsz	??_main+2,f
   691     075F  2F5A               	goto	u2167
   692     0760  2F61               	nop2
   693     0761                     l1335:
   694                           
   695                           ;newmain.c: 52:             lcd_setCursor(0, 0);
   696     0761  01F1               	clrf	lcd_setCursor@y
   697     0762  3000               	movlw	0
   698     0763  120A  118A  267B  120A  118A  	fcall	_lcd_setCursor
   699     0768                     l1337:
   700                           
   701                           ;newmain.c: 53:             lcd_string("               ");
   702     0768  3001               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   703     0769  120A  118A  269C  120A  118A  	fcall	_lcd_string
   704     076E                     l1339:
   705                           
   706                           ;newmain.c: 54:             lcd_clear();
   707     076E  120A  118A  261F  120A  118A  	fcall	_lcd_clear
   708     0773                     l1341:
   709                           
   710                           ;newmain.c: 55:             _delay((unsigned long)((100)*(4000000/4000.0)));
   711     0773  3082               	movlw	130
   712     0774  00F7               	movwf	??_main+1
   713     0775  30DD               	movlw	221
   714     0776  00F6               	movwf	??_main
   715     0777                     u2177:
   716     0777  0BF6               	decfsz	??_main,f
   717     0778  2F77               	goto	u2177
   718     0779  0BF7               	decfsz	??_main+1,f
   719     077A  2F77               	goto	u2177
   720     077B  2F7C               	nop2
   721     077C                     l1343:
   722                           
   723                           ;newmain.c: 56:             lcd_setCursor(0, 0);
   724     077C  01F1               	clrf	lcd_setCursor@y
   725     077D  3000               	movlw	0
   726     077E  120A  118A  267B  120A  118A  	fcall	_lcd_setCursor
   727                           
   728                           ;newmain.c: 57:             lcd_string("DONE WRITE");
   729     0783  3048               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   730     0784  120A  118A  269C  120A  118A  	fcall	_lcd_string
   731     0789                     l1345:
   732                           
   733                           ;newmain.c: 59:         if (PORTCbits.RC6 == 0) {
   734     0789  1283               	bcf	3,5	;RP0=0, select bank0
   735     078A  1303               	bcf	3,6	;RP1=0, select bank0
   736     078B  1B07               	btfsc	7,6	;volatile
   737     078C  2F8E               	goto	u1191
   738     078D  2F8F               	goto	u1190
   739     078E                     u1191:
   740     078E  2F35               	goto	l1323
   741     078F                     u1190:
   742     078F                     l92:
   743     078F  1F07               	btfss	7,6	;volatile
   744     0790  2F92               	goto	u1201
   745     0791  2F93               	goto	u1200
   746     0792                     u1201:
   747     0792  2F8F               	goto	l92
   748     0793                     u1200:
   749     0793                     l1349:
   750                           
   751                           ;newmain.c: 61:             int i = 0;
   752     0793  01B0               	clrf	main@i
   753     0794  01B1               	clrf	main@i+1
   754     0795                     l1351:
   755                           
   756                           ;newmain.c: 62:             lcd_setCursor(0, 0);
   757     0795  01F1               	clrf	lcd_setCursor@y
   758     0796  3000               	movlw	0
   759     0797  120A  118A  267B  120A  118A  	fcall	_lcd_setCursor
   760     079C                     l1353:
   761                           
   762                           ;newmain.c: 63:             lcd_string("Doc EEPROM");
   763     079C  3053               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   764     079D  120A  118A  269C  120A  118A  	fcall	_lcd_string
   765     07A2                     l1355:
   766                           
   767                           ;newmain.c: 64:             _delay((unsigned long)((500)*(4000000/4000.0)));
   768     07A2  3003               	movlw	3
   769     07A3  00F8               	movwf	??_main+2
   770     07A4  308A               	movlw	138
   771     07A5  00F7               	movwf	??_main+1
   772     07A6  3055               	movlw	85
   773     07A7  00F6               	movwf	??_main
   774     07A8                     u2187:
   775     07A8  0BF6               	decfsz	??_main,f
   776     07A9  2FA8               	goto	u2187
   777     07AA  0BF7               	decfsz	??_main+1,f
   778     07AB  2FA8               	goto	u2187
   779     07AC  0BF8               	decfsz	??_main+2,f
   780     07AD  2FA8               	goto	u2187
   781     07AE  2FAF               	nop2
   782     07AF                     l1357:
   783                           
   784                           ;newmain.c: 65:             lcd_setCursor(0, 0);
   785     07AF  01F1               	clrf	lcd_setCursor@y
   786     07B0  3000               	movlw	0
   787     07B1  120A  118A  267B  120A  118A  	fcall	_lcd_setCursor
   788     07B6                     l1359:
   789                           
   790                           ;newmain.c: 66:             lcd_string("               ");
   791     07B6  3001               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   792     07B7  120A  118A  269C  120A  118A  	fcall	_lcd_string
   793     07BC                     l1361:
   794                           
   795                           ;newmain.c: 67:             lcd_setCursor(0, 0);
   796     07BC  01F1               	clrf	lcd_setCursor@y
   797     07BD  3000               	movlw	0
   798     07BE  120A  118A  267B  120A  118A  	fcall	_lcd_setCursor
   799     07C3                     l1363:
   800                           
   801                           ;newmain.c: 69:                 value[i] = EEPROM_read(0x00 + i);
   802     07C3  1283               	bcf	3,5	;RP0=0, select bank0
   803     07C4  1303               	bcf	3,6	;RP1=0, select bank0
   804     07C5  0830               	movf	main@i,w
   805     07C6  3E20               	addlw	(low (main@value| 0))& (0+255)
   806     07C7  0084               	movwf	4
   807     07C8  0830               	movf	main@i,w
   808     07C9  120A  118A  263A  120A  118A  	fcall	_EEPROM_read
   809     07CE  1383               	bcf	3,7	;select IRP bank0
   810     07CF  0080               	movwf	0
   811     07D0                     l1365:
   812                           
   813                           ;newmain.c: 70:                 if (value[i] == 255)
   814     07D0  1283               	bcf	3,5	;RP0=0, select bank0
   815     07D1  1303               	bcf	3,6	;RP1=0, select bank0
   816     07D2  0830               	movf	main@i,w
   817     07D3  3E20               	addlw	(low (main@value| 0))& (0+255)
   818     07D4  0084               	movwf	4
   819     07D5  0A00               	incf	0,w
   820     07D6  1D03               	btfss	3,2
   821     07D7  2FD9               	goto	u1211
   822     07D8  2FDA               	goto	u1210
   823     07D9                     u1211:
   824     07D9  2FDB               	goto	l1369
   825     07DA                     u1210:
   826     07DA  2F35               	goto	l1323
   827     07DB                     l1369:
   828                           
   829                           ;newmain.c: 72:                 lcd_data(value[i]);
   830     07DB  0830               	movf	main@i,w
   831     07DC  3E20               	addlw	(low (main@value| 0))& (0+255)
   832     07DD  0084               	movwf	4
   833     07DE  0800               	movf	0,w
   834     07DF  120A  118A  2630  120A  118A  	fcall	_lcd_data
   835     07E4                     l1371:
   836                           
   837                           ;newmain.c: 73:                 i++;
   838     07E4  3001               	movlw	1
   839     07E5  1283               	bcf	3,5	;RP0=0, select bank0
   840     07E6  1303               	bcf	3,6	;RP1=0, select bank0
   841     07E7  07B0               	addwf	main@i,f
   842     07E8  1803               	skipnc
   843     07E9  0AB1               	incf	main@i+1,f
   844     07EA  3000               	movlw	0
   845     07EB  07B1               	addwf	main@i+1,f
   846     07EC  2FC3               	goto	l1363
   847     07ED  120A  118A  2800   	ljmp	start
   848     07F0                     __end_of_main:
   849                           
   850                           	psect	text1
   851     069C                     __ptext1:	
   852 ;; *************** function _lcd_string *****************
   853 ;; Defined at:
   854 ;;		line 40 in file "./lcd_8bit.h"
   855 ;; Parameters:    Size  Location     Type
   856 ;;  string_data     1    wreg     PTR unsigned char 
   857 ;;		 -> STR_9(16), STR_8(11), STR_7(11), STR_6(16), 
   858 ;;		 -> STR_4(13), STR_3(14), STR_2(15), STR_1(6), 
   859 ;; Auto vars:     Size  Location     Type
   860 ;;  string_data     1    3[COMMON] PTR unsigned char 
   861 ;;		 -> STR_9(16), STR_8(11), STR_7(11), STR_6(16), 
   862 ;;		 -> STR_4(13), STR_3(14), STR_2(15), STR_1(6), 
   863 ;;  i               2    1[COMMON] int 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   873 ;;      Params:         0       0       0       0       0
   874 ;;      Locals:         3       0       0       0       0
   875 ;;      Temps:          0       0       0       0       0
   876 ;;      Totals:         3       0       0       0       0
   877 ;;Total ram usage:        3 bytes
   878 ;; Hardware stack levels used: 1
   879 ;; Hardware stack levels required when called: 1
   880 ;; This function calls:
   881 ;;		_lcd_data
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887     069C                     _lcd_string:	
   888                           ;psect for function _lcd_string
   889                           
   890                           
   891                           ;incstack = 0
   892                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   893                           ;lcd_string@string_data stored from wreg
   894     069C  00F3               	movwf	lcd_string@string_data
   895     069D                     l1231:
   896                           
   897                           ;./lcd_8bit.h: 41:     int i = 0;
   898     069D  01F1               	clrf	lcd_string@i
   899     069E  01F2               	clrf	lcd_string@i+1
   900                           
   901                           ;./lcd_8bit.h: 42:     for (i = 0; string_data[i] != 0; i++) {
   902     069F  01F1               	clrf	lcd_string@i
   903     06A0  01F2               	clrf	lcd_string@i+1
   904     06A1  2EB5               	goto	l1237
   905     06A2                     l1233:
   906                           
   907                           ;./lcd_8bit.h: 43:         lcd_data(string_data[i]);
   908     06A2  0871               	movf	lcd_string@i,w
   909     06A3  0773               	addwf	lcd_string@string_data,w
   910     06A4  0084               	movwf	4
   911     06A5  120A  118A  2003  120A  118A  	fcall	stringdir
   912     06AA  120A  118A  2630  120A  118A  	fcall	_lcd_data
   913     06AF                     l1235:
   914                           
   915                           ;./lcd_8bit.h: 44:     }
   916     06AF  3001               	movlw	1
   917     06B0  07F1               	addwf	lcd_string@i,f
   918     06B1  1803               	skipnc
   919     06B2  0AF2               	incf	lcd_string@i+1,f
   920     06B3  3000               	movlw	0
   921     06B4  07F2               	addwf	lcd_string@i+1,f
   922     06B5                     l1237:
   923     06B5  0871               	movf	lcd_string@i,w
   924     06B6  0773               	addwf	lcd_string@string_data,w
   925     06B7  0084               	movwf	4
   926     06B8  120A  118A  2003  120A  118A  	fcall	stringdir
   927     06BD  3A00               	xorlw	0
   928     06BE  1D03               	skipz
   929     06BF  2EC1               	goto	u1091
   930     06C0  2EC2               	goto	u1090
   931     06C1                     u1091:
   932     06C1  2EA2               	goto	l1233
   933     06C2                     u1090:
   934     06C2                     l45:
   935     06C2  0008               	return
   936     06C3                     __end_of_lcd_string:
   937                           
   938                           	psect	text2
   939     0630                     __ptext2:	
   940 ;; *************** function _lcd_data *****************
   941 ;; Defined at:
   942 ;;		line 22 in file "./lcd_8bit.h"
   943 ;; Parameters:    Size  Location     Type
   944 ;;  Data            1    wreg     unsigned char 
   945 ;; Auto vars:     Size  Location     Type
   946 ;;  Data            1    0[COMMON] unsigned char 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      void 
   949 ;; Registers used:
   950 ;;		wreg
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   956 ;;      Params:         0       0       0       0       0
   957 ;;      Locals:         1       0       0       0       0
   958 ;;      Temps:          0       0       0       0       0
   959 ;;      Totals:         1       0       0       0       0
   960 ;;Total ram usage:        1 bytes
   961 ;; Hardware stack levels used: 1
   962 ;; This function calls:
   963 ;;		Nothing
   964 ;; This function is called by:
   965 ;;		_lcd_string
   966 ;;		_main
   967 ;;		_lcd_number
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971     0630                     _lcd_data:	
   972                           ;psect for function _lcd_data
   973                           
   974                           
   975                           ;incstack = 0
   976                           ; Regs used in _lcd_data: [wreg]
   977                           ;lcd_data@Data stored from wreg
   978     0630  00F0               	movwf	lcd_data@Data
   979     0631                     l1211:
   980                           
   981                           ;./lcd_8bit.h: 23:     PORTCbits.RC0 = 1;
   982     0631  1283               	bcf	3,5	;RP0=0, select bank0
   983     0632  1303               	bcf	3,6	;RP1=0, select bank0
   984     0633  1407               	bsf	7,0	;volatile
   985                           
   986                           ;./lcd_8bit.h: 24:     PORTCbits.RC1 = 0;
   987     0634  1087               	bcf	7,1	;volatile
   988                           
   989                           ;./lcd_8bit.h: 25:     PORTCbits.RC2 = 1;
   990     0635  1507               	bsf	7,2	;volatile
   991     0636                     l1213:
   992                           
   993                           ;./lcd_8bit.h: 26:     PORTB = Data;
   994     0636  0870               	movf	lcd_data@Data,w
   995     0637  0086               	movwf	6	;volatile
   996     0638                     l1215:
   997                           
   998                           ;./lcd_8bit.h: 27:     PORTCbits.RC2 = 0;
   999     0638  1107               	bcf	7,2	;volatile
  1000     0639                     l1217:
  1001     0639                     l36:	
  1002                           ;./lcd_8bit.h: 28:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000.0)));
  1003                           
  1004     0639  0008               	return
  1005     063A                     __end_of_lcd_data:
  1006                           
  1007                           	psect	text3
  1008     067B                     __ptext3:	
  1009 ;; *************** function _lcd_setCursor *****************
  1010 ;; Defined at:
  1011 ;;		line 70 in file "./lcd_8bit.h"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;  x               1    wreg     unsigned char 
  1014 ;;  y               1    1[COMMON] unsigned char 
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;  x               1    2[COMMON] unsigned char 
  1017 ;; Return value:  Size  Location     Type
  1018 ;;                  1    wreg      void 
  1019 ;; Registers used:
  1020 ;;		wreg, status,2, status,0, pclath, cstack
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1026 ;;      Params:         1       0       0       0       0
  1027 ;;      Locals:         1       0       0       0       0
  1028 ;;      Temps:          0       0       0       0       0
  1029 ;;      Totals:         2       0       0       0       0
  1030 ;;Total ram usage:        2 bytes
  1031 ;; Hardware stack levels used: 1
  1032 ;; Hardware stack levels required when called: 1
  1033 ;; This function calls:
  1034 ;;		_lcd_command
  1035 ;; This function is called by:
  1036 ;;		_main
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040     067B                     _lcd_setCursor:	
  1041                           ;psect for function _lcd_setCursor
  1042                           
  1043                           
  1044                           ;incstack = 0
  1045                           ; Regs used in _lcd_setCursor: [wreg+status,2+status,0+pclath+cstack]
  1046                           ;lcd_setCursor@x stored from wreg
  1047     067B  00F2               	movwf	lcd_setCursor@x
  1048     067C                     l1239:
  1049                           
  1050                           ;./lcd_8bit.h: 70: void lcd_setCursor(unsigned char x, unsigned char y);./lcd_8bit.h: 71
      +                          : {;./lcd_8bit.h: 72:     if (x >= 0 && x < 16) {
  1051     067C  3010               	movlw	16
  1052     067D  0272               	subwf	lcd_setCursor@x,w
  1053     067E  1803               	skipnc
  1054     067F  2E81               	goto	u1101
  1055     0680  2E82               	goto	u1100
  1056     0681                     u1101:
  1057     0681  2E9B               	goto	l63
  1058     0682                     u1100:
  1059     0682                     l1241:
  1060                           
  1061                           ;./lcd_8bit.h: 73:         if (y == 0)
  1062     0682  0871               	movf	lcd_setCursor@y,w
  1063     0683  1D03               	btfss	3,2
  1064     0684  2E86               	goto	u1111
  1065     0685  2E87               	goto	u1110
  1066     0686                     u1111:
  1067     0686  2E8F               	goto	l1245
  1068     0687                     u1110:
  1069     0687                     l1243:
  1070                           
  1071                           ;./lcd_8bit.h: 74:         {;./lcd_8bit.h: 75:             lcd_command(0x80 + x);
  1072     0687  0872               	movf	lcd_setCursor@x,w
  1073     0688  3E80               	addlw	128
  1074     0689  120A  118A  2626  120A  118A  	fcall	_lcd_command
  1075                           
  1076                           ;./lcd_8bit.h: 77:         } else if (y == 1)
  1077     068E  2E9B               	goto	l63
  1078     068F                     l1245:
  1079     068F  0371               	decf	lcd_setCursor@y,w
  1080     0690  1D03               	btfss	3,2
  1081     0691  2E93               	goto	u1121
  1082     0692  2E94               	goto	u1120
  1083     0693                     u1121:
  1084     0693  2E9B               	goto	l63
  1085     0694                     u1120:
  1086     0694                     l1247:
  1087                           
  1088                           ;./lcd_8bit.h: 78:         {;./lcd_8bit.h: 79:             lcd_command(0xC0 + x);
  1089     0694  0872               	movf	lcd_setCursor@x,w
  1090     0695  3EC0               	addlw	192
  1091     0696  120A  118A  2626  120A  118A  	fcall	_lcd_command
  1092     069B                     l63:
  1093     069B  0008               	return
  1094     069C                     __end_of_lcd_setCursor:
  1095                           
  1096                           	psect	text4
  1097     0662                     __ptext4:	
  1098 ;; *************** function _lcd_init *****************
  1099 ;; Defined at:
  1100 ;;		line 31 in file "./lcd_8bit.h"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;		None
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, pclath, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1114 ;;      Params:         0       0       0       0       0
  1115 ;;      Locals:         0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0
  1117 ;;      Totals:         0       0       0       0       0
  1118 ;;Total ram usage:        0 bytes
  1119 ;; Hardware stack levels used: 1
  1120 ;; Hardware stack levels required when called: 1
  1121 ;; This function calls:
  1122 ;;		_lcd_command
  1123 ;; This function is called by:
  1124 ;;		_main
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128     0662                     _lcd_init:	
  1129                           ;psect for function _lcd_init
  1130                           
  1131     0662                     l1229:	
  1132                           ;incstack = 0
  1133                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1134                           
  1135                           
  1136                           ;./lcd_8bit.h: 33:     lcd_command(0x0C);
  1137     0662  300C               	movlw	12
  1138     0663  120A  118A  2626  120A  118A  	fcall	_lcd_command
  1139                           
  1140                           ;./lcd_8bit.h: 34:     lcd_command(0x38);
  1141     0668  3038               	movlw	56
  1142     0669  120A  118A  2626  120A  118A  	fcall	_lcd_command
  1143                           
  1144                           ;./lcd_8bit.h: 35:     lcd_command(0x01);
  1145     066E  3001               	movlw	1
  1146     066F  120A  118A  2626  120A  118A  	fcall	_lcd_command
  1147                           
  1148                           ;./lcd_8bit.h: 36:     lcd_command(0x80);
  1149     0674  3080               	movlw	128
  1150     0675  120A  118A  2626  120A  118A  	fcall	_lcd_command
  1151     067A                     l39:
  1152     067A  0008               	return
  1153     067B                     __end_of_lcd_init:
  1154                           
  1155                           	psect	text5
  1156     061F                     __ptext5:	
  1157 ;; *************** function _lcd_clear *****************
  1158 ;; Defined at:
  1159 ;;		line 83 in file "./lcd_8bit.h"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;		None
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, status,2, status,0, pclath, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1173 ;;      Params:         0       0       0       0       0
  1174 ;;      Locals:         0       0       0       0       0
  1175 ;;      Temps:          0       0       0       0       0
  1176 ;;      Totals:         0       0       0       0       0
  1177 ;;Total ram usage:        0 bytes
  1178 ;; Hardware stack levels used: 1
  1179 ;; Hardware stack levels required when called: 1
  1180 ;; This function calls:
  1181 ;;		_lcd_command
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187     061F                     _lcd_clear:	
  1188                           ;psect for function _lcd_clear
  1189                           
  1190     061F                     l1249:	
  1191                           ;incstack = 0
  1192                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1193                           
  1194                           
  1195                           ;./lcd_8bit.h: 85:     lcd_command(0x01);
  1196     061F  3001               	movlw	1
  1197     0620  120A  118A  2626  120A  118A  	fcall	_lcd_command
  1198     0625                     l66:
  1199     0625  0008               	return
  1200     0626                     __end_of_lcd_clear:
  1201                           
  1202                           	psect	text6
  1203     0626                     __ptext6:	
  1204 ;; *************** function _lcd_command *****************
  1205 ;; Defined at:
  1206 ;;		line 13 in file "./lcd_8bit.h"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  cmd             1    wreg     unsigned char 
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;  cmd             1    0[COMMON] unsigned char 
  1211 ;; Return value:  Size  Location     Type
  1212 ;;                  1    wreg      void 
  1213 ;; Registers used:
  1214 ;;		wreg
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1220 ;;      Params:         0       0       0       0       0
  1221 ;;      Locals:         1       0       0       0       0
  1222 ;;      Temps:          0       0       0       0       0
  1223 ;;      Totals:         1       0       0       0       0
  1224 ;;Total ram usage:        1 bytes
  1225 ;; Hardware stack levels used: 1
  1226 ;; This function calls:
  1227 ;;		Nothing
  1228 ;; This function is called by:
  1229 ;;		_lcd_init
  1230 ;;		_lcd_setCursor
  1231 ;;		_lcd_clear
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235     0626                     _lcd_command:	
  1236                           ;psect for function _lcd_command
  1237                           
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in _lcd_command: [wreg]
  1241                           ;lcd_command@cmd stored from wreg
  1242     0626  00F0               	movwf	lcd_command@cmd
  1243     0627                     l1203:
  1244                           
  1245                           ;./lcd_8bit.h: 14:     PORTCbits.RC0 = 0x00;
  1246     0627  1283               	bcf	3,5	;RP0=0, select bank0
  1247     0628  1303               	bcf	3,6	;RP1=0, select bank0
  1248     0629  1007               	bcf	7,0	;volatile
  1249                           
  1250                           ;./lcd_8bit.h: 15:     PORTCbits.RC1 = 0x00;
  1251     062A  1087               	bcf	7,1	;volatile
  1252                           
  1253                           ;./lcd_8bit.h: 16:     PORTCbits.RC2 = 0x01;
  1254     062B  1507               	bsf	7,2	;volatile
  1255     062C                     l1205:
  1256                           
  1257                           ;./lcd_8bit.h: 17:     PORTB = cmd;
  1258     062C  0870               	movf	lcd_command@cmd,w
  1259     062D  0086               	movwf	6	;volatile
  1260     062E                     l1207:
  1261                           
  1262                           ;./lcd_8bit.h: 18:     PORTCbits.RC2 = 0;
  1263     062E  1107               	bcf	7,2	;volatile
  1264     062F                     l1209:
  1265     062F                     l33:	
  1266                           ;./lcd_8bit.h: 19:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000.0)));
  1267                           
  1268     062F  0008               	return
  1269     0630                     __end_of_lcd_command:
  1270                           
  1271                           	psect	text7
  1272     06C3                     __ptext7:	
  1273 ;; *************** function _EEPROM_write_string *****************
  1274 ;; Defined at:
  1275 ;;		line 19 in file "./eeprom.h"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  ADR             1    wreg     unsigned char 
  1278 ;;  Data            1    2[COMMON] PTR unsigned char 
  1279 ;;		 -> STR_5(13), 
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;  ADR             1    3[COMMON] unsigned char 
  1282 ;;  i               2    4[COMMON] int 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1292 ;;      Params:         1       0       0       0       0
  1293 ;;      Locals:         3       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0
  1295 ;;      Totals:         4       0       0       0       0
  1296 ;;Total ram usage:        4 bytes
  1297 ;; Hardware stack levels used: 1
  1298 ;; Hardware stack levels required when called: 1
  1299 ;; This function calls:
  1300 ;;		_EEPROM_write
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306     06C3                     _EEPROM_write_string:	
  1307                           ;psect for function _EEPROM_write_string
  1308                           
  1309                           
  1310                           ;incstack = 0
  1311                           ; Regs used in _EEPROM_write_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1312                           ;EEPROM_write_string@ADR stored from wreg
  1313     06C3  00F3               	movwf	EEPROM_write_string@ADR
  1314     06C4                     l1251:
  1315                           
  1316                           ;./eeprom.h: 20:     int i = 0;
  1317     06C4  01F4               	clrf	EEPROM_write_string@i
  1318     06C5  01F5               	clrf	EEPROM_write_string@i+1
  1319                           
  1320                           ;./eeprom.h: 21:     for (i = 0; Data[i] != 0; i++) {
  1321     06C6  01F4               	clrf	EEPROM_write_string@i
  1322     06C7  01F5               	clrf	EEPROM_write_string@i+1
  1323     06C8  2EDF               	goto	l1257
  1324     06C9                     l1253:
  1325                           
  1326                           ;./eeprom.h: 22:         EEPROM_write(ADR + i, Data[i]);
  1327     06C9  0874               	movf	EEPROM_write_string@i,w
  1328     06CA  0772               	addwf	EEPROM_write_string@Data,w
  1329     06CB  0084               	movwf	4
  1330     06CC  120A  118A  2003  120A  118A  	fcall	stringdir
  1331     06D1  00F0               	movwf	EEPROM_write@Data
  1332     06D2  0874               	movf	EEPROM_write_string@i,w
  1333     06D3  0773               	addwf	EEPROM_write_string@ADR,w
  1334     06D4  120A  118A  2649  120A  118A  	fcall	_EEPROM_write
  1335     06D9                     l1255:
  1336                           
  1337                           ;./eeprom.h: 23:     }
  1338     06D9  3001               	movlw	1
  1339     06DA  07F4               	addwf	EEPROM_write_string@i,f
  1340     06DB  1803               	skipnc
  1341     06DC  0AF5               	incf	EEPROM_write_string@i+1,f
  1342     06DD  3000               	movlw	0
  1343     06DE  07F5               	addwf	EEPROM_write_string@i+1,f
  1344     06DF                     l1257:
  1345     06DF  0874               	movf	EEPROM_write_string@i,w
  1346     06E0  0772               	addwf	EEPROM_write_string@Data,w
  1347     06E1  0084               	movwf	4
  1348     06E2  120A  118A  2003  120A  118A  	fcall	stringdir
  1349     06E7  3A00               	xorlw	0
  1350     06E8  1D03               	skipz
  1351     06E9  2EEB               	goto	u1131
  1352     06EA  2EEC               	goto	u1130
  1353     06EB                     u1131:
  1354     06EB  2EC9               	goto	l1253
  1355     06EC                     u1130:
  1356     06EC                     l78:
  1357     06EC  0008               	return
  1358     06ED                     __end_of_EEPROM_write_string:
  1359                           
  1360                           	psect	text8
  1361     0649                     __ptext8:	
  1362 ;; *************** function _EEPROM_write *****************
  1363 ;; Defined at:
  1364 ;;		line 5 in file "./eeprom.h"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  ADR             1    wreg     unsigned char 
  1367 ;;  Data            1    0[COMMON] unsigned char 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  ADR             1    1[COMMON] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1379 ;;      Params:         1       0       0       0       0
  1380 ;;      Locals:         1       0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0
  1382 ;;      Totals:         2       0       0       0       0
  1383 ;;Total ram usage:        2 bytes
  1384 ;; Hardware stack levels used: 1
  1385 ;; This function calls:
  1386 ;;		Nothing
  1387 ;; This function is called by:
  1388 ;;		_EEPROM_write_string
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392     0649                     _EEPROM_write:	
  1393                           ;psect for function _EEPROM_write
  1394                           
  1395                           
  1396                           ;incstack = 0
  1397                           ; Regs used in _EEPROM_write: [wreg]
  1398                           ;EEPROM_write@ADR stored from wreg
  1399     0649  00F1               	movwf	EEPROM_write@ADR
  1400     064A                     l1219:
  1401                           
  1402                           ;./eeprom.h: 6:     EEADR = ADR;
  1403     064A  0871               	movf	EEPROM_write@ADR,w
  1404     064B  1283               	bcf	3,5	;RP0=0, select bank2
  1405     064C  1703               	bsf	3,6	;RP1=1, select bank2
  1406     064D  008D               	movwf	13	;volatile
  1407                           
  1408                           ;./eeprom.h: 7:     EEDAT = Data;
  1409     064E  0870               	movf	EEPROM_write@Data,w
  1410     064F  008C               	movwf	12	;volatile
  1411     0650                     l1221:
  1412                           
  1413                           ;./eeprom.h: 9:     WREN = 1;
  1414     0650  1683               	bsf	3,5	;RP0=1, select bank3
  1415     0651  1703               	bsf	3,6	;RP1=1, select bank3
  1416     0652  150C               	bsf	12,2	;volsfr
  1417     0653                     l1223:
  1418                           
  1419                           ;./eeprom.h: 10:     GIE = 0;
  1420     0653  138B               	bcf	11,7	;volatile
  1421                           
  1422                           ;./eeprom.h: 11:     EECON2 = 0x55;
  1423     0654  3055               	movlw	85
  1424     0655  008D               	movwf	13	;volsfr
  1425                           
  1426                           ;./eeprom.h: 12:     EECON2 = 0xAA;
  1427     0656  30AA               	movlw	170
  1428     0657  008D               	movwf	13	;volsfr
  1429     0658                     l1225:
  1430                           
  1431                           ;./eeprom.h: 13:     WR = 1;
  1432     0658  148C               	bsf	12,1	;volsfr
  1433     0659                     l1227:
  1434                           
  1435                           ;./eeprom.h: 14:     WREN = 0;
  1436     0659  110C               	bcf	12,2	;volsfr
  1437     065A                     l69:	
  1438                           ;./eeprom.h: 15:     while (!EEIF);
  1439                           
  1440     065A  1283               	bcf	3,5	;RP0=0, select bank0
  1441     065B  1303               	bcf	3,6	;RP1=0, select bank0
  1442     065C  1E0D               	btfss	13,4	;volatile
  1443     065D  2E5F               	goto	u1081
  1444     065E  2E60               	goto	u1080
  1445     065F                     u1081:
  1446     065F  2E5A               	goto	l69
  1447     0660                     u1080:
  1448     0660                     l71:
  1449                           
  1450                           ;./eeprom.h: 16:     EEIF = 0;
  1451     0660  120D               	bcf	13,4	;volatile
  1452     0661                     l72:
  1453     0661  0008               	return
  1454     0662                     __end_of_EEPROM_write:
  1455                           
  1456                           	psect	text9
  1457     063A                     __ptext9:	
  1458 ;; *************** function _EEPROM_read *****************
  1459 ;; Defined at:
  1460 ;;		line 26 in file "./eeprom.h"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  ADR             1    wreg     unsigned char 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  ADR             1    0[COMMON] unsigned char 
  1465 ;;  Data            1    1[COMMON] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      unsigned char 
  1468 ;; Registers used:
  1469 ;;		wreg
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1475 ;;      Params:         0       0       0       0       0
  1476 ;;      Locals:         2       0       0       0       0
  1477 ;;      Temps:          0       0       0       0       0
  1478 ;;      Totals:         2       0       0       0       0
  1479 ;;Total ram usage:        2 bytes
  1480 ;; Hardware stack levels used: 1
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488     063A                     _EEPROM_read:	
  1489                           ;psect for function _EEPROM_read
  1490                           
  1491                           
  1492                           ;incstack = 0
  1493                           ; Regs used in _EEPROM_read: [wreg]
  1494                           ;EEPROM_read@ADR stored from wreg
  1495     063A  00F0               	movwf	EEPROM_read@ADR
  1496     063B                     l1259:
  1497                           
  1498                           ;./eeprom.h: 27:     unsigned char Data;;./eeprom.h: 28:     EEADR = ADR;
  1499     063B  0870               	movf	EEPROM_read@ADR,w
  1500     063C  1283               	bcf	3,5	;RP0=0, select bank2
  1501     063D  1703               	bsf	3,6	;RP1=1, select bank2
  1502     063E  008D               	movwf	13	;volatile
  1503     063F                     l1261:
  1504                           
  1505                           ;./eeprom.h: 29:     EEPGD = 0;
  1506     063F  1683               	bsf	3,5	;RP0=1, select bank3
  1507     0640  1703               	bsf	3,6	;RP1=1, select bank3
  1508     0641  138C               	bcf	12,7	;volsfr
  1509     0642                     l1263:
  1510                           
  1511                           ;./eeprom.h: 30:     RD = 1;
  1512     0642  140C               	bsf	12,0	;volsfr
  1513                           
  1514                           ;./eeprom.h: 31:     Data = EEDAT;
  1515     0643  1283               	bcf	3,5	;RP0=0, select bank2
  1516     0644  1703               	bsf	3,6	;RP1=1, select bank2
  1517     0645  080C               	movf	12,w	;volatile
  1518     0646  00F1               	movwf	EEPROM_read@Data
  1519                           
  1520                           ;./eeprom.h: 32:     return Data;
  1521     0647  0871               	movf	EEPROM_read@Data,w
  1522     0648                     l81:
  1523     0648  0008               	return
  1524     0649                     __end_of_EEPROM_read:
  1525     007E                     btemp	set	126	;btemp
  1526     007E                     wtemp0	set	126
  1527                           
  1528                           	psect	config
  1529                           
  1530                           ;Config register CONFIG1 @ 0x2007
  1531                           ;	Oscillator Selection bits
  1532                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1533                           ;	Watchdog Timer Enable bit
  1534                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1535                           ;	Power-up Timer Enable bit
  1536                           ;	PWRTE = OFF, PWRT disabled
  1537                           ;	RE3/MCLR pin function select bit
  1538                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  1539                           ;	Code Protection bit
  1540                           ;	CP = ON, Program memory code protection is enabled
  1541                           ;	Data Code Protection bit
  1542                           ;	CPD = ON, Data memory code protection is enabled
  1543                           ;	Brown Out Reset Selection bits
  1544                           ;	BOREN = ON, BOR enabled
  1545                           ;	Internal External Switchover bit
  1546                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1547                           ;	Fail-Safe Clock Monitor Enabled bit
  1548                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1549                           ;	Low Voltage Programming Enable bit
  1550                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1551                           ;	In-Circuit Debugger Mode bit
  1552                           ;	DEBUG = 0x1, unprogrammed default
  1553     2007                     	org	8199
  1554     2007  2332               	dw	9010
  1555                           
  1556                           ;Config register CONFIG2 @ 0x2008
  1557                           ;	Brown-out Reset Selection bit
  1558                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1559                           ;	Flash Program Memory Self Write Enable bits
  1560                           ;	WRT = OFF, Write protection off
  1561     2008                     	org	8200
  1562     2008  3FFF               	dw	16383

Data Sizes:
    Strings     99
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     18      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    EEPROM_write_string@Data	PTR unsigned char  size(1) Largest target is 13
		 -> STR_5(CODE[13]), 

    lcd_string@string_data	PTR unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[6]), STR_2(CODE[15]), STR_3(CODE[14]), STR_4(CODE[13]), 
		 -> STR_6(CODE[16]), STR_7(CODE[11]), STR_8(CODE[11]), STR_9(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_EEPROM_write_string
    _lcd_string->_lcd_data
    _lcd_setCursor->_lcd_command
    _lcd_init->_lcd_command
    _lcd_clear->_lcd_command
    _EEPROM_write_string->_EEPROM_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0    1795
                                              6 COMMON     3     3      0
                                              0 BANK0     18    18      0
                        _EEPROM_read
                _EEPROM_write_string
                          _lcd_clear
                           _lcd_data
                           _lcd_init
                      _lcd_setCursor
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           3     3      0     377
                                              1 COMMON     3     3      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_setCursor                                        2     1      1     816
                                              1 COMMON     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      22
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0      22
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_write_string                                  4     3      1     331
                                              2 COMMON     4     3      1
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         2     1      1     120
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_read                                          2     2      0      45
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_read
   _EEPROM_write_string
     _EEPROM_write
   _lcd_clear
     _lcd_command
   _lcd_data
   _lcd_init
     _lcd_command
   _lcd_setCursor
     _lcd_command
   _lcd_string
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      12       5       22.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1D      12        0.0%
ABS                  0      0      1D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Jun 14 13:49:10 2024

               lcd_data@Data 0070                            pc 0002               ?_lcd_setCursor 0071  
                         l33 062F                           l36 0639                           l45 06C2  
                         l71 0660                           l39 067A                           l63 069B  
                         l72 0661                           l81 0648                           l66 0625  
                         l92 078F                           l69 065A                           l78 06EC  
                         l88 073B                           _RD 0C60                           _WR 0C61  
                         fsr 0004         ?_EEPROM_write_string 0072                          _GIE 005F  
                        fsr0 0004                          indf 0000                         l1203 0627  
                       l1211 0631                         l1221 0650                         l1205 062C  
                       l1213 0636                         l1301 06F4                         l1223 0653  
                       l1207 062E                         l1215 0638                         l1231 069D  
                       l1311 0707                         l1303 06F7                         l1225 0658  
                       l1209 062F                         l1241 0682                         l1217 0639  
                       l1233 06A2                         l1321 072F                         l1313 070D  
                       l1305 06FA                         l1227 0659                         l1219 064A  
                       l1251 06C4                         l1243 0687                         l1235 06AF  
                       l1331 074C                         l1323 0735                         l1315 071A  
                       l1307 06FB                         l1261 063F                         l1253 06C9  
                       l1229 0662                         l1245 068F                         l1237 06B5  
                       l1341 0773                         l1333 0754                         l1317 0721  
                       l1309 0700                         l1263 0642                         l1255 06D9  
                       l1247 0694                         l1239 067C                         l1351 0795  
                       l1343 077C                         l1335 0761                         l1327 073F  
                       l1319 0727                         l1257 06DF                         l1249 061F  
                       l1361 07BC                         l1353 079C                         l1337 0768  
                       l1329 0746                         l1345 0789                         l1259 063B  
                       l1371 07E4                         l1363 07C3                         l1355 07A2  
                       l1339 076E                         l1291 06ED                         l1365 07D0  
                       l1357 07AF                         l1349 0793                         l1293 06F0  
                       l1359 07B6                         l1295 06F1                         l1369 07DB  
                       l1297 06F2                         l1299 06F3                         _EEIF 006C  
                       STR_1 0066                         STR_2 0019                         STR_3 0028  
                       STR_4 0036                         STR_5 0043                         STR_6 0009  
                       STR_7 0050                         STR_8 005B                         STR_9 0009  
                       u1100 0682                         u1101 0681                         u1110 0687  
                       u1111 0686                         u1120 0694                         u1200 0793  
                       u1121 0693                         u1201 0792                         u1130 06EC  
                       u1210 07DA                         u1131 06EB                         u1211 07D9  
                       u1080 0660                         u1081 065F                         u1090 06C2  
                       u1170 073B                         u1091 06C1                         u1171 073A  
                       u1180 073F                         u1181 073E                         u1190 078F  
                       u1191 078E                         u2157 0713                         u2167 075A  
                       u2177 0777                         u2187 07A8                         _WREN 0C62  
                       _main 06ED                         btemp 007E                         start 0000  
             EEPROM_read@ADR 0070                  lcd_string@i 0071       EEPROM_write_string@ADR 0073  
      ??_EEPROM_write_string 0073         __end_of_EEPROM_write 0662                        ?_main 0070  
                      _EEADR 010D                        _EEDAT 010C                        _EEPGD 0C67  
                      _PORTB 0006                        _TRISB 0086                        main@i 0030  
                      pclath 000A                   __XTAL_FREQ 0079                        status 0003  
                      wtemp0 007E              EEPROM_read@Data 0071      EEPROM_write_string@Data 0072  
            __initialization 07F0              ??_lcd_setCursor 0072                 __end_of_main 07F0  
                     ??_main 0076               lcd_command@cmd 0070                       _EECON2 018D  
            EEPROM_write@ADR 0071             __end_of_lcd_data 063A             __end_of_lcd_init 067B  
               __pdataCOMMON 0079      __end_of__initialization 07FC               __pcstackCOMMON 0070  
               _EEPROM_write 0649               lcd_setCursor@x 0072               lcd_setCursor@y 0071  
                 __pmaintext 06ED                    ?_lcd_data 0070                   _lcd_string 069C  
                  ?_lcd_init 0070                   __stringtab 0003             EEPROM_write@Data 0070  
          __end_of_lcd_clear 0626  __end_of_EEPROM_write_string 06ED                      __ptext1 069C  
                    __ptext2 0630                      __ptext3 067B                      __ptext4 0662  
                    __ptext5 061F                      __ptext6 0626                      __ptext7 06C3  
                    __ptext8 0649                      __ptext9 063A                   ??_lcd_data 0070  
                 ??_lcd_init 0071         end_of_initialization 07FC                ??_EEPROM_read 0070  
      lcd_string@string_data 0073        __end_of_lcd_setCursor 069C                    _PORTCbits 0007  
                  _TRISCbits 0087                  ?_lcd_string 0070         EEPROM_write_string@i 0074  
              ??_lcd_command 0070          __end_of_EEPROM_read 0649                __pidataCOMMON 061D  
        start_initialization 07F0          __end_of_lcd_command 0630                    ___latbits 0002  
              __pcstackBANK0 0020                  _EEPROM_read 063A                    _lcd_clear 061F  
                  __pstrings 0003                  _lcd_command 0626                   ?_lcd_clear 0070  
                __stringbase 0008                    main@value 0020                 ??_lcd_string 0071  
         __end_of_lcd_string 06C3           __end_of__stringtab 0009                     _lcd_data 0630  
                   _lcd_init 0662                ?_EEPROM_write 0070                  ??_lcd_clear 0071  
             ??_EEPROM_write 0071                 ?_EEPROM_read 0070                    stringcode 0003  
              _lcd_setCursor 067B                     stringdir 0003                     stringtab 0003  
        _EEPROM_write_string 06C3                 ?_lcd_command 0070  
