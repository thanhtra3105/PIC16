

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Jun 13 14:19:17 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0088                     	;# 
    92     0089                     	;# 
    93     008C                     	;# 
    94     008D                     	;# 
    95     008E                     	;# 
    96     008F                     	;# 
    97     0090                     	;# 
    98     0091                     	;# 
    99     0092                     	;# 
   100     0093                     	;# 
   101     0093                     	;# 
   102     0093                     	;# 
   103     0094                     	;# 
   104     0095                     	;# 
   105     0096                     	;# 
   106     0097                     	;# 
   107     0098                     	;# 
   108     0099                     	;# 
   109     009A                     	;# 
   110     009B                     	;# 
   111     009C                     	;# 
   112     009D                     	;# 
   113     009E                     	;# 
   114     009F                     	;# 
   115     0105                     	;# 
   116     0107                     	;# 
   117     0108                     	;# 
   118     0109                     	;# 
   119     010C                     	;# 
   120     010C                     	;# 
   121     010D                     	;# 
   122     010E                     	;# 
   123     010F                     	;# 
   124     0185                     	;# 
   125     0187                     	;# 
   126     0188                     	;# 
   127     0189                     	;# 
   128     018C                     	;# 
   129     018D                     	;# 
   130     0000                     	;# 
   131     0001                     	;# 
   132     0002                     	;# 
   133     0003                     	;# 
   134     0004                     	;# 
   135     0005                     	;# 
   136     0006                     	;# 
   137     0007                     	;# 
   138     0008                     	;# 
   139     0009                     	;# 
   140     000A                     	;# 
   141     000B                     	;# 
   142     000C                     	;# 
   143     000D                     	;# 
   144     000E                     	;# 
   145     000E                     	;# 
   146     000F                     	;# 
   147     0010                     	;# 
   148     0011                     	;# 
   149     0012                     	;# 
   150     0013                     	;# 
   151     0014                     	;# 
   152     0015                     	;# 
   153     0015                     	;# 
   154     0016                     	;# 
   155     0017                     	;# 
   156     0018                     	;# 
   157     0019                     	;# 
   158     001A                     	;# 
   159     001B                     	;# 
   160     001B                     	;# 
   161     001C                     	;# 
   162     001D                     	;# 
   163     001E                     	;# 
   164     001F                     	;# 
   165     0081                     	;# 
   166     0085                     	;# 
   167     0086                     	;# 
   168     0087                     	;# 
   169     0088                     	;# 
   170     0089                     	;# 
   171     008C                     	;# 
   172     008D                     	;# 
   173     008E                     	;# 
   174     008F                     	;# 
   175     0090                     	;# 
   176     0091                     	;# 
   177     0092                     	;# 
   178     0093                     	;# 
   179     0093                     	;# 
   180     0093                     	;# 
   181     0094                     	;# 
   182     0095                     	;# 
   183     0096                     	;# 
   184     0097                     	;# 
   185     0098                     	;# 
   186     0099                     	;# 
   187     009A                     	;# 
   188     009B                     	;# 
   189     009C                     	;# 
   190     009D                     	;# 
   191     009E                     	;# 
   192     009F                     	;# 
   193     0105                     	;# 
   194     0107                     	;# 
   195     0108                     	;# 
   196     0109                     	;# 
   197     010C                     	;# 
   198     010C                     	;# 
   199     010D                     	;# 
   200     010E                     	;# 
   201     010F                     	;# 
   202     0185                     	;# 
   203     0187                     	;# 
   204     0188                     	;# 
   205     0189                     	;# 
   206     018C                     	;# 
   207     018D                     	;# 
   208     0007                     _PORTC	set	7
   209     0008                     _PORTD	set	8
   210     0006                     _PORTB	set	6
   211     0007                     _PORTCbits	set	7
   212     006C                     _EEIF	set	108
   213     005F                     _GIE	set	95
   214     0087                     _TRISC	set	135
   215     0086                     _TRISB	set	134
   216     0087                     _TRISCbits	set	135
   217     010C                     _EEDAT	set	268
   218     010D                     _EEADR	set	269
   219     018D                     _EECON2	set	397
   220     0C60                     _RD	set	3168
   221     0C67                     _EEPGD	set	3175
   222     0C61                     _WR	set	3169
   223     0C62                     _WREN	set	3170
   224                           
   225                           	psect	strings
   226     0003                     __pstrings:
   227     0003                     stringtab:
   228     0003                     __stringtab:
   229     0003                     stringcode:	
   230                           ;	String table - string pointers are 1 byte each
   231                           
   232     0003                     stringdir:
   233     0003  3000               	movlw	high stringdir
   234     0004  008A               	movwf	10
   235     0005  0804               	movf	4,w
   236     0006  0A84               	incf	4,f
   237     0007  0782               	addwf	2,f
   238     0008                     __stringbase:
   239     0008  3400               	retlw	0
   240     0009                     __end_of__stringtab:
   241     0009                     STR_1:
   242     0009  3457               	retlw	87	;'W'
   243     000A  3472               	retlw	114	;'r'
   244     000B  3469               	retlw	105	;'i'
   245     000C  3474               	retlw	116	;'t'
   246     000D  3465               	retlw	101	;'e'
   247     000E  3420               	retlw	32	;' '
   248     000F  3472               	retlw	114	;'r'
   249     0010  3465               	retlw	101	;'e'
   250     0011  3467               	retlw	103	;'g'
   251     0012  3420               	retlw	32	;' '
   252     0013  3430               	retlw	48	;'0'
   253     0014  3478               	retlw	120	;'x'
   254     0015  3430               	retlw	48	;'0'
   255     0016  3431               	retlw	49	;'1'
   256     0017  3400               	retlw	0
   257                           
   258                           	psect	cinit
   259     07FC                     start_initialization:	
   260                           ; #config settings
   261                           
   262     07FC                     __initialization:
   263     07FC                     end_of_initialization:	
   264                           ;End of C runtime variable initialization code
   265                           
   266     07FC                     __end_of__initialization:
   267     07FC  0183               	clrf	3
   268     07FD  120A  118A  2FA5   	ljmp	_main	;jump to C main() function
   269                           
   270                           	psect	cstackCOMMON
   271     0070                     __pcstackCOMMON:
   272     0070                     ?_lcd_command:
   273     0070                     ??_lcd_command:	
   274                           ; 1 bytes @ 0x0
   275                           
   276     0070                     ?_lcd_data:	
   277                           ; 1 bytes @ 0x0
   278                           
   279     0070                     ??_lcd_data:	
   280                           ; 1 bytes @ 0x0
   281                           
   282     0070                     ?_lcd_init:	
   283                           ; 1 bytes @ 0x0
   284                           
   285     0070                     ?_lcd_string:	
   286                           ; 1 bytes @ 0x0
   287                           
   288     0070                     ?_EEPROM_read:	
   289                           ; 1 bytes @ 0x0
   290                           
   291     0070                     ??_EEPROM_read:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     0070                     ?_main:	
   295                           ; 1 bytes @ 0x0
   296                           
   297     0070                     EEPROM_read@ADR:	
   298                           ; 1 bytes @ 0x0
   299                           
   300                           
   301                           ; 1 bytes @ 0x0
   302     0070                     	ds	1
   303     0071                     lcd_command@cmd:
   304     0071                     lcd_data@Data:	
   305                           ; 1 bytes @ 0x1
   306                           
   307     0071                     EEPROM_read@Data:	
   308                           ; 1 bytes @ 0x1
   309                           
   310                           
   311                           ; 1 bytes @ 0x1
   312     0071                     	ds	1
   313     0072                     ??_lcd_init:
   314     0072                     ??_lcd_string:	
   315                           ; 1 bytes @ 0x2
   316                           
   317     0072                     ?_lcd_setCursor:	
   318                           ; 1 bytes @ 0x2
   319                           
   320     0072                     lcd_string@string_data:	
   321                           ; 1 bytes @ 0x2
   322                           
   323     0072                     lcd_setCursor@y:	
   324                           ; 1 bytes @ 0x2
   325                           
   326                           
   327                           ; 1 bytes @ 0x2
   328     0072                     	ds	1
   329     0073                     ??_lcd_setCursor:
   330     0073                     lcd_setCursor@x:	
   331                           ; 1 bytes @ 0x3
   332                           
   333     0073                     lcd_string@i:	
   334                           ; 1 bytes @ 0x3
   335                           
   336                           
   337                           ; 2 bytes @ 0x3
   338     0073                     	ds	2
   339     0075                     ??_main:
   340                           
   341                           	psect	cstackBANK0
   342     0020                     __pcstackBANK0:	
   343                           ; 1 bytes @ 0x5
   344                           
   345     0020                     main@value:
   346                           
   347                           ; 16 bytes @ 0x0
   348     0020                     	ds	16
   349     0030                     main@i:
   350                           
   351                           ; 2 bytes @ 0x10
   352     0030                     	ds	2
   353                           
   354                           	psect	maintext
   355     07A5                     __pmaintext:	
   356 ;;
   357 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   358 ;;
   359 ;; *************** function _main *****************
   360 ;; Defined at:
   361 ;;		line 55 in file "newmain.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;		None
   364 ;; Auto vars:     Size  Location     Type
   365 ;;  value          16    0[BANK0 ] unsigned char [16]
   366 ;;  i               2   16[BANK0 ] int 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : B00/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   376 ;;      Params:         0       0       0       0       0
   377 ;;      Locals:         0      18       0       0       0
   378 ;;      Temps:          0       0       0       0       0
   379 ;;      Totals:         0      18       0       0       0
   380 ;;Total ram usage:       18 bytes
   381 ;; Hardware stack levels required when called: 2
   382 ;; This function calls:
   383 ;;		_EEPROM_read
   384 ;;		_lcd_command
   385 ;;		_lcd_data
   386 ;;		_lcd_init
   387 ;;		_lcd_setCursor
   388 ;;		_lcd_string
   389 ;; This function is called by:
   390 ;;		Startup code after reset
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394     07A5                     _main:	
   395                           ;psect for function _main
   396                           
   397     07A5                     l826:	
   398                           ;incstack = 0
   399                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   400                           
   401                           
   402                           ;newmain.c: 57:     TRISB = 0;
   403     07A5  1683               	bsf	3,5	;RP0=1, select bank1
   404     07A6  1303               	bcf	3,6	;RP1=0, select bank1
   405     07A7  0186               	clrf	6	;volatile
   406                           
   407                           ;newmain.c: 58:     TRISC = 0;
   408     07A8  0187               	clrf	7	;volatile
   409                           
   410                           ;newmain.c: 59:     PORTD = 0;
   411     07A9  1283               	bcf	3,5	;RP0=0, select bank0
   412     07AA  1303               	bcf	3,6	;RP1=0, select bank0
   413     07AB  0188               	clrf	8	;volatile
   414                           
   415                           ;newmain.c: 60:     PORTC = 0;
   416     07AC  0187               	clrf	7	;volatile
   417     07AD                     l828:
   418                           
   419                           ;newmain.c: 61:     lcd_init();
   420     07AD  120A  118A  273E  120A  118A  	fcall	_lcd_init
   421     07B2                     l830:
   422                           
   423                           ;newmain.c: 63:     lcd_setCursor(0,0);
   424     07B2  01F2               	clrf	lcd_setCursor@y
   425     07B3  3000               	movlw	0
   426     07B4  120A  118A  275D  120A  118A  	fcall	_lcd_setCursor
   427     07B9                     l832:
   428                           
   429                           ;newmain.c: 64:     lcd_string("Write reg 0x01");
   430     07B9  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   431     07BA  120A  118A  277E  120A  118A  	fcall	_lcd_string
   432     07BF                     l834:
   433                           
   434                           ;newmain.c: 66:     lcd_command(0x01);
   435     07BF  3001               	movlw	1
   436     07C0  120A  118A  271C  120A  118A  	fcall	_lcd_command
   437     07C5                     l836:
   438                           
   439                           ;newmain.c: 67:     lcd_setCursor(0,0);
   440     07C5  01F2               	clrf	lcd_setCursor@y
   441     07C6  3000               	movlw	0
   442     07C7  120A  118A  275D  120A  118A  	fcall	_lcd_setCursor
   443     07CC                     l838:
   444                           
   445                           ;newmain.c: 68:     unsigned char value[16];;newmain.c: 69:     int i=0;
   446     07CC  1283               	bcf	3,5	;RP0=0, select bank0
   447     07CD  1303               	bcf	3,6	;RP1=0, select bank0
   448     07CE  01B0               	clrf	main@i
   449     07CF  01B1               	clrf	main@i+1
   450     07D0                     l87:	
   451                           ;newmain.c: 71:     while(1)
   452                           
   453                           
   454                           ;newmain.c: 72:     {;newmain.c: 73:         value[i] = EEPROM_read(0x00+i);
   455     07D0  0830               	movf	main@i,w
   456     07D1  3E20               	addlw	(low (main@value| 0))& (0+255)
   457     07D2  0084               	movwf	4
   458     07D3  0830               	movf	main@i,w
   459     07D4  120A  118A  270D  120A  118A  	fcall	_EEPROM_read
   460     07D9  1383               	bcf	3,7	;select IRP bank0
   461     07DA  0080               	movwf	0
   462     07DB                     l840:
   463                           
   464                           ;newmain.c: 74:         if(value[i]==0xFF)
   465     07DB  1283               	bcf	3,5	;RP0=0, select bank0
   466     07DC  1303               	bcf	3,6	;RP1=0, select bank0
   467     07DD  0830               	movf	main@i,w
   468     07DE  3E20               	addlw	(low (main@value| 0))& (0+255)
   469     07DF  0084               	movwf	4
   470     07E0  0A00               	incf	0,w
   471     07E1  1D03               	btfss	3,2
   472     07E2  2FE4               	goto	u181
   473     07E3  2FE5               	goto	u180
   474     07E4                     u181:
   475     07E4  2FE6               	goto	l844
   476     07E5                     u180:
   477     07E5  2FF8               	goto	l91
   478     07E6                     l844:
   479                           
   480                           ;newmain.c: 76:         lcd_data(value[i]);
   481     07E6  0830               	movf	main@i,w
   482     07E7  3E20               	addlw	(low (main@value| 0))& (0+255)
   483     07E8  0084               	movwf	4
   484     07E9  0800               	movf	0,w
   485     07EA  120A  118A  272D  120A  118A  	fcall	_lcd_data
   486     07EF                     l846:
   487                           
   488                           ;newmain.c: 77:         i++;
   489     07EF  3001               	movlw	1
   490     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   491     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   492     07F2  07B0               	addwf	main@i,f
   493     07F3  1803               	skipnc
   494     07F4  0AB1               	incf	main@i+1,f
   495     07F5  3000               	movlw	0
   496     07F6  07B1               	addwf	main@i+1,f
   497     07F7  2FD0               	goto	l87
   498     07F8                     l91:	
   499                           ;newmain.c: 80:     while(1)
   500                           
   501     07F8  2FF8               	goto	l91
   502     07F9  120A  118A  2800   	ljmp	start
   503     07FC                     __end_of_main:
   504                           
   505                           	psect	text1
   506     077E                     __ptext1:	
   507 ;; *************** function _lcd_string *****************
   508 ;; Defined at:
   509 ;;		line 43 in file "./lcd_8bit.h"
   510 ;; Parameters:    Size  Location     Type
   511 ;;  string_data     1    wreg     PTR unsigned char 
   512 ;;		 -> STR_1(15), 
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  string_data     1    2[COMMON] PTR unsigned char 
   515 ;;		 -> STR_1(15), 
   516 ;;  i               2    3[COMMON] int 
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : 0/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   526 ;;      Params:         0       0       0       0       0
   527 ;;      Locals:         3       0       0       0       0
   528 ;;      Temps:          0       0       0       0       0
   529 ;;      Totals:         3       0       0       0       0
   530 ;;Total ram usage:        3 bytes
   531 ;; Hardware stack levels used: 1
   532 ;; Hardware stack levels required when called: 1
   533 ;; This function calls:
   534 ;;		_lcd_data
   535 ;; This function is called by:
   536 ;;		_main
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540     077E                     _lcd_string:	
   541                           ;psect for function _lcd_string
   542                           
   543                           
   544                           ;incstack = 0
   545                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   546                           ;lcd_string@string_data stored from wreg
   547     077E  00F2               	movwf	lcd_string@string_data
   548     077F                     l776:
   549                           
   550                           ;./lcd_8bit.h: 44:     int i = 0;
   551     077F  01F3               	clrf	lcd_string@i
   552     0780  01F4               	clrf	lcd_string@i+1
   553                           
   554                           ;./lcd_8bit.h: 45:     for (i = 0; string_data[i] != 0; i++) {
   555     0781  01F3               	clrf	lcd_string@i
   556     0782  01F4               	clrf	lcd_string@i+1
   557     0783  2F97               	goto	l782
   558     0784                     l778:
   559                           
   560                           ;./lcd_8bit.h: 46:         lcd_data(string_data[i]);
   561     0784  0873               	movf	lcd_string@i,w
   562     0785  0772               	addwf	lcd_string@string_data,w
   563     0786  0084               	movwf	4
   564     0787  120A  118A  2003  120A  118A  	fcall	stringdir
   565     078C  120A  118A  272D  120A  118A  	fcall	_lcd_data
   566     0791                     l780:
   567                           
   568                           ;./lcd_8bit.h: 47:     }
   569     0791  3001               	movlw	1
   570     0792  07F3               	addwf	lcd_string@i,f
   571     0793  1803               	skipnc
   572     0794  0AF4               	incf	lcd_string@i+1,f
   573     0795  3000               	movlw	0
   574     0796  07F4               	addwf	lcd_string@i+1,f
   575     0797                     l782:
   576     0797  0873               	movf	lcd_string@i,w
   577     0798  0772               	addwf	lcd_string@string_data,w
   578     0799  0084               	movwf	4
   579     079A  120A  118A  2003  120A  118A  	fcall	stringdir
   580     079F  3A00               	xorlw	0
   581     07A0  1D03               	skipz
   582     07A1  2FA3               	goto	u111
   583     07A2  2FA4               	goto	u110
   584     07A3                     u111:
   585     07A3  2F84               	goto	l778
   586     07A4                     u110:
   587     07A4                     l49:
   588     07A4  0008               	return
   589     07A5                     __end_of_lcd_string:
   590                           
   591                           	psect	text2
   592     072D                     __ptext2:	
   593 ;; *************** function _lcd_data *****************
   594 ;; Defined at:
   595 ;;		line 23 in file "./lcd_8bit.h"
   596 ;; Parameters:    Size  Location     Type
   597 ;;  Data            1    wreg     unsigned char 
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  Data            1    1[COMMON] unsigned char 
   600 ;; Return value:  Size  Location     Type
   601 ;;                  1    wreg      void 
   602 ;; Registers used:
   603 ;;		wreg
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   609 ;;      Params:         0       0       0       0       0
   610 ;;      Locals:         1       0       0       0       0
   611 ;;      Temps:          1       0       0       0       0
   612 ;;      Totals:         2       0       0       0       0
   613 ;;Total ram usage:        2 bytes
   614 ;; Hardware stack levels used: 1
   615 ;; This function calls:
   616 ;;		Nothing
   617 ;; This function is called by:
   618 ;;		_lcd_string
   619 ;;		_main
   620 ;;		_lcd_number
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624     072D                     _lcd_data:	
   625                           ;psect for function _lcd_data
   626                           
   627                           
   628                           ;incstack = 0
   629                           ; Regs used in _lcd_data: [wreg]
   630                           ;lcd_data@Data stored from wreg
   631     072D  00F1               	movwf	lcd_data@Data
   632     072E                     l758:
   633                           
   634                           ;./lcd_8bit.h: 24:     PORTCbits.RC0 = 1;
   635     072E  1283               	bcf	3,5	;RP0=0, select bank0
   636     072F  1303               	bcf	3,6	;RP1=0, select bank0
   637     0730  1407               	bsf	7,0	;volatile
   638                           
   639                           ;./lcd_8bit.h: 25:     PORTCbits.RC1 = 0;
   640     0731  1087               	bcf	7,1	;volatile
   641                           
   642                           ;./lcd_8bit.h: 26:     PORTCbits.RC2 = 1;
   643     0732  1507               	bsf	7,2	;volatile
   644     0733                     l760:
   645                           
   646                           ;./lcd_8bit.h: 27:     PORTB = Data;
   647     0733  0871               	movf	lcd_data@Data,w
   648     0734  0086               	movwf	6	;volatile
   649     0735                     l762:
   650                           
   651                           ;./lcd_8bit.h: 28:     PORTCbits.RC2 = 0;
   652     0735  1107               	bcf	7,2	;volatile
   653                           
   654                           ;./lcd_8bit.h: 29:     _delay((unsigned long)((1)*(4000000/4000.0)));
   655     0736  30C7               	movlw	199
   656     0737  00F0               	movwf	??_lcd_data
   657     0738                     u197:
   658     0738  2F39               	nop2
   659     0739  0BF0               	decfsz	??_lcd_data,f
   660     073A  2F38               	goto	u197
   661     073B  2F3C               	nop2
   662     073C  2F3D               	nop2
   663     073D                     l40:
   664     073D  0008               	return
   665     073E                     __end_of_lcd_data:
   666                           
   667                           	psect	text3
   668     075D                     __ptext3:	
   669 ;; *************** function _lcd_setCursor *****************
   670 ;; Defined at:
   671 ;;		line 73 in file "./lcd_8bit.h"
   672 ;; Parameters:    Size  Location     Type
   673 ;;  x               1    wreg     unsigned char 
   674 ;;  y               1    2[COMMON] unsigned char 
   675 ;; Auto vars:     Size  Location     Type
   676 ;;  x               1    3[COMMON] unsigned char 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0, pclath, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   686 ;;      Params:         1       0       0       0       0
   687 ;;      Locals:         1       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0
   689 ;;      Totals:         2       0       0       0       0
   690 ;;Total ram usage:        2 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 1
   693 ;; This function calls:
   694 ;;		_lcd_command
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700     075D                     _lcd_setCursor:	
   701                           ;psect for function _lcd_setCursor
   702                           
   703                           
   704                           ;incstack = 0
   705                           ; Regs used in _lcd_setCursor: [wreg+status,2+status,0+pclath+cstack]
   706                           ;lcd_setCursor@x stored from wreg
   707     075D  00F3               	movwf	lcd_setCursor@x
   708     075E                     l784:
   709                           
   710                           ;./lcd_8bit.h: 73: void lcd_setCursor(unsigned char x, unsigned char y);./lcd_8bit.h: 74
      +                          : {;./lcd_8bit.h: 75:     if (x >= 0 && x < 16) {
   711     075E  3010               	movlw	16
   712     075F  0273               	subwf	lcd_setCursor@x,w
   713     0760  1803               	skipnc
   714     0761  2F63               	goto	u121
   715     0762  2F64               	goto	u120
   716     0763                     u121:
   717     0763  2F7D               	goto	l67
   718     0764                     u120:
   719     0764                     l786:
   720                           
   721                           ;./lcd_8bit.h: 76:         if (y == 0)
   722     0764  0872               	movf	lcd_setCursor@y,w
   723     0765  1D03               	btfss	3,2
   724     0766  2F68               	goto	u131
   725     0767  2F69               	goto	u130
   726     0768                     u131:
   727     0768  2F71               	goto	l790
   728     0769                     u130:
   729     0769                     l788:
   730                           
   731                           ;./lcd_8bit.h: 77:         {;./lcd_8bit.h: 78:             lcd_command(0x80 + x);
   732     0769  0873               	movf	lcd_setCursor@x,w
   733     076A  3E80               	addlw	128
   734     076B  120A  118A  271C  120A  118A  	fcall	_lcd_command
   735                           
   736                           ;./lcd_8bit.h: 80:         } else if (y == 1)
   737     0770  2F7D               	goto	l67
   738     0771                     l790:
   739     0771  0372               	decf	lcd_setCursor@y,w
   740     0772  1D03               	btfss	3,2
   741     0773  2F75               	goto	u141
   742     0774  2F76               	goto	u140
   743     0775                     u141:
   744     0775  2F7D               	goto	l67
   745     0776                     u140:
   746     0776                     l792:
   747                           
   748                           ;./lcd_8bit.h: 81:         {;./lcd_8bit.h: 82:             lcd_command(0xC0 + x);
   749     0776  0873               	movf	lcd_setCursor@x,w
   750     0777  3EC0               	addlw	192
   751     0778  120A  118A  271C  120A  118A  	fcall	_lcd_command
   752     077D                     l67:
   753     077D  0008               	return
   754     077E                     __end_of_lcd_setCursor:
   755                           
   756                           	psect	text4
   757     073E                     __ptext4:	
   758 ;; *************** function _lcd_init *****************
   759 ;; Defined at:
   760 ;;		line 32 in file "./lcd_8bit.h"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;		None
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		wreg, status,2, status,0, pclath, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   774 ;;      Params:         0       0       0       0       0
   775 ;;      Locals:         0       0       0       0       0
   776 ;;      Temps:          0       0       0       0       0
   777 ;;      Totals:         0       0       0       0       0
   778 ;;Total ram usage:        0 bytes
   779 ;; Hardware stack levels used: 1
   780 ;; Hardware stack levels required when called: 1
   781 ;; This function calls:
   782 ;;		_lcd_command
   783 ;; This function is called by:
   784 ;;		_main
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788     073E                     _lcd_init:	
   789                           ;psect for function _lcd_init
   790                           
   791     073E                     l764:	
   792                           ;incstack = 0
   793                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   794                           
   795                           
   796                           ;./lcd_8bit.h: 33:     TRISCbits.TRISC0 = 0;
   797     073E  1683               	bsf	3,5	;RP0=1, select bank1
   798     073F  1303               	bcf	3,6	;RP1=0, select bank1
   799     0740  1007               	bcf	7,0	;volatile
   800                           
   801                           ;./lcd_8bit.h: 34:     TRISCbits.TRISC1 = 0;
   802     0741  1087               	bcf	7,1	;volatile
   803                           
   804                           ;./lcd_8bit.h: 35:     TRISCbits.TRISC2 = 0;
   805     0742  1107               	bcf	7,2	;volatile
   806     0743                     l766:
   807                           
   808                           ;./lcd_8bit.h: 36:     TRISB = 0;
   809     0743  0186               	clrf	6	;volatile
   810     0744                     l768:
   811                           
   812                           ;./lcd_8bit.h: 37:     lcd_command(0x0C);
   813     0744  300C               	movlw	12
   814     0745  120A  118A  271C  120A  118A  	fcall	_lcd_command
   815     074A                     l770:
   816                           
   817                           ;./lcd_8bit.h: 38:     lcd_command(0x38);
   818     074A  3038               	movlw	56
   819     074B  120A  118A  271C  120A  118A  	fcall	_lcd_command
   820     0750                     l772:
   821                           
   822                           ;./lcd_8bit.h: 39:     lcd_command(0x80);
   823     0750  3080               	movlw	128
   824     0751  120A  118A  271C  120A  118A  	fcall	_lcd_command
   825     0756                     l774:
   826                           
   827                           ;./lcd_8bit.h: 40:     lcd_command(0x01);
   828     0756  3001               	movlw	1
   829     0757  120A  118A  271C  120A  118A  	fcall	_lcd_command
   830     075C                     l43:
   831     075C  0008               	return
   832     075D                     __end_of_lcd_init:
   833                           
   834                           	psect	text5
   835     071C                     __ptext5:	
   836 ;; *************** function _lcd_command *****************
   837 ;; Defined at:
   838 ;;		line 14 in file "./lcd_8bit.h"
   839 ;; Parameters:    Size  Location     Type
   840 ;;  cmd             1    wreg     unsigned char 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  cmd             1    1[COMMON] unsigned char 
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   852 ;;      Params:         0       0       0       0       0
   853 ;;      Locals:         1       0       0       0       0
   854 ;;      Temps:          1       0       0       0       0
   855 ;;      Totals:         2       0       0       0       0
   856 ;;Total ram usage:        2 bytes
   857 ;; Hardware stack levels used: 1
   858 ;; This function calls:
   859 ;;		Nothing
   860 ;; This function is called by:
   861 ;;		_lcd_init
   862 ;;		_lcd_setCursor
   863 ;;		_main
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867     071C                     _lcd_command:	
   868                           ;psect for function _lcd_command
   869                           
   870                           
   871                           ;incstack = 0
   872                           ; Regs used in _lcd_command: [wreg]
   873                           ;lcd_command@cmd stored from wreg
   874     071C  00F1               	movwf	lcd_command@cmd
   875     071D                     l752:
   876                           
   877                           ;./lcd_8bit.h: 15:     PORTCbits.RC0 = 0x00;
   878     071D  1283               	bcf	3,5	;RP0=0, select bank0
   879     071E  1303               	bcf	3,6	;RP1=0, select bank0
   880     071F  1007               	bcf	7,0	;volatile
   881                           
   882                           ;./lcd_8bit.h: 16:     PORTCbits.RC1 = 0x00;
   883     0720  1087               	bcf	7,1	;volatile
   884                           
   885                           ;./lcd_8bit.h: 17:     PORTCbits.RC2 = 0x01;
   886     0721  1507               	bsf	7,2	;volatile
   887     0722                     l754:
   888                           
   889                           ;./lcd_8bit.h: 18:     PORTB = cmd;
   890     0722  0871               	movf	lcd_command@cmd,w
   891     0723  0086               	movwf	6	;volatile
   892     0724                     l756:
   893                           
   894                           ;./lcd_8bit.h: 19:     PORTCbits.RC2 = 0;
   895     0724  1107               	bcf	7,2	;volatile
   896                           
   897                           ;./lcd_8bit.h: 20:     _delay((unsigned long)((1)*(4000000/4000.0)));
   898     0725  30C7               	movlw	199
   899     0726  00F0               	movwf	??_lcd_command
   900     0727                     u207:
   901     0727  2F28               	nop2
   902     0728  0BF0               	decfsz	??_lcd_command,f
   903     0729  2F27               	goto	u207
   904     072A  2F2B               	nop2
   905     072B  2F2C               	nop2
   906     072C                     l37:
   907     072C  0008               	return
   908     072D                     __end_of_lcd_command:
   909                           
   910                           	psect	text6
   911     070D                     __ptext6:	
   912 ;; *************** function _EEPROM_read *****************
   913 ;; Defined at:
   914 ;;		line 46 in file "newmain.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  ADR             1    wreg     unsigned char 
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  ADR             1    0[COMMON] unsigned char 
   919 ;;  Data            1    1[COMMON] unsigned char 
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      unsigned char 
   922 ;; Registers used:
   923 ;;		wreg
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   929 ;;      Params:         0       0       0       0       0
   930 ;;      Locals:         2       0       0       0       0
   931 ;;      Temps:          0       0       0       0       0
   932 ;;      Totals:         2       0       0       0       0
   933 ;;Total ram usage:        2 bytes
   934 ;; Hardware stack levels used: 1
   935 ;; This function calls:
   936 ;;		Nothing
   937 ;; This function is called by:
   938 ;;		_main
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942     070D                     _EEPROM_read:	
   943                           ;psect for function _EEPROM_read
   944                           
   945                           
   946                           ;incstack = 0
   947                           ; Regs used in _EEPROM_read: [wreg]
   948                           ;EEPROM_read@ADR stored from wreg
   949     070D  00F0               	movwf	EEPROM_read@ADR
   950     070E                     l794:
   951                           
   952                           ;newmain.c: 46: unsigned char EEPROM_read(unsigned char ADR);newmain.c: 47: {;newmain.c:
      +                           48:     unsigned char Data;;newmain.c: 49:     EEADR = ADR;
   953     070E  0870               	movf	EEPROM_read@ADR,w
   954     070F  1283               	bcf	3,5	;RP0=0, select bank2
   955     0710  1703               	bsf	3,6	;RP1=1, select bank2
   956     0711  008D               	movwf	13	;volatile
   957     0712                     l796:
   958                           
   959                           ;newmain.c: 50:     EEPGD = 0;
   960     0712  1683               	bsf	3,5	;RP0=1, select bank3
   961     0713  1703               	bsf	3,6	;RP1=1, select bank3
   962     0714  138C               	bcf	12,7	;volsfr
   963     0715                     l798:
   964                           
   965                           ;newmain.c: 51:     RD = 1;
   966     0715  140C               	bsf	12,0	;volsfr
   967                           
   968                           ;newmain.c: 52:     Data = EEDAT;
   969     0716  1283               	bcf	3,5	;RP0=0, select bank2
   970     0717  1703               	bsf	3,6	;RP1=1, select bank2
   971     0718  080C               	movf	12,w	;volatile
   972     0719  00F1               	movwf	EEPROM_read@Data
   973                           
   974                           ;newmain.c: 53:     return Data;
   975     071A  0871               	movf	EEPROM_read@Data,w
   976     071B                     l82:
   977     071B  0008               	return
   978     071C                     __end_of_EEPROM_read:
   979     007E                     btemp	set	126	;btemp
   980     007E                     wtemp0	set	126
   981                           
   982                           	psect	config
   983                           
   984                           ;Config register CONFIG1 @ 0x2007
   985                           ;	Oscillator Selection bits
   986                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   987                           ;	Watchdog Timer Enable bit
   988                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   989                           ;	Power-up Timer Enable bit
   990                           ;	PWRTE = OFF, PWRT disabled
   991                           ;	RE3/MCLR pin function select bit
   992                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   993                           ;	Code Protection bit
   994                           ;	CP = OFF, Program memory code protection is disabled
   995                           ;	Data Code Protection bit
   996                           ;	CPD = OFF, Data memory code protection is disabled
   997                           ;	Brown Out Reset Selection bits
   998                           ;	BOREN = OFF, BOR disabled
   999                           ;	Internal External Switchover bit
  1000                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1001                           ;	Fail-Safe Clock Monitor Enabled bit
  1002                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1003                           ;	Low Voltage Programming Enable bit
  1004                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1005                           ;	In-Circuit Debugger Mode bit
  1006                           ;	DEBUG = 0x1, unprogrammed default
  1007     2007                     	org	8199
  1008     2007  20D2               	dw	8402
  1009                           
  1010                           ;Config register CONFIG2 @ 0x2008
  1011                           ;	Brown-out Reset Selection bit
  1012                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1013                           ;	Flash Program Memory Self Write Enable bits
  1014                           ;	WRT = OFF, Write protection off
  1015     2008                     	org	8200
  1016     2008  3FFF               	dw	16383

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       5
    BANK0            80     18      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@string_data	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_lcd_string
    _lcd_string->_lcd_data
    _lcd_setCursor->_lcd_command
    _lcd_init->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0     701
                                              0 BANK0     18    18      0
                        _EEPROM_read
                        _lcd_command
                           _lcd_data
                           _lcd_init
                      _lcd_setCursor
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           3     3      0     146
                                              2 COMMON     3     3      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcd_setCursor                                        2     1      1     284
                                              2 COMMON     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      22
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_read                                          2     2      0      45
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_read
   _lcd_command
   _lcd_data
   _lcd_init
     _lcd_command
   _lcd_setCursor
     _lcd_command
   _lcd_string
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       5       1       35.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     12      12       5       22.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Jun 13 14:19:17 2024

           lcd_data@Data 0071                        pc 0002           ?_lcd_setCursor 0072  
                     l40 073D                       l43 075C                       l37 072C  
                     l49 07A4                       l82 071B                       l67 077D  
                     l91 07F8                       l87 07D0                       _RD 0C60  
                     _WR 0C61                       fsr 0004                      l830 07B2  
                    l752 071D                      l760 0733                      l840 07DB  
                    l832 07B9                      l754 0722                      l770 074A  
                    l762 0735                      l834 07BF                      l826 07A5  
                    l756 0724                      l772 0750                      l764 073E  
                    l780 0791                      l844 07E6                      l836 07C5  
                    l828 07AD                      l774 0756                      l766 0743  
                    l790 0771                      l758 072E                      l782 0797  
                    l846 07EF                      l838 07CC                      l768 0744  
                    l792 0776                      l784 075E                      l776 077F  
                    l794 070E                      l786 0764                      l778 0784  
                    l796 0712                      l788 0769                      l798 0715  
                    _GIE 005F                      u110 07A4                      u111 07A3  
                    u120 0764                      u121 0763                      u130 0769  
                    u131 0768                      u140 0776                      u141 0775  
                    u207 0727                      u180 07E5                      u181 07E4  
                    u197 0738                      fsr0 0004                      indf 0000  
                   _EEIF 006C                     STR_1 0009                     _WREN 0C62  
                   _main 07A5                     btemp 007E                     start 0000  
         EEPROM_read@ADR 0070              lcd_string@i 0073                    ?_main 0070  
                  _EEADR 010D                    _EEDAT 010C                    _EEPGD 0C67  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  _TRISB 0086                    _TRISC 0087                    main@i 0030  
                  pclath 000A                    status 0003                    wtemp0 007E  
        EEPROM_read@Data 0071          __initialization 07FC          ??_lcd_setCursor 0073  
           __end_of_main 07FC                   ??_main 0075           lcd_command@cmd 0071  
                 _EECON2 018D         __end_of_lcd_data 073E         __end_of_lcd_init 075D  
__end_of__initialization 07FC           __pcstackCOMMON 0070           lcd_setCursor@x 0073  
         lcd_setCursor@y 0072               __pmaintext 07A5                ?_lcd_data 0070  
             _lcd_string 077E                ?_lcd_init 0070               __stringtab 0003  
                __ptext1 077E                  __ptext2 072D                  __ptext3 075D  
                __ptext4 073E                  __ptext5 071C                  __ptext6 070D  
             ??_lcd_data 0070               ??_lcd_init 0072     end_of_initialization 07FC  
          ??_EEPROM_read 0070    lcd_string@string_data 0072    __end_of_lcd_setCursor 077E  
              _PORTCbits 0007                _TRISCbits 0087              ?_lcd_string 0070  
          ??_lcd_command 0070      __end_of_EEPROM_read 071C      start_initialization 07FC  
    __end_of_lcd_command 072D                ___latbits 0002            __pcstackBANK0 0020  
            _EEPROM_read 070D                __pstrings 0003              _lcd_command 071C  
            __stringbase 0008                main@value 0020             ??_lcd_string 0072  
     __end_of_lcd_string 07A5       __end_of__stringtab 0009                 _lcd_data 072D  
               _lcd_init 073E             ?_EEPROM_read 0070                stringcode 0003  
          _lcd_setCursor 075D                 stringdir 0003                 stringtab 0003  
           ?_lcd_command 0070  
